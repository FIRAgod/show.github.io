// node_modules/gsplat/dist/index.js
var t = class _t {
  constructor(t2 = 0, l2 = 0, U2 = 0) {
    this.x = t2, this.y = l2, this.z = U2;
  }
  equals(t2) {
    return this.x === t2.x && (this.y === t2.y && this.z === t2.z);
  }
  add(l2) {
    return "number" == typeof l2 ? new _t(this.x + l2, this.y + l2, this.z + l2) : new _t(this.x + l2.x, this.y + l2.y, this.z + l2.z);
  }
  subtract(l2) {
    return "number" == typeof l2 ? new _t(this.x - l2, this.y - l2, this.z - l2) : new _t(this.x - l2.x, this.y - l2.y, this.z - l2.z);
  }
  multiply(l2) {
    return "number" == typeof l2 ? new _t(this.x * l2, this.y * l2, this.z * l2) : l2 instanceof _t ? new _t(this.x * l2.x, this.y * l2.y, this.z * l2.z) : new _t(this.x * l2.buffer[0] + this.y * l2.buffer[4] + this.z * l2.buffer[8] + l2.buffer[12], this.x * l2.buffer[1] + this.y * l2.buffer[5] + this.z * l2.buffer[9] + l2.buffer[13], this.x * l2.buffer[2] + this.y * l2.buffer[6] + this.z * l2.buffer[10] + l2.buffer[14]);
  }
  divide(l2) {
    return "number" == typeof l2 ? new _t(this.x / l2, this.y / l2, this.z / l2) : new _t(this.x / l2.x, this.y / l2.y, this.z / l2.z);
  }
  cross(l2) {
    const U2 = this.y * l2.z - this.z * l2.y, F2 = this.z * l2.x - this.x * l2.z, n2 = this.x * l2.y - this.y * l2.x;
    return new _t(U2, F2, n2);
  }
  dot(t2) {
    return this.x * t2.x + this.y * t2.y + this.z * t2.z;
  }
  lerp(l2, U2) {
    return new _t(this.x + (l2.x - this.x) * U2, this.y + (l2.y - this.y) * U2, this.z + (l2.z - this.z) * U2);
  }
  min(l2) {
    return new _t(Math.min(this.x, l2.x), Math.min(this.y, l2.y), Math.min(this.z, l2.z));
  }
  max(l2) {
    return new _t(Math.max(this.x, l2.x), Math.max(this.y, l2.y), Math.max(this.z, l2.z));
  }
  getComponent(t2) {
    switch (t2) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      case 2:
        return this.z;
      default:
        throw new Error(`Invalid component index: ${t2}`);
    }
  }
  minComponent() {
    return this.x < this.y && this.x < this.z ? 0 : this.y < this.z ? 1 : 2;
  }
  maxComponent() {
    return this.x > this.y && this.x > this.z ? 0 : this.y > this.z ? 1 : 2;
  }
  magnitude() {
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
  }
  distanceTo(t2) {
    return Math.sqrt((this.x - t2.x) ** 2 + (this.y - t2.y) ** 2 + (this.z - t2.z) ** 2);
  }
  normalize() {
    const l2 = this.magnitude();
    return new _t(this.x / l2, this.y / l2, this.z / l2);
  }
  flat() {
    return [this.x, this.y, this.z];
  }
  clone() {
    return new _t(this.x, this.y, this.z);
  }
  toString() {
    return `[${this.flat().join(", ")}]`;
  }
  static One(l2 = 1) {
    return new _t(l2, l2, l2);
  }
};
var l = class _l {
  constructor(t2 = 0, l2 = 0, U2 = 0, F2 = 1) {
    this.x = t2, this.y = l2, this.z = U2, this.w = F2;
  }
  equals(t2) {
    return this.x === t2.x && (this.y === t2.y && (this.z === t2.z && this.w === t2.w));
  }
  normalize() {
    const t2 = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
    return new _l(this.x / t2, this.y / t2, this.z / t2, this.w / t2);
  }
  multiply(t2) {
    const U2 = this.w, F2 = this.x, n2 = this.y, e2 = this.z, Q2 = t2.w, d2 = t2.x, A2 = t2.y, a2 = t2.z;
    return new _l(U2 * d2 + F2 * Q2 + n2 * a2 - e2 * A2, U2 * A2 - F2 * a2 + n2 * Q2 + e2 * d2, U2 * a2 + F2 * A2 - n2 * d2 + e2 * Q2, U2 * Q2 - F2 * d2 - n2 * A2 - e2 * a2);
  }
  inverse() {
    const t2 = this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
    return new _l(-this.x / t2, -this.y / t2, -this.z / t2, this.w / t2);
  }
  apply(U2) {
    const F2 = new _l(U2.x, U2.y, U2.z, 0), n2 = new _l(-this.x, -this.y, -this.z, this.w), e2 = this.multiply(F2).multiply(n2);
    return new t(e2.x, e2.y, e2.z);
  }
  flat() {
    return [this.x, this.y, this.z, this.w];
  }
  clone() {
    return new _l(this.x, this.y, this.z, this.w);
  }
  static FromEuler(t2) {
    const U2 = t2.x / 2, F2 = t2.y / 2, n2 = t2.z / 2, e2 = Math.cos(F2), Q2 = Math.sin(F2), d2 = Math.cos(U2), A2 = Math.sin(U2), a2 = Math.cos(n2), V2 = Math.sin(n2);
    return new _l(e2 * A2 * a2 + Q2 * d2 * V2, Q2 * d2 * a2 - e2 * A2 * V2, e2 * d2 * V2 - Q2 * A2 * a2, e2 * d2 * a2 + Q2 * A2 * V2);
  }
  toEuler() {
    const l2 = 2 * (this.w * this.x + this.y * this.z), U2 = 1 - 2 * (this.x * this.x + this.y * this.y), F2 = Math.atan2(l2, U2);
    let n2;
    const e2 = 2 * (this.w * this.y - this.z * this.x);
    n2 = Math.abs(e2) >= 1 ? Math.sign(e2) * Math.PI / 2 : Math.asin(e2);
    const Q2 = 2 * (this.w * this.z + this.x * this.y), d2 = 1 - 2 * (this.y * this.y + this.z * this.z), A2 = Math.atan2(Q2, d2);
    return new t(F2, n2, A2);
  }
  static FromMatrix3(t2) {
    const U2 = t2.buffer, F2 = U2[0] + U2[4] + U2[8];
    let n2, e2, Q2, d2;
    if (F2 > 0) {
      const t3 = 0.5 / Math.sqrt(F2 + 1);
      d2 = 0.25 / t3, n2 = (U2[7] - U2[5]) * t3, e2 = (U2[2] - U2[6]) * t3, Q2 = (U2[3] - U2[1]) * t3;
    } else if (U2[0] > U2[4] && U2[0] > U2[8]) {
      const t3 = 2 * Math.sqrt(1 + U2[0] - U2[4] - U2[8]);
      d2 = (U2[7] - U2[5]) / t3, n2 = 0.25 * t3, e2 = (U2[1] + U2[3]) / t3, Q2 = (U2[2] + U2[6]) / t3;
    } else if (U2[4] > U2[8]) {
      const t3 = 2 * Math.sqrt(1 + U2[4] - U2[0] - U2[8]);
      d2 = (U2[2] - U2[6]) / t3, n2 = (U2[1] + U2[3]) / t3, e2 = 0.25 * t3, Q2 = (U2[5] + U2[7]) / t3;
    } else {
      const t3 = 2 * Math.sqrt(1 + U2[8] - U2[0] - U2[4]);
      d2 = (U2[3] - U2[1]) / t3, n2 = (U2[2] + U2[6]) / t3, e2 = (U2[5] + U2[7]) / t3, Q2 = 0.25 * t3;
    }
    return new _l(n2, e2, Q2, d2);
  }
  static FromAxisAngle(t2, U2) {
    const F2 = U2 / 2, n2 = Math.sin(F2), e2 = Math.cos(F2);
    return new _l(t2.x * n2, t2.y * n2, t2.z * n2, e2);
  }
  static LookRotation(U2) {
    const F2 = new t(0, 0, 1), n2 = F2.dot(U2);
    if (Math.abs(n2 - -1) < 1e-6) return new _l(0, 1, 0, Math.PI);
    if (Math.abs(n2 - 1) < 1e-6) return new _l();
    const e2 = Math.acos(n2), Q2 = F2.cross(U2).normalize();
    return _l.FromAxisAngle(Q2, e2);
  }
  toString() {
    return `[${this.flat().join(", ")}]`;
  }
};
var U = class {
  constructor() {
    const t2 = /* @__PURE__ */ new Map();
    this.addEventListener = (l2, U2) => {
      t2.has(l2) || t2.set(l2, /* @__PURE__ */ new Set()), t2.get(l2).add(U2);
    }, this.removeEventListener = (l2, U2) => {
      t2.has(l2) && t2.get(l2).delete(U2);
    }, this.hasEventListener = (l2, U2) => !!t2.has(l2) && t2.get(l2).has(U2), this.dispatchEvent = (l2) => {
      if (t2.has(l2.type)) for (const U2 of t2.get(l2.type)) U2(l2);
    };
  }
};
var F = class _F {
  constructor(t2 = 1, l2 = 0, U2 = 0, F2 = 0, n2 = 0, e2 = 1, Q2 = 0, d2 = 0, A2 = 0, a2 = 0, V2 = 1, B2 = 0, i2 = 0, Z2 = 0, s2 = 0, R2 = 1) {
    this.buffer = [t2, l2, U2, F2, n2, e2, Q2, d2, A2, a2, V2, B2, i2, Z2, s2, R2];
  }
  equals(t2) {
    if (this.buffer.length !== t2.buffer.length) return false;
    if (this.buffer === t2.buffer) return true;
    for (let l2 = 0; l2 < this.buffer.length; l2++) if (this.buffer[l2] !== t2.buffer[l2]) return false;
    return true;
  }
  multiply(t2) {
    const l2 = this.buffer, U2 = t2.buffer;
    return new _F(U2[0] * l2[0] + U2[1] * l2[4] + U2[2] * l2[8] + U2[3] * l2[12], U2[0] * l2[1] + U2[1] * l2[5] + U2[2] * l2[9] + U2[3] * l2[13], U2[0] * l2[2] + U2[1] * l2[6] + U2[2] * l2[10] + U2[3] * l2[14], U2[0] * l2[3] + U2[1] * l2[7] + U2[2] * l2[11] + U2[3] * l2[15], U2[4] * l2[0] + U2[5] * l2[4] + U2[6] * l2[8] + U2[7] * l2[12], U2[4] * l2[1] + U2[5] * l2[5] + U2[6] * l2[9] + U2[7] * l2[13], U2[4] * l2[2] + U2[5] * l2[6] + U2[6] * l2[10] + U2[7] * l2[14], U2[4] * l2[3] + U2[5] * l2[7] + U2[6] * l2[11] + U2[7] * l2[15], U2[8] * l2[0] + U2[9] * l2[4] + U2[10] * l2[8] + U2[11] * l2[12], U2[8] * l2[1] + U2[9] * l2[5] + U2[10] * l2[9] + U2[11] * l2[13], U2[8] * l2[2] + U2[9] * l2[6] + U2[10] * l2[10] + U2[11] * l2[14], U2[8] * l2[3] + U2[9] * l2[7] + U2[10] * l2[11] + U2[11] * l2[15], U2[12] * l2[0] + U2[13] * l2[4] + U2[14] * l2[8] + U2[15] * l2[12], U2[12] * l2[1] + U2[13] * l2[5] + U2[14] * l2[9] + U2[15] * l2[13], U2[12] * l2[2] + U2[13] * l2[6] + U2[14] * l2[10] + U2[15] * l2[14], U2[12] * l2[3] + U2[13] * l2[7] + U2[14] * l2[11] + U2[15] * l2[15]);
  }
  clone() {
    const t2 = this.buffer;
    return new _F(t2[0], t2[1], t2[2], t2[3], t2[4], t2[5], t2[6], t2[7], t2[8], t2[9], t2[10], t2[11], t2[12], t2[13], t2[14], t2[15]);
  }
  determinant() {
    const t2 = this.buffer;
    return t2[12] * t2[9] * t2[6] * t2[3] - t2[8] * t2[13] * t2[6] * t2[3] - t2[12] * t2[5] * t2[10] * t2[3] + t2[4] * t2[13] * t2[10] * t2[3] + t2[8] * t2[5] * t2[14] * t2[3] - t2[4] * t2[9] * t2[14] * t2[3] - t2[12] * t2[9] * t2[2] * t2[7] + t2[8] * t2[13] * t2[2] * t2[7] + t2[12] * t2[1] * t2[10] * t2[7] - t2[0] * t2[13] * t2[10] * t2[7] - t2[8] * t2[1] * t2[14] * t2[7] + t2[0] * t2[9] * t2[14] * t2[7] + t2[12] * t2[5] * t2[2] * t2[11] - t2[4] * t2[13] * t2[2] * t2[11] - t2[12] * t2[1] * t2[6] * t2[11] + t2[0] * t2[13] * t2[6] * t2[11] + t2[4] * t2[1] * t2[14] * t2[11] - t2[0] * t2[5] * t2[14] * t2[11] - t2[8] * t2[5] * t2[2] * t2[15] + t2[4] * t2[9] * t2[2] * t2[15] + t2[8] * t2[1] * t2[6] * t2[15] - t2[0] * t2[9] * t2[6] * t2[15] - t2[4] * t2[1] * t2[10] * t2[15] + t2[0] * t2[5] * t2[10] * t2[15];
  }
  invert() {
    const t2 = this.buffer, l2 = this.determinant();
    if (0 === l2) throw new Error("Matrix is not invertible.");
    const U2 = 1 / l2;
    return new _F(U2 * (t2[5] * t2[10] * t2[15] - t2[5] * t2[11] * t2[14] - t2[9] * t2[6] * t2[15] + t2[9] * t2[7] * t2[14] + t2[13] * t2[6] * t2[11] - t2[13] * t2[7] * t2[10]), U2 * (-t2[1] * t2[10] * t2[15] + t2[1] * t2[11] * t2[14] + t2[9] * t2[2] * t2[15] - t2[9] * t2[3] * t2[14] - t2[13] * t2[2] * t2[11] + t2[13] * t2[3] * t2[10]), U2 * (t2[1] * t2[6] * t2[15] - t2[1] * t2[7] * t2[14] - t2[5] * t2[2] * t2[15] + t2[5] * t2[3] * t2[14] + t2[13] * t2[2] * t2[7] - t2[13] * t2[3] * t2[6]), U2 * (-t2[1] * t2[6] * t2[11] + t2[1] * t2[7] * t2[10] + t2[5] * t2[2] * t2[11] - t2[5] * t2[3] * t2[10] - t2[9] * t2[2] * t2[7] + t2[9] * t2[3] * t2[6]), U2 * (-t2[4] * t2[10] * t2[15] + t2[4] * t2[11] * t2[14] + t2[8] * t2[6] * t2[15] - t2[8] * t2[7] * t2[14] - t2[12] * t2[6] * t2[11] + t2[12] * t2[7] * t2[10]), U2 * (t2[0] * t2[10] * t2[15] - t2[0] * t2[11] * t2[14] - t2[8] * t2[2] * t2[15] + t2[8] * t2[3] * t2[14] + t2[12] * t2[2] * t2[11] - t2[12] * t2[3] * t2[10]), U2 * (-t2[0] * t2[6] * t2[15] + t2[0] * t2[7] * t2[14] + t2[4] * t2[2] * t2[15] - t2[4] * t2[3] * t2[14] - t2[12] * t2[2] * t2[7] + t2[12] * t2[3] * t2[6]), U2 * (t2[0] * t2[6] * t2[11] - t2[0] * t2[7] * t2[10] - t2[4] * t2[2] * t2[11] + t2[4] * t2[3] * t2[10] + t2[8] * t2[2] * t2[7] - t2[8] * t2[3] * t2[6]), U2 * (t2[4] * t2[9] * t2[15] - t2[4] * t2[11] * t2[13] - t2[8] * t2[5] * t2[15] + t2[8] * t2[7] * t2[13] + t2[12] * t2[5] * t2[11] - t2[12] * t2[7] * t2[9]), U2 * (-t2[0] * t2[9] * t2[15] + t2[0] * t2[11] * t2[13] + t2[8] * t2[1] * t2[15] - t2[8] * t2[3] * t2[13] - t2[12] * t2[1] * t2[11] + t2[12] * t2[3] * t2[9]), U2 * (t2[0] * t2[5] * t2[15] - t2[0] * t2[7] * t2[13] - t2[4] * t2[1] * t2[15] + t2[4] * t2[3] * t2[13] + t2[12] * t2[1] * t2[7] - t2[12] * t2[3] * t2[5]), U2 * (-t2[0] * t2[5] * t2[11] + t2[0] * t2[7] * t2[9] + t2[4] * t2[1] * t2[11] - t2[4] * t2[3] * t2[9] - t2[8] * t2[1] * t2[7] + t2[8] * t2[3] * t2[5]), U2 * (-t2[4] * t2[9] * t2[14] + t2[4] * t2[10] * t2[13] + t2[8] * t2[5] * t2[14] - t2[8] * t2[6] * t2[13] - t2[12] * t2[5] * t2[10] + t2[12] * t2[6] * t2[9]), U2 * (t2[0] * t2[9] * t2[14] - t2[0] * t2[10] * t2[13] - t2[8] * t2[1] * t2[14] + t2[8] * t2[2] * t2[13] + t2[12] * t2[1] * t2[10] - t2[12] * t2[2] * t2[9]), U2 * (-t2[0] * t2[5] * t2[14] + t2[0] * t2[6] * t2[13] + t2[4] * t2[1] * t2[14] - t2[4] * t2[2] * t2[13] - t2[12] * t2[1] * t2[6] + t2[12] * t2[2] * t2[5]), U2 * (t2[0] * t2[5] * t2[10] - t2[0] * t2[6] * t2[9] - t2[4] * t2[1] * t2[10] + t2[4] * t2[2] * t2[9] + t2[8] * t2[1] * t2[6] - t2[8] * t2[2] * t2[5]));
  }
  static Compose(t2, l2, U2) {
    const n2 = l2.x, e2 = l2.y, Q2 = l2.z, d2 = l2.w, A2 = n2 + n2, a2 = e2 + e2, V2 = Q2 + Q2, B2 = n2 * A2, i2 = n2 * a2, Z2 = n2 * V2, s2 = e2 * a2, R2 = e2 * V2, c2 = Q2 * V2, o2 = d2 * A2, W2 = d2 * a2, r2 = d2 * V2, h2 = U2.x, m2 = U2.y, I2 = U2.z;
    return new _F((1 - (s2 + c2)) * h2, (i2 + r2) * h2, (Z2 - W2) * h2, 0, (i2 - r2) * m2, (1 - (B2 + c2)) * m2, (R2 + o2) * m2, 0, (Z2 + W2) * I2, (R2 - o2) * I2, (1 - (B2 + s2)) * I2, 0, t2.x, t2.y, t2.z, 1);
  }
  toString() {
    return `[${this.buffer.join(", ")}]`;
  }
};
var n = class extends Event {
  constructor(t2) {
    super("objectAdded"), this.object = t2;
  }
};
var e = class extends Event {
  constructor(t2) {
    super("objectRemoved"), this.object = t2;
  }
};
var Q = class extends Event {
  constructor(t2) {
    super("objectChanged"), this.object = t2;
  }
};
var d = class extends U {
  constructor() {
    super(), this.positionChanged = false, this.rotationChanged = false, this.scaleChanged = false, this._position = new t(), this._rotation = new l(), this._scale = new t(1, 1, 1), this._transform = new F(), this._changeEvent = new Q(this), this.update = () => {
    }, this.applyPosition = () => {
      this.position = new t();
    }, this.applyRotation = () => {
      this.rotation = new l();
    }, this.applyScale = () => {
      this.scale = new t(1, 1, 1);
    }, this.raiseChangeEvent = () => {
      this.dispatchEvent(this._changeEvent);
    };
  }
  _updateMatrix() {
    this._transform = F.Compose(this._position, this._rotation, this._scale);
  }
  get position() {
    return this._position;
  }
  set position(t2) {
    this._position.equals(t2) || (this._position = t2, this.positionChanged = true, this._updateMatrix(), this.dispatchEvent(this._changeEvent));
  }
  get rotation() {
    return this._rotation;
  }
  set rotation(t2) {
    this._rotation.equals(t2) || (this._rotation = t2, this.rotationChanged = true, this._updateMatrix(), this.dispatchEvent(this._changeEvent));
  }
  get scale() {
    return this._scale;
  }
  set scale(t2) {
    this._scale.equals(t2) || (this._scale = t2, this.scaleChanged = true, this._updateMatrix(), this.dispatchEvent(this._changeEvent));
  }
  get forward() {
    let l2 = new t(0, 0, 1);
    return l2 = this.rotation.apply(l2), l2;
  }
  get transform() {
    return this._transform;
  }
};
var A = class _A {
  constructor(t2 = 1, l2 = 0, U2 = 0, F2 = 0, n2 = 1, e2 = 0, Q2 = 0, d2 = 0, A2 = 1) {
    this.buffer = [t2, l2, U2, F2, n2, e2, Q2, d2, A2];
  }
  equals(t2) {
    if (this.buffer.length !== t2.buffer.length) return false;
    if (this.buffer === t2.buffer) return true;
    for (let l2 = 0; l2 < this.buffer.length; l2++) if (this.buffer[l2] !== t2.buffer[l2]) return false;
    return true;
  }
  multiply(t2) {
    const l2 = this.buffer, U2 = t2.buffer;
    return new _A(U2[0] * l2[0] + U2[3] * l2[1] + U2[6] * l2[2], U2[1] * l2[0] + U2[4] * l2[1] + U2[7] * l2[2], U2[2] * l2[0] + U2[5] * l2[1] + U2[8] * l2[2], U2[0] * l2[3] + U2[3] * l2[4] + U2[6] * l2[5], U2[1] * l2[3] + U2[4] * l2[4] + U2[7] * l2[5], U2[2] * l2[3] + U2[5] * l2[4] + U2[8] * l2[5], U2[0] * l2[6] + U2[3] * l2[7] + U2[6] * l2[8], U2[1] * l2[6] + U2[4] * l2[7] + U2[7] * l2[8], U2[2] * l2[6] + U2[5] * l2[7] + U2[8] * l2[8]);
  }
  clone() {
    const t2 = this.buffer;
    return new _A(t2[0], t2[1], t2[2], t2[3], t2[4], t2[5], t2[6], t2[7], t2[8]);
  }
  static Eye(t2 = 1) {
    return new _A(t2, 0, 0, 0, t2, 0, 0, 0, t2);
  }
  static Diagonal(t2) {
    return new _A(t2.x, 0, 0, 0, t2.y, 0, 0, 0, t2.z);
  }
  static RotationFromQuaternion(t2) {
    return new _A(1 - 2 * t2.y * t2.y - 2 * t2.z * t2.z, 2 * t2.x * t2.y - 2 * t2.z * t2.w, 2 * t2.x * t2.z + 2 * t2.y * t2.w, 2 * t2.x * t2.y + 2 * t2.z * t2.w, 1 - 2 * t2.x * t2.x - 2 * t2.z * t2.z, 2 * t2.y * t2.z - 2 * t2.x * t2.w, 2 * t2.x * t2.z - 2 * t2.y * t2.w, 2 * t2.y * t2.z + 2 * t2.x * t2.w, 1 - 2 * t2.x * t2.x - 2 * t2.y * t2.y);
  }
  static RotationFromEuler(t2) {
    const l2 = Math.cos(t2.x), U2 = Math.sin(t2.x), F2 = Math.cos(t2.y), n2 = Math.sin(t2.y), e2 = Math.cos(t2.z), Q2 = Math.sin(t2.z);
    return new _A(...[F2 * e2 + n2 * U2 * Q2, -F2 * Q2 + n2 * U2 * e2, n2 * l2, l2 * Q2, l2 * e2, -U2, -n2 * e2 + F2 * U2 * Q2, n2 * Q2 + F2 * U2 * e2, F2 * l2]);
  }
  toString() {
    return `[${this.buffer.join(", ")}]`;
  }
};
var a = class _a {
  constructor(t2 = 0, U2 = null, F2 = null, n2 = null, e2 = null) {
    this.changed = false, this.detached = false, this._vertexCount = t2, this._positions = U2 || new Float32Array(0), this._rotations = F2 || new Float32Array(0), this._scales = n2 || new Float32Array(0), this._colors = e2 || new Uint8Array(0), this._selection = new Uint8Array(this.vertexCount), this.translate = (t3) => {
      for (let l2 = 0; l2 < this.vertexCount; l2++) this.positions[3 * l2 + 0] += t3.x, this.positions[3 * l2 + 1] += t3.y, this.positions[3 * l2 + 2] += t3.z;
      this.changed = true;
    }, this.rotate = (t3) => {
      const U3 = A.RotationFromQuaternion(t3).buffer;
      for (let F3 = 0; F3 < this.vertexCount; F3++) {
        const n3 = this.positions[3 * F3 + 0], e3 = this.positions[3 * F3 + 1], Q2 = this.positions[3 * F3 + 2];
        this.positions[3 * F3 + 0] = U3[0] * n3 + U3[1] * e3 + U3[2] * Q2, this.positions[3 * F3 + 1] = U3[3] * n3 + U3[4] * e3 + U3[5] * Q2, this.positions[3 * F3 + 2] = U3[6] * n3 + U3[7] * e3 + U3[8] * Q2;
        const d2 = new l(this.rotations[4 * F3 + 1], this.rotations[4 * F3 + 2], this.rotations[4 * F3 + 3], this.rotations[4 * F3 + 0]), A2 = t3.multiply(d2);
        this.rotations[4 * F3 + 1] = A2.x, this.rotations[4 * F3 + 2] = A2.y, this.rotations[4 * F3 + 3] = A2.z, this.rotations[4 * F3 + 0] = A2.w;
      }
      this.changed = true;
    }, this.scale = (t3) => {
      for (let l2 = 0; l2 < this.vertexCount; l2++) this.positions[3 * l2 + 0] *= t3.x, this.positions[3 * l2 + 1] *= t3.y, this.positions[3 * l2 + 2] *= t3.z, this.scales[3 * l2 + 0] *= t3.x, this.scales[3 * l2 + 1] *= t3.y, this.scales[3 * l2 + 2] *= t3.z;
      this.changed = true;
    }, this.serialize = () => {
      const t3 = new Uint8Array(this.vertexCount * _a.RowLength), l2 = new Float32Array(t3.buffer), U3 = new Uint8Array(t3.buffer);
      for (let t4 = 0; t4 < this.vertexCount; t4++) l2[8 * t4 + 0] = this.positions[3 * t4 + 0], l2[8 * t4 + 1] = this.positions[3 * t4 + 1], l2[8 * t4 + 2] = this.positions[3 * t4 + 2], U3[32 * t4 + 24 + 0] = this.colors[4 * t4 + 0], U3[32 * t4 + 24 + 1] = this.colors[4 * t4 + 1], U3[32 * t4 + 24 + 2] = this.colors[4 * t4 + 2], U3[32 * t4 + 24 + 3] = this.colors[4 * t4 + 3], l2[8 * t4 + 3 + 0] = this.scales[3 * t4 + 0], l2[8 * t4 + 3 + 1] = this.scales[3 * t4 + 1], l2[8 * t4 + 3 + 2] = this.scales[3 * t4 + 2], U3[32 * t4 + 28 + 0] = 128 * this.rotations[4 * t4 + 0] + 128 & 255, U3[32 * t4 + 28 + 1] = 128 * this.rotations[4 * t4 + 1] + 128 & 255, U3[32 * t4 + 28 + 2] = 128 * this.rotations[4 * t4 + 2] + 128 & 255, U3[32 * t4 + 28 + 3] = 128 * this.rotations[4 * t4 + 3] + 128 & 255;
      return t3;
    }, this.reattach = (t3, l2, U3, F3, n3) => {
      console.assert(t3.byteLength === 3 * this.vertexCount * 4, `Expected ${3 * this.vertexCount * 4} bytes, got ${t3.byteLength} bytes`), this._positions = new Float32Array(t3), this._rotations = new Float32Array(l2), this._scales = new Float32Array(U3), this._colors = new Uint8Array(F3), this._selection = new Uint8Array(n3), this.detached = false;
    };
  }
  static Deserialize(t2) {
    const l2 = t2.length / _a.RowLength, U2 = new Float32Array(3 * l2), F2 = new Float32Array(4 * l2), n2 = new Float32Array(3 * l2), e2 = new Uint8Array(4 * l2), Q2 = new Float32Array(t2.buffer), d2 = new Uint8Array(t2.buffer);
    for (let t3 = 0; t3 < l2; t3++) U2[3 * t3 + 0] = Q2[8 * t3 + 0], U2[3 * t3 + 1] = Q2[8 * t3 + 1], U2[3 * t3 + 2] = Q2[8 * t3 + 2], F2[4 * t3 + 0] = (d2[32 * t3 + 28 + 0] - 128) / 128, F2[4 * t3 + 1] = (d2[32 * t3 + 28 + 1] - 128) / 128, F2[4 * t3 + 2] = (d2[32 * t3 + 28 + 2] - 128) / 128, F2[4 * t3 + 3] = (d2[32 * t3 + 28 + 3] - 128) / 128, n2[3 * t3 + 0] = Q2[8 * t3 + 3 + 0], n2[3 * t3 + 1] = Q2[8 * t3 + 3 + 1], n2[3 * t3 + 2] = Q2[8 * t3 + 3 + 2], e2[4 * t3 + 0] = d2[32 * t3 + 24 + 0], e2[4 * t3 + 1] = d2[32 * t3 + 24 + 1], e2[4 * t3 + 2] = d2[32 * t3 + 24 + 2], e2[4 * t3 + 3] = d2[32 * t3 + 24 + 3];
    return new _a(l2, U2, F2, n2, e2);
  }
  get vertexCount() {
    return this._vertexCount;
  }
  get positions() {
    return this._positions;
  }
  get rotations() {
    return this._rotations;
  }
  get scales() {
    return this._scales;
  }
  get colors() {
    return this._colors;
  }
  get selection() {
    return this._selection;
  }
};
a.RowLength = 32;
var V = class _V {
  constructor(t2, l2, U2, F2, n2) {
    this._vertexCount = t2, this._positions = l2, this._data = U2, this._width = F2, this._height = n2, this.serialize = () => new Uint8Array(this._data.buffer);
  }
  static Deserialize(t2, l2, U2) {
    const F2 = new Uint32Array(t2.buffer), n2 = new Float32Array(t2.buffer), e2 = Math.floor(n2.byteLength / this.RowLength), Q2 = new Float32Array(3 * e2);
    for (let t3 = 0; t3 < e2; t3++) Q2[3 * t3 + 0] = n2[16 * t3 + 0], Q2[3 * t3 + 1] = n2[16 * t3 + 1], Q2[3 * t3 + 2] = n2[16 * t3 + 2], Q2[3 * t3 + 0] = n2[16 * t3 + 3];
    return new _V(e2, Q2, F2, l2, U2);
  }
  get vertexCount() {
    return this._vertexCount;
  }
  get positions() {
    return this._positions;
  }
  get data() {
    return this._data;
  }
  get width() {
    return this._width;
  }
  get height() {
    return this._height;
  }
};
V.RowLength = 64;
var B = class {
  static SplatToPLY(t2, U2) {
    let F2 = "ply\nformat binary_little_endian 1.0\n";
    F2 += `element vertex ${U2}
`;
    const n2 = ["x", "y", "z", "nx", "ny", "nz", "f_dc_0", "f_dc_1", "f_dc_2"];
    for (let t3 = 0; t3 < 45; t3++) n2.push(`f_rest_${t3}`);
    n2.push("opacity"), n2.push("scale_0"), n2.push("scale_1"), n2.push("scale_2"), n2.push("rot_0"), n2.push("rot_1"), n2.push("rot_2"), n2.push("rot_3");
    for (const t3 of n2) F2 += `property float ${t3}
`;
    F2 += "end_header\n";
    const e2 = new TextEncoder().encode(F2), Q2 = 248, d2 = U2 * Q2, A2 = new DataView(new ArrayBuffer(e2.length + d2));
    new Uint8Array(A2.buffer).set(e2, 0);
    const a2 = new Float32Array(t2), V2 = new Uint8Array(t2), B2 = e2.length, i2 = 220, Z2 = 232;
    for (let t3 = 0; t3 < U2; t3++) {
      const U3 = a2[8 * t3 + 0], F3 = a2[8 * t3 + 1], n3 = a2[8 * t3 + 2], e3 = (V2[32 * t3 + 24 + 0] / 255 - 0.5) / this.SH_C0, d3 = (V2[32 * t3 + 24 + 1] / 255 - 0.5) / this.SH_C0, s2 = (V2[32 * t3 + 24 + 2] / 255 - 0.5) / this.SH_C0, R2 = V2[32 * t3 + 24 + 3] / 255, c2 = Math.log(R2 / (1 - R2)), o2 = Math.log(a2[8 * t3 + 3 + 0]), W2 = Math.log(a2[8 * t3 + 3 + 1]), r2 = Math.log(a2[8 * t3 + 3 + 2]);
      let h2 = new l((V2[32 * t3 + 28 + 1] - 128) / 128, (V2[32 * t3 + 28 + 2] - 128) / 128, (V2[32 * t3 + 28 + 3] - 128) / 128, (V2[32 * t3 + 28 + 0] - 128) / 128);
      h2 = h2.normalize();
      const m2 = h2.w, I2 = h2.x, J2 = h2.y, b2 = h2.z;
      A2.setFloat32(B2 + Q2 * t3 + 0, U3, true), A2.setFloat32(B2 + Q2 * t3 + 4, F3, true), A2.setFloat32(B2 + Q2 * t3 + 8, n3, true), A2.setFloat32(B2 + Q2 * t3 + 24 + 0, e3, true), A2.setFloat32(B2 + Q2 * t3 + 24 + 4, d3, true), A2.setFloat32(B2 + Q2 * t3 + 24 + 8, s2, true), A2.setFloat32(B2 + Q2 * t3 + 216, c2, true), A2.setFloat32(B2 + Q2 * t3 + i2 + 0, o2, true), A2.setFloat32(B2 + Q2 * t3 + i2 + 4, W2, true), A2.setFloat32(B2 + Q2 * t3 + i2 + 8, r2, true), A2.setFloat32(B2 + Q2 * t3 + Z2 + 0, m2, true), A2.setFloat32(B2 + Q2 * t3 + Z2 + 4, I2, true), A2.setFloat32(B2 + Q2 * t3 + Z2 + 8, J2, true), A2.setFloat32(B2 + Q2 * t3 + Z2 + 12, b2, true);
    }
    return A2.buffer;
  }
};
B.SH_C0 = 0.28209479177387814;
var i = class {
  constructor(t2, l2) {
    this.min = t2, this.max = l2;
  }
  contains(t2) {
    return t2.x >= this.min.x && t2.x <= this.max.x && t2.y >= this.min.y && t2.y <= this.max.y && t2.z >= this.min.z && t2.z <= this.max.z;
  }
  intersects(t2) {
    return this.max.x >= t2.min.x && this.min.x <= t2.max.x && this.max.y >= t2.min.y && this.min.y <= t2.max.y && this.max.z >= t2.min.z && this.min.z <= t2.max.z;
  }
  size() {
    return this.max.subtract(this.min);
  }
  center() {
    return this.min.add(this.max).divide(2);
  }
  expand(t2) {
    this.min = this.min.min(t2), this.max = this.max.max(t2);
  }
  permute() {
    const l2 = this.min, U2 = this.max;
    this.min = new t(Math.min(l2.x, U2.x), Math.min(l2.y, U2.y), Math.min(l2.z, U2.z)), this.max = new t(Math.max(l2.x, U2.x), Math.max(l2.y, U2.y), Math.max(l2.z, U2.z));
  }
};
var Z = class extends d {
  constructor(U2 = void 0) {
    super(), this.selectedChanged = false, this.colorTransformChanged = false, this._selected = false, this._colorTransforms = [], this._colorTransformsMap = /* @__PURE__ */ new Map(), this._data = U2 || new a(), this._bounds = new i(new t(1 / 0, 1 / 0, 1 / 0), new t(-1 / 0, -1 / 0, -1 / 0)), this.recalculateBounds = () => {
      this._bounds = new i(new t(1 / 0, 1 / 0, 1 / 0), new t(-1 / 0, -1 / 0, -1 / 0));
      for (let l2 = 0; l2 < this._data.vertexCount; l2++) this._bounds.expand(new t(this._data.positions[3 * l2], this._data.positions[3 * l2 + 1], this._data.positions[3 * l2 + 2]));
    }, this.applyPosition = () => {
      this.data.translate(this.position), this.position = new t();
    }, this.applyRotation = () => {
      this.data.rotate(this.rotation), this.rotation = new l();
    }, this.applyScale = () => {
      this.data.scale(this.scale), this.scale = new t(1, 1, 1);
    }, this.recalculateBounds();
  }
  saveToFile(t2 = null, l2 = null) {
    if (!document) return;
    if (l2) {
      if ("splat" !== l2 && "ply" !== l2) throw new Error("Invalid format. Must be 'splat' or 'ply'");
    } else l2 = "splat";
    if (!t2) {
      const U3 = /* @__PURE__ */ new Date();
      t2 = `splat-${U3.getFullYear()}-${U3.getMonth() + 1}-${U3.getDate()}.${l2}`;
    }
    this.applyRotation(), this.applyScale(), this.applyPosition();
    const U2 = this.data.serialize();
    let F2;
    if ("ply" === l2) {
      const t3 = B.SplatToPLY(U2.buffer, this.data.vertexCount);
      F2 = new Blob([t3], { type: "application/octet-stream" });
    } else F2 = new Blob([U2.buffer], { type: "application/octet-stream" });
    const n2 = document.createElement("a");
    n2.download = t2, n2.href = URL.createObjectURL(F2), n2.click();
  }
  get data() {
    return this._data;
  }
  get selected() {
    return this._selected;
  }
  set selected(t2) {
    this._selected !== t2 && (this._selected = t2, this.selectedChanged = true, this.dispatchEvent(this._changeEvent));
  }
  get colorTransforms() {
    return this._colorTransforms;
  }
  get colorTransformsMap() {
    return this._colorTransformsMap;
  }
  get bounds() {
    let t2 = this._bounds.center();
    t2 = t2.add(this.position);
    let l2 = this._bounds.size();
    return l2 = l2.multiply(this.scale), new i(t2.subtract(l2.divide(2)), t2.add(l2.divide(2)));
  }
};
var s = class extends d {
  constructor(t2) {
    super(), this._data = t2;
  }
  get data() {
    return this._data;
  }
};
var R = class {
  constructor() {
    this._fx = 1132, this._fy = 1132, this._near = 0.1, this._far = 100, this._width = 512, this._height = 512, this._projectionMatrix = new F(), this._viewMatrix = new F(), this._viewProj = new F(), this._updateProjectionMatrix = () => {
      this._projectionMatrix = new F(2 * this.fx / this.width, 0, 0, 0, 0, -2 * this.fy / this.height, 0, 0, 0, 0, this.far / (this.far - this.near), 1, 0, 0, -this.far * this.near / (this.far - this.near), 0), this._viewProj = this.projectionMatrix.multiply(this.viewMatrix);
    }, this.update = (t2, l2) => {
      const U2 = A.RotationFromQuaternion(l2).buffer, n2 = t2.flat();
      this._viewMatrix = new F(U2[0], U2[1], U2[2], 0, U2[3], U2[4], U2[5], 0, U2[6], U2[7], U2[8], 0, -n2[0] * U2[0] - n2[1] * U2[3] - n2[2] * U2[6], -n2[0] * U2[1] - n2[1] * U2[4] - n2[2] * U2[7], -n2[0] * U2[2] - n2[1] * U2[5] - n2[2] * U2[8], 1), this._viewProj = this.projectionMatrix.multiply(this.viewMatrix);
    }, this.setSize = (t2, l2) => {
      this._width = t2, this._height = l2, this._updateProjectionMatrix();
    };
  }
  get fx() {
    return this._fx;
  }
  set fx(t2) {
    this._fx !== t2 && (this._fx = t2, this._updateProjectionMatrix());
  }
  get fy() {
    return this._fy;
  }
  set fy(t2) {
    this._fy !== t2 && (this._fy = t2, this._updateProjectionMatrix());
  }
  get near() {
    return this._near;
  }
  set near(t2) {
    this._near !== t2 && (this._near = t2, this._updateProjectionMatrix());
  }
  get far() {
    return this._far;
  }
  set far(t2) {
    this._far !== t2 && (this._far = t2, this._updateProjectionMatrix());
  }
  get width() {
    return this._width;
  }
  get height() {
    return this._height;
  }
  get projectionMatrix() {
    return this._projectionMatrix;
  }
  get viewMatrix() {
    return this._viewMatrix;
  }
  get viewProj() {
    return this._viewProj;
  }
};
var c = class _c {
  constructor(t2 = 0, l2 = 0, U2 = 0, F2 = 0) {
    this.x = t2, this.y = l2, this.z = U2, this.w = F2;
  }
  equals(t2) {
    return this.x === t2.x && (this.y === t2.y && (this.z === t2.z && this.w === t2.w));
  }
  add(t2) {
    return "number" == typeof t2 ? new _c(this.x + t2, this.y + t2, this.z + t2, this.w + t2) : new _c(this.x + t2.x, this.y + t2.y, this.z + t2.z, this.w + t2.w);
  }
  subtract(t2) {
    return "number" == typeof t2 ? new _c(this.x - t2, this.y - t2, this.z - t2, this.w - t2) : new _c(this.x - t2.x, this.y - t2.y, this.z - t2.z, this.w - t2.w);
  }
  multiply(t2) {
    return "number" == typeof t2 ? new _c(this.x * t2, this.y * t2, this.z * t2, this.w * t2) : t2 instanceof _c ? new _c(this.x * t2.x, this.y * t2.y, this.z * t2.z, this.w * t2.w) : new _c(this.x * t2.buffer[0] + this.y * t2.buffer[4] + this.z * t2.buffer[8] + this.w * t2.buffer[12], this.x * t2.buffer[1] + this.y * t2.buffer[5] + this.z * t2.buffer[9] + this.w * t2.buffer[13], this.x * t2.buffer[2] + this.y * t2.buffer[6] + this.z * t2.buffer[10] + this.w * t2.buffer[14], this.x * t2.buffer[3] + this.y * t2.buffer[7] + this.z * t2.buffer[11] + this.w * t2.buffer[15]);
  }
  dot(t2) {
    return this.x * t2.x + this.y * t2.y + this.z * t2.z + this.w * t2.w;
  }
  lerp(t2, l2) {
    return new _c(this.x + (t2.x - this.x) * l2, this.y + (t2.y - this.y) * l2, this.z + (t2.z - this.z) * l2, this.w + (t2.w - this.w) * l2);
  }
  magnitude() {
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
  }
  distanceTo(t2) {
    return Math.sqrt((this.x - t2.x) ** 2 + (this.y - t2.y) ** 2 + (this.z - t2.z) ** 2 + (this.w - t2.w) ** 2);
  }
  normalize() {
    const t2 = this.magnitude();
    return new _c(this.x / t2, this.y / t2, this.z / t2, this.w / t2);
  }
  flat() {
    return [this.x, this.y, this.z, this.w];
  }
  clone() {
    return new _c(this.x, this.y, this.z, this.w);
  }
  toString() {
    return `[${this.flat().join(", ")}]`;
  }
};
var o = class extends d {
  constructor(l2 = void 0) {
    super(), this._data = l2 || new R(), this._position = new t(0, 0, -5), this.update = () => {
      this.data.update(this.position, this.rotation);
    }, this.screenPointToRay = (l3, U2) => {
      const F2 = new c(l3, U2, -1, 1), n2 = this._data.projectionMatrix.invert(), e2 = F2.multiply(n2), Q2 = this._data.viewMatrix.invert(), d2 = e2.multiply(Q2);
      return new t(d2.x / d2.w, d2.y / d2.w, d2.z / d2.w).subtract(this.position).normalize();
    };
  }
  get data() {
    return this._data;
  }
};
var W = class extends U {
  constructor() {
    super(), this._objects = [], this.addObject = (t2) => {
      this.objects.push(t2), this.dispatchEvent(new n(t2));
    }, this.removeObject = (t2) => {
      const l2 = this.objects.indexOf(t2);
      if (l2 < 0) throw new Error("Object not found in scene");
      this.objects.splice(l2, 1), this.dispatchEvent(new e(t2));
    }, this.findObject = (t2) => {
      for (const l2 of this.objects) if (t2(l2)) return l2;
    }, this.findObjectOfType = (t2) => {
      for (const l2 of this.objects) if (l2 instanceof t2) return l2;
    }, this.reset = () => {
      const t2 = this.objects.slice();
      for (const l2 of t2) this.removeObject(l2);
    }, this.reset();
  }
  saveToFile(t2 = null, l2 = null) {
    if (!document) return;
    if (l2) {
      if ("splat" !== l2 && "ply" !== l2) throw new Error("Invalid format. Must be 'splat' or 'ply'");
    } else l2 = "splat";
    if (!t2) {
      const U3 = /* @__PURE__ */ new Date();
      t2 = `scene-${U3.getFullYear()}-${U3.getMonth() + 1}-${U3.getDate()}.${l2}`;
    }
    const U2 = [];
    let F2 = 0;
    for (const t3 of this.objects) if (t3.applyRotation(), t3.applyScale(), t3.applyPosition(), t3 instanceof Z) {
      const l3 = t3.data.serialize();
      U2.push(l3), F2 += t3.data.vertexCount;
    }
    const n2 = new Uint8Array(F2 * a.RowLength);
    let e2, Q2 = 0;
    for (const t3 of U2) n2.set(t3, Q2), Q2 += t3.length;
    if ("ply" === l2) {
      const t3 = B.SplatToPLY(n2.buffer, F2);
      e2 = new Blob([t3], { type: "application/octet-stream" });
    } else e2 = new Blob([n2.buffer], { type: "application/octet-stream" });
    const d2 = document.createElement("a");
    d2.download = t2, d2.href = URL.createObjectURL(e2), d2.click();
  }
  get objects() {
    return this._objects;
  }
};
async function r(t2, l2) {
  const U2 = await fetch(t2, { mode: "cors", credentials: "omit", cache: l2 ? "force-cache" : "default" });
  if (200 != U2.status) throw new Error(U2.status + " Unable to load " + U2.url);
  return U2;
}
async function h(t2, l2) {
  return t2.headers.has("content-length") ? async function(t3, l3) {
    const U2 = t3.body.getReader(), F2 = parseInt(t3.headers.get("content-length")), n2 = new Uint8Array(F2);
    let e2 = 0;
    for (; ; ) {
      const { done: t4, value: Q2 } = await U2.read();
      if (t4) break;
      n2.set(Q2, e2), e2 += Q2.length, null == l3 || l3(e2 / F2);
    }
    return n2;
  }(t2, l2) : async function(t3, l3) {
    const U2 = t3.body.getReader(), F2 = [];
    let n2 = 0;
    for (; ; ) {
      const { done: t4, value: l4 } = await U2.read();
      if (t4) break;
      F2.push(l4), n2 += l4.length;
    }
    const e2 = new Uint8Array(n2);
    let Q2 = 0;
    for (const t4 of F2) e2.set(t4, Q2), Q2 += t4.length, null == l3 || l3(Q2 / n2);
    return e2;
  }(t2, l2);
}
var m = class {
  static async LoadAsync(t2, l2, U2, F2 = false) {
    const n2 = await r(t2, F2), e2 = await h(n2, U2);
    return this.LoadFromArrayBuffer(e2, l2);
  }
  static async LoadFromFileAsync(t2, l2, U2) {
    const F2 = new FileReader();
    let n2 = new Z();
    return F2.onload = (t3) => {
      n2 = this.LoadFromArrayBuffer(t3.target.result, l2);
    }, F2.onprogress = (t3) => {
      null == U2 || U2(t3.loaded / t3.total);
    }, F2.readAsArrayBuffer(t2), await new Promise((t3) => {
      F2.onloadend = () => {
        t3();
      };
    }), n2;
  }
  static LoadFromArrayBuffer(t2, l2) {
    const U2 = new Uint8Array(t2), F2 = a.Deserialize(U2), n2 = new Z(F2);
    return l2.addObject(n2), n2;
  }
};
var I = class {
  static async LoadAsync(t2, l2, U2, F2 = "", n2 = false) {
    const e2 = await r(t2, n2), Q2 = await h(e2, U2);
    if (112 !== Q2[0] || 108 !== Q2[1] || 121 !== Q2[2] || 10 !== Q2[3]) throw new Error("Invalid PLY file");
    return this.LoadFromArrayBuffer(Q2.buffer, l2, F2);
  }
  static async LoadFromFileAsync(t2, l2, U2, F2 = "") {
    const n2 = new FileReader();
    let e2 = new Z();
    return n2.onload = (t3) => {
      e2 = this.LoadFromArrayBuffer(t3.target.result, l2, F2);
    }, n2.onprogress = (t3) => {
      null == U2 || U2(t3.loaded / t3.total);
    }, n2.readAsArrayBuffer(t2), await new Promise((t3) => {
      n2.onloadend = () => {
        t3();
      };
    }), e2;
  }
  static LoadFromArrayBuffer(t2, l2, U2 = "") {
    const F2 = new Uint8Array(this._ParsePLYBuffer(t2, U2)), n2 = a.Deserialize(F2), e2 = new Z(n2);
    return l2.addObject(e2), e2;
  }
  static _ParsePLYBuffer(U2, F2) {
    const n2 = new Uint8Array(U2), e2 = new TextDecoder().decode(n2.slice(0, 10240)), Q2 = "end_header\n", d2 = e2.indexOf(Q2);
    if (d2 < 0) throw new Error("Unable to read .ply file header");
    const A2 = parseInt(/element vertex (\d+)\n/.exec(e2)[1]);
    let V2 = 0;
    const i2 = { double: 8, int: 4, uint: 4, float: 4, short: 2, ushort: 2, uchar: 1 }, Z2 = [];
    for (const t2 of e2.slice(0, d2).split("\n").filter((t3) => t3.startsWith("property "))) {
      const [l2, U3, F3] = t2.split(" ");
      if (Z2.push({ name: F3, type: U3, offset: V2 }), console.log(F3, U3, V2), !i2[U3]) throw new Error(`Unsupported property type: ${U3}`);
      V2 += i2[U3];
    }
    const s2 = new DataView(U2, d2 + 11), R2 = new ArrayBuffer(a.RowLength * A2), c2 = l.FromEuler(new t(Math.PI / 2, 0, 0));
    for (let t2 = 0; t2 < A2; t2++) {
      const U3 = new Float32Array(R2, t2 * a.RowLength, 3), n3 = new Float32Array(R2, t2 * a.RowLength + 12, 3), e3 = new Uint8ClampedArray(R2, t2 * a.RowLength + 24, 4), Q3 = new Uint8ClampedArray(R2, t2 * a.RowLength + 28, 4);
      let d3 = 255, A3 = 0, i3 = 0, o2 = 0;
      Z2.forEach((l2) => {
        let F3;
        switch (l2.type) {
          case "float":
            F3 = s2.getFloat32(l2.offset + t2 * V2, true);
            break;
          case "int":
            F3 = s2.getInt32(l2.offset + t2 * V2, true);
            break;
          default:
            throw new Error(`Unsupported property type: ${l2.type}`);
        }
        switch (l2.name) {
          case "x":
            U3[0] = F3;
            break;
          case "y":
            U3[1] = F3;
            break;
          case "z":
            U3[2] = F3;
            break;
          case "scale_0":
          case "scaling_0":
            n3[0] = Math.exp(F3);
            break;
          case "scale_1":
          case "scaling_1":
            n3[1] = Math.exp(F3);
            break;
          case "scale_2":
          case "scaling_2":
            n3[2] = Math.exp(F3);
            break;
          case "red":
            e3[0] = F3;
            break;
          case "green":
            e3[1] = F3;
            break;
          case "blue":
            e3[2] = F3;
            break;
          case "f_dc_0":
          case "features_0":
            e3[0] = 255 * (0.5 + B.SH_C0 * F3);
            break;
          case "f_dc_1":
          case "features_1":
            e3[1] = 255 * (0.5 + B.SH_C0 * F3);
            break;
          case "f_dc_2":
          case "features_2":
            e3[2] = 255 * (0.5 + B.SH_C0 * F3);
            break;
          case "f_dc_3":
            e3[3] = 255 * (0.5 + B.SH_C0 * F3);
            break;
          case "opacity":
          case "opacity_0":
            e3[3] = 1 / (1 + Math.exp(-F3)) * 255;
            break;
          case "rot_0":
          case "rotation_0":
            d3 = F3;
            break;
          case "rot_1":
          case "rotation_1":
            A3 = F3;
            break;
          case "rot_2":
          case "rotation_2":
            i3 = F3;
            break;
          case "rot_3":
          case "rotation_3":
            o2 = F3;
        }
      });
      let W2 = new l(A3, i3, o2, d3);
      switch (F2) {
        case "polycam": {
          const t3 = U3[1];
          U3[1] = -U3[2], U3[2] = t3, W2 = c2.multiply(W2);
          break;
        }
        case "":
          break;
        default:
          throw new Error(`Unsupported format: ${F2}`);
      }
      W2 = W2.normalize(), Q3[0] = 128 * W2.w + 128, Q3[1] = 128 * W2.x + 128, Q3[2] = 128 * W2.y + 128, Q3[3] = 128 * W2.z + 128;
    }
    return R2;
  }
};
var J = class {
  static async LoadAsync(t2, l2, U2, F2, n2 = false) {
    const e2 = await r(t2, n2), Q2 = await h(e2, F2);
    return this._ParseSplatvBuffer(Q2.buffer, l2, U2);
  }
  static async LoadFromFileAsync(t2, l2, U2, F2) {
    const n2 = new FileReader();
    let e2 = null;
    if (n2.onload = (t3) => {
      e2 = this._ParseSplatvBuffer(t3.target.result, l2, U2);
    }, n2.onprogress = (t3) => {
      null == F2 || F2(t3.loaded / t3.total);
    }, n2.readAsArrayBuffer(t2), await new Promise((t3) => {
      n2.onloadend = () => {
        t3();
      };
    }), !e2) throw new Error("Failed to load splatv file");
    return e2;
  }
  static _ParseSplatvBuffer(U2, F2, n2) {
    let e2 = null;
    const Q2 = (U3, Q3, d3) => {
      if ("magic" === U3.type) {
        const t2 = new Int32Array(Q3.buffer);
        if (26443 !== t2[0]) throw new Error("Invalid splatv file");
        d3.push({ size: t2[1], type: "chunks" });
      } else if ("chunks" === U3.type) {
        const U4 = JSON.parse(new TextDecoder("utf-8").decode(Q3));
        if (0 == U4.length) throw new Error("Invalid splatv file");
        U4.length > 1 && console.warn("Splatv file contains more than one chunk, only the first one will be loaded");
        const F3 = U4[0], e3 = F3.cameras;
        if (n2 && e3 && e3.length) {
          const U5 = e3[0], F4 = new t(U5.position[0], U5.position[1], U5.position[2]), Q4 = l.FromMatrix3(new A(U5.rotation[0][0], U5.rotation[0][1], U5.rotation[0][2], U5.rotation[1][0], U5.rotation[1][1], U5.rotation[1][2], U5.rotation[2][0], U5.rotation[2][1], U5.rotation[2][2]));
          n2.position = F4, n2.rotation = Q4;
        }
        d3.push(F3);
      } else if ("splat" === U3.type) {
        const t2 = V.Deserialize(Q3, U3.texwidth, U3.texheight), l2 = new s(t2);
        F2.addObject(l2), e2 = l2;
      }
    }, d2 = new Uint8Array(U2), a2 = [{ size: 8, type: "magic", texwidth: 0, texheight: 0 }];
    let B2 = a2.shift(), i2 = new Uint8Array(B2.size), Z2 = 0, R2 = 0;
    for (; B2; ) {
      for (; Z2 < B2.size; ) {
        const t2 = Math.min(B2.size - Z2, d2.length - R2);
        i2.set(d2.subarray(R2, R2 + t2), Z2), Z2 += t2, R2 += t2;
      }
      if (Q2(B2, i2, a2), e2) return e2;
      B2 = a2.shift(), B2 && (i2 = new Uint8Array(B2.size), Z2 = 0);
    }
    throw new Error("Invalid splatv file");
  }
};
function b(t2, l2, U2) {
  var F2 = void 0 === l2 ? null : l2, n2 = function(t3, l3) {
    var U3 = atob(t3);
    if (l3) {
      for (var F3 = new Uint8Array(U3.length), n3 = 0, e3 = U3.length; n3 < e3; ++n3) F3[n3] = U3.charCodeAt(n3);
      return String.fromCharCode.apply(null, new Uint16Array(F3.buffer));
    }
    return U3;
  }(t2, void 0 !== U2 && U2), e2 = n2.indexOf("\n", 10) + 1, Q2 = n2.substring(e2) + (F2 ? "//# sourceMappingURL=" + F2 : ""), d2 = new Blob([Q2], { type: "application/javascript" });
  return URL.createObjectURL(d2);
}
function C(t2, l2, U2) {
  var F2;
  return function(n2) {
    return F2 = F2 || b(t2, l2, U2), new Worker(F2, n2);
  };
}
var g = C("", null, false);
var N = class {
  constructor(t2, l2) {
    this._scene = null, this._camera = null, this._started = false, this._initialized = false, this._renderer = t2;
    const U2 = t2.gl;
    this._program = U2.createProgram(), this._passes = l2 || [];
    const F2 = U2.createShader(U2.VERTEX_SHADER);
    U2.shaderSource(F2, this._getVertexSource()), U2.compileShader(F2), U2.getShaderParameter(F2, U2.COMPILE_STATUS) || console.error(U2.getShaderInfoLog(F2));
    const n2 = U2.createShader(U2.FRAGMENT_SHADER);
    U2.shaderSource(n2, this._getFragmentSource()), U2.compileShader(n2), U2.getShaderParameter(n2, U2.COMPILE_STATUS) || console.error(U2.getShaderInfoLog(n2)), U2.attachShader(this.program, F2), U2.attachShader(this.program, n2), U2.linkProgram(this.program), U2.getProgramParameter(this.program, U2.LINK_STATUS) || console.error(U2.getProgramInfoLog(this.program)), this.resize = () => {
      U2.useProgram(this._program), this._resize();
    }, this.initialize = () => {
      console.assert(!this._initialized, "ShaderProgram already initialized"), U2.useProgram(this._program), this._initialize();
      for (const t3 of this.passes) t3.initialize(this);
      this._initialized = true, this._started = true;
    }, this.render = (t3, l3) => {
      U2.useProgram(this._program), this._scene === t3 && this._camera === l3 || (this.dispose(), this._scene = t3, this._camera = l3, this.initialize());
      for (const t4 of this.passes) t4.render();
      this._render();
    }, this.dispose = () => {
      if (this._initialized) {
        U2.useProgram(this._program);
        for (const t3 of this.passes) t3.dispose();
        this._dispose(), this._scene = null, this._camera = null, this._initialized = false;
      }
    };
  }
  get renderer() {
    return this._renderer;
  }
  get scene() {
    return this._scene;
  }
  get camera() {
    return this._camera;
  }
  get program() {
    return this._program;
  }
  get passes() {
    return this._passes;
  }
  get started() {
    return this._started;
  }
};
var G = C("", null, false);
var p = function(t2 = {}) {
  var l2, U2, F2 = t2;
  F2.ready = new Promise((t3, F3) => {
    l2 = t3, U2 = F3;
  });
  var n2, e2 = Object.assign({}, F2), Q2 = "";
  Q2 = 0 !== (Q2 = self.location.href).indexOf("blob:") ? Q2.substr(0, Q2.replace(/[?#].*/, "").lastIndexOf("/") + 1) : "", n2 = (t3) => {
    var l3 = new XMLHttpRequest();
    return l3.open("GET", t3, false), l3.responseType = "arraybuffer", l3.send(null), new Uint8Array(l3.response);
  }, F2.print || console.log.bind(console);
  var d2, A2, a2 = F2.printErr || console.error.bind(console);
  Object.assign(F2, e2), e2 = null, F2.arguments && F2.arguments, F2.thisProgram && F2.thisProgram, F2.quit && F2.quit, F2.wasmBinary && (d2 = F2.wasmBinary), "object" != typeof WebAssembly && C2("no native wasm support detected");
  var V2, B2, i2, Z2, s2, R2, c2, o2, W2 = false;
  function r2() {
    var t3 = A2.buffer;
    F2.HEAP8 = V2 = new Int8Array(t3), F2.HEAP16 = i2 = new Int16Array(t3), F2.HEAPU8 = B2 = new Uint8Array(t3), F2.HEAPU16 = Z2 = new Uint16Array(t3), F2.HEAP32 = s2 = new Int32Array(t3), F2.HEAPU32 = R2 = new Uint32Array(t3), F2.HEAPF32 = c2 = new Float32Array(t3), F2.HEAPF64 = o2 = new Float64Array(t3);
  }
  var h2 = [], m2 = [], I2 = [], J2 = 0, b2 = null;
  function C2(t3) {
    F2.onAbort && F2.onAbort(t3), a2(t3 = "Aborted(" + t3 + ")"), W2 = true, t3 += ". Build with -sASSERTIONS for more info.";
    var l3 = new WebAssembly.RuntimeError(t3);
    throw U2(l3), l3;
  }
  var g2, N2, G2 = "data:application/octet-stream;base64,", p2 = (t3) => t3.startsWith(G2);
  function X2(t3) {
    if (t3 == g2 && d2) return new Uint8Array(d2);
    var l3 = function(t4) {
      if (p2(t4)) return function(t5) {
        for (var l4 = atob(t5), U3 = new Uint8Array(l4.length), F3 = 0; F3 < l4.length; ++F3) U3[F3] = l4.charCodeAt(F3);
        return U3;
      }(t4.slice(G2.length));
    }(t3);
    if (l3) return l3;
    if (n2) return n2(t3);
    throw "both async and sync fetching of the wasm failed";
  }
  function E2(t3, l3, U3) {
    return function(t4) {
      return Promise.resolve().then(() => X2(t4));
    }(t3).then((t4) => WebAssembly.instantiate(t4, l3)).then((t4) => t4).then(U3, (t4) => {
      a2(`failed to asynchronously prepare wasm: ${t4}`), C2(t4);
    });
  }
  p2(g2 = "data:application/octet-stream;base64,") || (N2 = g2, g2 = F2.locateFile ? F2.locateFile(N2, Q2) : Q2 + N2);
  var y2 = (t3) => {
    for (; t3.length > 0; ) t3.shift()(F2);
  };
  F2.noExitRuntime;
  var S2, Y2, u2 = (t3) => {
    for (var l3 = "", U3 = t3; B2[U3]; ) l3 += S2[B2[U3++]];
    return l3;
  }, k2 = {}, T2 = {}, H2 = (t3) => {
    throw new Y2(t3);
  };
  function x2(t3, l3, U3 = {}) {
    if (!("argPackAdvance" in l3)) throw new TypeError("registerType registeredInstance requires argPackAdvance");
    return function(t4, l4, U4 = {}) {
      var F3 = l4.name;
      if (t4 || H2(`type "${F3}" must have a positive integer typeid pointer`), T2.hasOwnProperty(t4)) {
        if (U4.ignoreDuplicateRegistrations) return;
        H2(`Cannot register type '${F3}' twice`);
      }
      if (T2[t4] = l4, k2.hasOwnProperty(t4)) {
        var n3 = k2[t4];
        delete k2[t4], n3.forEach((t5) => t5());
      }
    }(t3, l3, U3);
  }
  function f2() {
    this.allocated = [void 0], this.freelist = [];
  }
  var w2 = new f2(), D2 = () => {
    for (var t3 = 0, l3 = w2.reserved; l3 < w2.allocated.length; ++l3) void 0 !== w2.allocated[l3] && ++t3;
    return t3;
  }, v = (t3) => (t3 || H2("Cannot use deleted val. handle = " + t3), w2.get(t3).value), z = (t3) => {
    switch (t3) {
      case void 0:
        return 1;
      case null:
        return 2;
      case true:
        return 3;
      case false:
        return 4;
      default:
        return w2.allocate({ refcount: 1, value: t3 });
    }
  };
  function M(t3) {
    return this.fromWireType(s2[t3 >> 2]);
  }
  var K = (t3, l3) => {
    switch (l3) {
      case 4:
        return function(t4) {
          return this.fromWireType(c2[t4 >> 2]);
        };
      case 8:
        return function(t4) {
          return this.fromWireType(o2[t4 >> 3]);
        };
      default:
        throw new TypeError(`invalid float width (${l3}): ${t3}`);
    }
  }, j = (t3, l3, U3) => {
    switch (l3) {
      case 1:
        return U3 ? (t4) => V2[t4 >> 0] : (t4) => B2[t4 >> 0];
      case 2:
        return U3 ? (t4) => i2[t4 >> 1] : (t4) => Z2[t4 >> 1];
      case 4:
        return U3 ? (t4) => s2[t4 >> 2] : (t4) => R2[t4 >> 2];
      default:
        throw new TypeError(`invalid integer width (${l3}): ${t3}`);
    }
  };
  function O(t3) {
    return this.fromWireType(R2[t3 >> 2]);
  }
  var L = "undefined" != typeof TextDecoder ? new TextDecoder("utf8") : void 0, P = (t3, l3) => t3 ? ((t4, l4, U3) => {
    for (var F3 = l4 + U3, n3 = l4; t4[n3] && !(n3 >= F3); ) ++n3;
    if (n3 - l4 > 16 && t4.buffer && L) return L.decode(t4.subarray(l4, n3));
    for (var e3 = ""; l4 < n3; ) {
      var Q3 = t4[l4++];
      if (128 & Q3) {
        var d3 = 63 & t4[l4++];
        if (192 != (224 & Q3)) {
          var A3 = 63 & t4[l4++];
          if ((Q3 = 224 == (240 & Q3) ? (15 & Q3) << 12 | d3 << 6 | A3 : (7 & Q3) << 18 | d3 << 12 | A3 << 6 | 63 & t4[l4++]) < 65536) e3 += String.fromCharCode(Q3);
          else {
            var a3 = Q3 - 65536;
            e3 += String.fromCharCode(55296 | a3 >> 10, 56320 | 1023 & a3);
          }
        } else e3 += String.fromCharCode((31 & Q3) << 6 | d3);
      } else e3 += String.fromCharCode(Q3);
    }
    return e3;
  })(B2, t3, l3) : "", _ = "undefined" != typeof TextDecoder ? new TextDecoder("utf-16le") : void 0, q = (t3, l3) => {
    for (var U3 = t3, F3 = U3 >> 1, n3 = F3 + l3 / 2; !(F3 >= n3) && Z2[F3]; ) ++F3;
    if ((U3 = F3 << 1) - t3 > 32 && _) return _.decode(B2.subarray(t3, U3));
    for (var e3 = "", Q3 = 0; !(Q3 >= l3 / 2); ++Q3) {
      var d3 = i2[t3 + 2 * Q3 >> 1];
      if (0 == d3) break;
      e3 += String.fromCharCode(d3);
    }
    return e3;
  }, $ = (t3, l3, U3) => {
    if (void 0 === U3 && (U3 = 2147483647), U3 < 2) return 0;
    for (var F3 = l3, n3 = (U3 -= 2) < 2 * t3.length ? U3 / 2 : t3.length, e3 = 0; e3 < n3; ++e3) {
      var Q3 = t3.charCodeAt(e3);
      i2[l3 >> 1] = Q3, l3 += 2;
    }
    return i2[l3 >> 1] = 0, l3 - F3;
  }, tt = (t3) => 2 * t3.length, lt = (t3, l3) => {
    for (var U3 = 0, F3 = ""; !(U3 >= l3 / 4); ) {
      var n3 = s2[t3 + 4 * U3 >> 2];
      if (0 == n3) break;
      if (++U3, n3 >= 65536) {
        var e3 = n3 - 65536;
        F3 += String.fromCharCode(55296 | e3 >> 10, 56320 | 1023 & e3);
      } else F3 += String.fromCharCode(n3);
    }
    return F3;
  }, Ut = (t3, l3, U3) => {
    if (void 0 === U3 && (U3 = 2147483647), U3 < 4) return 0;
    for (var F3 = l3, n3 = F3 + U3 - 4, e3 = 0; e3 < t3.length; ++e3) {
      var Q3 = t3.charCodeAt(e3);
      if (Q3 >= 55296 && Q3 <= 57343 && (Q3 = 65536 + ((1023 & Q3) << 10) | 1023 & t3.charCodeAt(++e3)), s2[l3 >> 2] = Q3, (l3 += 4) + 4 > n3) break;
    }
    return s2[l3 >> 2] = 0, l3 - F3;
  }, Ft = (t3) => {
    for (var l3 = 0, U3 = 0; U3 < t3.length; ++U3) {
      var F3 = t3.charCodeAt(U3);
      F3 >= 55296 && F3 <= 57343 && ++U3, l3 += 4;
    }
    return l3;
  }, nt = (t3) => {
    var l3 = (t3 - A2.buffer.byteLength + 65535) / 65536;
    try {
      return A2.grow(l3), r2(), 1;
    } catch (t4) {
    }
  };
  (() => {
    for (var t3 = new Array(256), l3 = 0; l3 < 256; ++l3) t3[l3] = String.fromCharCode(l3);
    S2 = t3;
  })(), Y2 = F2.BindingError = class extends Error {
    constructor(t3) {
      super(t3), this.name = "BindingError";
    }
  }, F2.InternalError = class extends Error {
    constructor(t3) {
      super(t3), this.name = "InternalError";
    }
  }, Object.assign(f2.prototype, { get(t3) {
    return this.allocated[t3];
  }, has(t3) {
    return void 0 !== this.allocated[t3];
  }, allocate(t3) {
    var l3 = this.freelist.pop() || this.allocated.length;
    return this.allocated[l3] = t3, l3;
  }, free(t3) {
    this.allocated[t3] = void 0, this.freelist.push(t3);
  } }), w2.allocated.push({ value: void 0 }, { value: null }, { value: true }, { value: false }), w2.reserved = w2.allocated.length, F2.count_emval_handles = D2;
  var et = { f: (t3, l3, U3, F3, n3) => {
  }, i: (t3, l3, U3, F3) => {
    x2(t3, { name: l3 = u2(l3), fromWireType: function(t4) {
      return !!t4;
    }, toWireType: function(t4, l4) {
      return l4 ? U3 : F3;
    }, argPackAdvance: 8, readValueFromPointer: function(t4) {
      return this.fromWireType(B2[t4]);
    }, destructorFunction: null });
  }, h: (t3, l3) => {
    x2(t3, { name: l3 = u2(l3), fromWireType: (t4) => {
      var l4 = v(t4);
      return ((t5) => {
        t5 >= w2.reserved && 0 == --w2.get(t5).refcount && w2.free(t5);
      })(t4), l4;
    }, toWireType: (t4, l4) => z(l4), argPackAdvance: 8, readValueFromPointer: M, destructorFunction: null });
  }, e: (t3, l3, U3) => {
    x2(t3, { name: l3 = u2(l3), fromWireType: (t4) => t4, toWireType: (t4, l4) => l4, argPackAdvance: 8, readValueFromPointer: K(l3, U3), destructorFunction: null });
  }, b: (t3, l3, U3, F3, n3) => {
    l3 = u2(l3);
    var e3 = (t4) => t4;
    if (0 === F3) {
      var Q3 = 32 - 8 * U3;
      e3 = (t4) => t4 << Q3 >>> Q3;
    }
    var d3 = l3.includes("unsigned");
    x2(t3, { name: l3, fromWireType: e3, toWireType: d3 ? function(t4, l4) {
      return this.name, l4 >>> 0;
    } : function(t4, l4) {
      return this.name, l4;
    }, argPackAdvance: 8, readValueFromPointer: j(l3, U3, 0 !== F3), destructorFunction: null });
  }, a: (t3, l3, U3) => {
    var F3 = [Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array][l3];
    function n3(t4) {
      var l4 = R2[t4 >> 2], U4 = R2[t4 + 4 >> 2];
      return new F3(V2.buffer, U4, l4);
    }
    x2(t3, { name: U3 = u2(U3), fromWireType: n3, argPackAdvance: 8, readValueFromPointer: n3 }, { ignoreDuplicateRegistrations: true });
  }, d: (t3, l3) => {
    var U3 = "std::string" === (l3 = u2(l3));
    x2(t3, { name: l3, fromWireType(t4) {
      var l4, F3 = R2[t4 >> 2], n3 = t4 + 4;
      if (U3) for (var e3 = n3, Q3 = 0; Q3 <= F3; ++Q3) {
        var d3 = n3 + Q3;
        if (Q3 == F3 || 0 == B2[d3]) {
          var A3 = P(e3, d3 - e3);
          void 0 === l4 ? l4 = A3 : (l4 += String.fromCharCode(0), l4 += A3), e3 = d3 + 1;
        }
      }
      else {
        var a3 = new Array(F3);
        for (Q3 = 0; Q3 < F3; ++Q3) a3[Q3] = String.fromCharCode(B2[n3 + Q3]);
        l4 = a3.join("");
      }
      return at(t4), l4;
    }, toWireType(t4, l4) {
      var F3;
      l4 instanceof ArrayBuffer && (l4 = new Uint8Array(l4));
      var n3 = "string" == typeof l4;
      n3 || l4 instanceof Uint8Array || l4 instanceof Uint8ClampedArray || l4 instanceof Int8Array || H2("Cannot pass non-string to std::string"), F3 = U3 && n3 ? ((t5) => {
        for (var l5 = 0, U4 = 0; U4 < t5.length; ++U4) {
          var F4 = t5.charCodeAt(U4);
          F4 <= 127 ? l5++ : F4 <= 2047 ? l5 += 2 : F4 >= 55296 && F4 <= 57343 ? (l5 += 4, ++U4) : l5 += 3;
        }
        return l5;
      })(l4) : l4.length;
      var e3 = At(4 + F3 + 1), Q3 = e3 + 4;
      if (R2[e3 >> 2] = F3, U3 && n3) ((t5, l5, U4, F4) => {
        if (!(F4 > 0)) return 0;
        for (var n4 = U4 + F4 - 1, e4 = 0; e4 < t5.length; ++e4) {
          var Q4 = t5.charCodeAt(e4);
          if (Q4 >= 55296 && Q4 <= 57343 && (Q4 = 65536 + ((1023 & Q4) << 10) | 1023 & t5.charCodeAt(++e4)), Q4 <= 127) {
            if (U4 >= n4) break;
            l5[U4++] = Q4;
          } else if (Q4 <= 2047) {
            if (U4 + 1 >= n4) break;
            l5[U4++] = 192 | Q4 >> 6, l5[U4++] = 128 | 63 & Q4;
          } else if (Q4 <= 65535) {
            if (U4 + 2 >= n4) break;
            l5[U4++] = 224 | Q4 >> 12, l5[U4++] = 128 | Q4 >> 6 & 63, l5[U4++] = 128 | 63 & Q4;
          } else {
            if (U4 + 3 >= n4) break;
            l5[U4++] = 240 | Q4 >> 18, l5[U4++] = 128 | Q4 >> 12 & 63, l5[U4++] = 128 | Q4 >> 6 & 63, l5[U4++] = 128 | 63 & Q4;
          }
        }
        l5[U4] = 0;
      })(l4, B2, Q3, F3 + 1);
      else if (n3) for (var d3 = 0; d3 < F3; ++d3) {
        var A3 = l4.charCodeAt(d3);
        A3 > 255 && (at(Q3), H2("String has UTF-16 code units that do not fit in 8 bits")), B2[Q3 + d3] = A3;
      }
      else for (d3 = 0; d3 < F3; ++d3) B2[Q3 + d3] = l4[d3];
      return null !== t4 && t4.push(at, e3), e3;
    }, argPackAdvance: 8, readValueFromPointer: O, destructorFunction(t4) {
      at(t4);
    } });
  }, c: (t3, l3, U3) => {
    var F3, n3, e3, Q3, d3;
    U3 = u2(U3), 2 === l3 ? (F3 = q, n3 = $, Q3 = tt, e3 = () => Z2, d3 = 1) : 4 === l3 && (F3 = lt, n3 = Ut, Q3 = Ft, e3 = () => R2, d3 = 2), x2(t3, { name: U3, fromWireType: (t4) => {
      for (var U4, n4 = R2[t4 >> 2], Q4 = e3(), A3 = t4 + 4, a3 = 0; a3 <= n4; ++a3) {
        var V3 = t4 + 4 + a3 * l3;
        if (a3 == n4 || 0 == Q4[V3 >> d3]) {
          var B3 = F3(A3, V3 - A3);
          void 0 === U4 ? U4 = B3 : (U4 += String.fromCharCode(0), U4 += B3), A3 = V3 + l3;
        }
      }
      return at(t4), U4;
    }, toWireType: (t4, F4) => {
      "string" != typeof F4 && H2(`Cannot pass non-string to C++ string type ${U3}`);
      var e4 = Q3(F4), A3 = At(4 + e4 + l3);
      return R2[A3 >> 2] = e4 >> d3, n3(F4, A3 + 4, e4 + l3), null !== t4 && t4.push(at, A3), A3;
    }, argPackAdvance: 8, readValueFromPointer: M, destructorFunction(t4) {
      at(t4);
    } });
  }, j: (t3, l3) => {
    x2(t3, { isVoid: true, name: l3 = u2(l3), argPackAdvance: 0, fromWireType: () => {
    }, toWireType: (t4, l4) => {
    } });
  }, g: (t3) => {
    var l3 = B2.length, U3 = 2147483648;
    if ((t3 >>>= 0) > U3) return false;
    for (var F3, n3, e3 = 1; e3 <= 4; e3 *= 2) {
      var Q3 = l3 * (1 + 0.2 / e3);
      Q3 = Math.min(Q3, t3 + 100663296);
      var d3 = Math.min(U3, (F3 = Math.max(t3, Q3)) + ((n3 = 65536) - F3 % n3) % n3);
      if (nt(d3)) return true;
    }
    return false;
  } }, Qt = function() {
    var t3, l3, n3, e3 = { a: et };
    function Q3(t4, l4) {
      var U3;
      return Qt = t4.exports, A2 = Qt.k, r2(), U3 = Qt.l, m2.unshift(U3), function(t5) {
        if (J2--, F2.monitorRunDependencies && F2.monitorRunDependencies(J2), 0 == J2 && b2) {
          var l5 = b2;
          b2 = null, l5();
        }
      }(), Qt;
    }
    if (J2++, F2.monitorRunDependencies && F2.monitorRunDependencies(J2), F2.instantiateWasm) try {
      return F2.instantiateWasm(e3, Q3);
    } catch (t4) {
      a2(`Module.instantiateWasm callback failed with error: ${t4}`), U2(t4);
    }
    return (t3 = g2, l3 = e3, n3 = function(t4) {
      Q3(t4.instance);
    }, E2(t3, l3, n3)).catch(U2), {};
  }();
  F2._pack = (t3, l3, U3, n3, e3, Q3, d3, A3, a3, V3, B3) => (F2._pack = Qt.m)(t3, l3, U3, n3, e3, Q3, d3, A3, a3, V3, B3), F2.__embind_initialize_bindings = () => (F2.__embind_initialize_bindings = Qt.n)();
  var dt, At = F2._malloc = (t3) => (At = F2._malloc = Qt.p)(t3), at = F2._free = (t3) => (at = F2._free = Qt.q)(t3);
  function Vt() {
    function t3() {
      dt || (dt = true, F2.calledRun = true, W2 || (y2(m2), l2(F2), F2.onRuntimeInitialized && F2.onRuntimeInitialized(), function() {
        if (F2.postRun) for ("function" == typeof F2.postRun && (F2.postRun = [F2.postRun]); F2.postRun.length; ) t4 = F2.postRun.shift(), I2.unshift(t4);
        var t4;
        y2(I2);
      }()));
    }
    J2 > 0 || (function() {
      if (F2.preRun) for ("function" == typeof F2.preRun && (F2.preRun = [F2.preRun]); F2.preRun.length; ) t4 = F2.preRun.shift(), h2.unshift(t4);
      var t4;
      y2(h2);
    }(), J2 > 0 || (F2.setStatus ? (F2.setStatus("Running..."), setTimeout(function() {
      setTimeout(function() {
        F2.setStatus("");
      }, 1), t3();
    }, 1)) : t3()));
  }
  if (b2 = function t3() {
    dt || Vt(), dt || (b2 = t3);
  }, F2.preInit) for ("function" == typeof F2.preInit && (F2.preInit = [F2.preInit]); F2.preInit.length > 0; ) F2.preInit.pop()();
  return Vt(), t2.ready;
};
var X = class {
  constructor(t2) {
    this.dataChanged = false, this.transformsChanged = false, this.colorTransformsChanged = false, this._updating = /* @__PURE__ */ new Set(), this._dirty = /* @__PURE__ */ new Set();
    let l2 = 0, U2 = 0;
    this._splatIndices = /* @__PURE__ */ new Map(), this._offsets = /* @__PURE__ */ new Map();
    const n2 = /* @__PURE__ */ new Map();
    for (const F2 of t2.objects) F2 instanceof Z && (this._splatIndices.set(F2, U2), this._offsets.set(F2, l2), n2.set(l2, F2), l2 += F2.data.vertexCount, U2++);
    this._vertexCount = l2, this._width = 2048, this._height = Math.ceil(2 * this.vertexCount / this.width), this._data = new Uint32Array(this.width * this.height * 4), this._transformsWidth = 5, this._transformsHeight = n2.size, this._transforms = new Float32Array(this._transformsWidth * this._transformsHeight * 4), this._transformIndicesWidth = 1024, this._transformIndicesHeight = Math.ceil(this.vertexCount / this._transformIndicesWidth), this._transformIndices = new Uint32Array(this._transformIndicesWidth * this._transformIndicesHeight), this._colorTransformsWidth = 4, this._colorTransformsHeight = 64, this._colorTransforms = new Float32Array(this._colorTransformsWidth * this._colorTransformsHeight * 4), this._colorTransforms.fill(0), this._colorTransforms[0] = 1, this._colorTransforms[5] = 1, this._colorTransforms[10] = 1, this._colorTransforms[15] = 1, this._colorTransformIndicesWidth = 1024, this._colorTransformIndicesHeight = Math.ceil(this.vertexCount / this._colorTransformIndicesWidth), this._colorTransformIndices = new Uint32Array(this._colorTransformIndicesWidth * this._colorTransformIndicesHeight), this.colorTransformIndices.fill(0), this._positions = new Float32Array(3 * this.vertexCount), this._rotations = new Float32Array(4 * this.vertexCount), this._scales = new Float32Array(3 * this.vertexCount), this._worker = new G();
    const e2 = (t3) => {
      const l3 = this._splatIndices.get(t3);
      this._transforms.set(t3.transform.buffer, 20 * l3), this._transforms[20 * l3 + 16] = t3.selected ? 1 : 0, t3.positionChanged = false, t3.rotationChanged = false, t3.scaleChanged = false, t3.selectedChanged = false, this.transformsChanged = true;
    }, Q2 = () => {
      let t3 = false;
      for (const l4 of this._splatIndices.keys()) if (l4.colorTransformChanged) {
        t3 = true;
        break;
      }
      if (!t3) return;
      const l3 = [new F()];
      this._colorTransformIndices.fill(0);
      let U3 = 1;
      for (const t4 of this._splatIndices.keys()) {
        const F2 = this._offsets.get(t4);
        for (const F3 of t4.colorTransforms) l3.includes(F3) || (l3.push(F3), U3++);
        for (const l4 of t4.colorTransformsMap.keys()) {
          const n3 = t4.colorTransformsMap.get(l4);
          this._colorTransformIndices[l4 + F2] = n3 + U3 - 1;
        }
        t4.colorTransformChanged = false;
      }
      for (let t4 = 0; t4 < l3.length; t4++) {
        const U4 = l3[t4];
        this._colorTransforms.set(U4.buffer, 16 * t4);
      }
      this.colorTransformsChanged = true;
    };
    let d2;
    this._worker.onmessage = (t3) => {
      if (t3.data.response) {
        const l3 = t3.data.response, U3 = n2.get(l3.offset);
        e2(U3), Q2();
        const F2 = this._splatIndices.get(U3);
        for (let t4 = 0; t4 < U3.data.vertexCount; t4++) this._transformIndices[l3.offset + t4] = F2;
        this._data.set(l3.data, 8 * l3.offset), U3.data.reattach(l3.positions, l3.rotations, l3.scales, l3.colors, l3.selection), this._positions.set(l3.worldPositions, 3 * l3.offset), this._rotations.set(l3.worldRotations, 4 * l3.offset), this._scales.set(l3.worldScales, 3 * l3.offset), this._updating.delete(U3), U3.selectedChanged = false, this.dataChanged = true;
      }
    }, async function() {
      d2 = await p();
    }();
    const A2 = (t3) => {
      if (!d2) return void async function() {
        for (; !d2; ) await new Promise((t4) => setTimeout(t4, 0));
      }().then(() => {
        A2(t3);
      });
      e2(t3);
      const l3 = d2._malloc(3 * t3.data.vertexCount * 4), U3 = d2._malloc(4 * t3.data.vertexCount * 4), F2 = d2._malloc(3 * t3.data.vertexCount * 4), n3 = d2._malloc(4 * t3.data.vertexCount), Q3 = d2._malloc(t3.data.vertexCount), a3 = d2._malloc(8 * t3.data.vertexCount * 4), V2 = d2._malloc(3 * t3.data.vertexCount * 4), B2 = d2._malloc(4 * t3.data.vertexCount * 4), i2 = d2._malloc(3 * t3.data.vertexCount * 4);
      d2.HEAPF32.set(t3.data.positions, l3 / 4), d2.HEAPF32.set(t3.data.rotations, U3 / 4), d2.HEAPF32.set(t3.data.scales, F2 / 4), d2.HEAPU8.set(t3.data.colors, n3), d2.HEAPU8.set(t3.data.selection, Q3), d2._pack(t3.selected, t3.data.vertexCount, l3, U3, F2, n3, Q3, a3, V2, B2, i2);
      const Z2 = new Uint32Array(d2.HEAPU32.buffer, a3, 8 * t3.data.vertexCount), s2 = new Float32Array(d2.HEAPF32.buffer, V2, 3 * t3.data.vertexCount), R2 = new Float32Array(d2.HEAPF32.buffer, B2, 4 * t3.data.vertexCount), c2 = new Float32Array(d2.HEAPF32.buffer, i2, 3 * t3.data.vertexCount), o2 = this._splatIndices.get(t3), W2 = this._offsets.get(t3);
      for (let l4 = 0; l4 < t3.data.vertexCount; l4++) this._transformIndices[W2 + l4] = o2;
      this._data.set(Z2, 8 * W2), this._positions.set(s2, 3 * W2), this._rotations.set(R2, 4 * W2), this._scales.set(c2, 3 * W2), d2._free(l3), d2._free(U3), d2._free(F2), d2._free(n3), d2._free(Q3), d2._free(a3), d2._free(V2), d2._free(B2), d2._free(i2), this.dataChanged = true, this.colorTransformsChanged = true;
    }, a2 = (t3) => {
      if ((t3.positionChanged || t3.rotationChanged || t3.scaleChanged || t3.selectedChanged) && e2(t3), t3.colorTransformChanged && Q2(), !t3.data.changed || t3.data.detached) return;
      const l3 = { position: new Float32Array(t3.position.flat()), rotation: new Float32Array(t3.rotation.flat()), scale: new Float32Array(t3.scale.flat()), selected: t3.selected, vertexCount: t3.data.vertexCount, positions: t3.data.positions, rotations: t3.data.rotations, scales: t3.data.scales, colors: t3.data.colors, selection: t3.data.selection, offset: this._offsets.get(t3) };
      this._worker.postMessage({ splat: l3 }, [l3.position.buffer, l3.rotation.buffer, l3.scale.buffer, l3.positions.buffer, l3.rotations.buffer, l3.scales.buffer, l3.colors.buffer, l3.selection.buffer]), this._updating.add(t3), t3.data.detached = true;
    };
    this.getSplat = (t3) => {
      let l3 = null;
      for (const [U3, F2] of this._offsets) {
        if (!(t3 >= F2)) break;
        l3 = U3;
      }
      return l3;
    }, this.getLocalIndex = (t3, l3) => l3 - this._offsets.get(t3), this.markDirty = (t3) => {
      this._dirty.add(t3);
    }, this.rebuild = () => {
      for (const t3 of this._dirty) a2(t3);
      this._dirty.clear();
    }, this.dispose = () => {
      this._worker.terminate();
    };
    for (const t3 of this._splatIndices.keys()) A2(t3);
    Q2();
  }
  get offsets() {
    return this._offsets;
  }
  get data() {
    return this._data;
  }
  get width() {
    return this._width;
  }
  get height() {
    return this._height;
  }
  get transforms() {
    return this._transforms;
  }
  get transformsWidth() {
    return this._transformsWidth;
  }
  get transformsHeight() {
    return this._transformsHeight;
  }
  get transformIndices() {
    return this._transformIndices;
  }
  get transformIndicesWidth() {
    return this._transformIndicesWidth;
  }
  get transformIndicesHeight() {
    return this._transformIndicesHeight;
  }
  get colorTransforms() {
    return this._colorTransforms;
  }
  get colorTransformsWidth() {
    return this._colorTransformsWidth;
  }
  get colorTransformsHeight() {
    return this._colorTransformsHeight;
  }
  get colorTransformIndices() {
    return this._colorTransformIndices;
  }
  get colorTransformIndicesWidth() {
    return this._colorTransformIndicesWidth;
  }
  get colorTransformIndicesHeight() {
    return this._colorTransformIndicesHeight;
  }
  get positions() {
    return this._positions;
  }
  get rotations() {
    return this._rotations;
  }
  get scales() {
    return this._scales;
  }
  get vertexCount() {
    return this._vertexCount;
  }
  get needsRebuild() {
    return this._dirty.size > 0;
  }
  get updating() {
    return this._updating.size > 0;
  }
};
var E = class {
  constructor(t2 = 0, l2 = 0, U2 = 0, F2 = 255) {
    this.r = t2, this.g = l2, this.b = U2, this.a = F2;
  }
  flat() {
    return [this.r, this.g, this.b, this.a];
  }
  flatNorm() {
    return [this.r / 255, this.g / 255, this.b / 255, this.a / 255];
  }
  toHexString() {
    return "#" + this.flat().map((t2) => t2.toString(16).padStart(2, "0")).join("");
  }
  toString() {
    return `[${this.flat().join(", ")}]`;
  }
};
var y = class extends N {
  constructor(t2, l2) {
    super(t2, l2), this._outlineThickness = 10, this._outlineColor = new E(255, 165, 0, 255), this._renderData = null, this._depthIndex = new Uint32Array(), this._splatTexture = null, this._worker = null;
    const U2 = t2.canvas, F2 = t2.gl;
    let n2, e2, Q2, d2, A2, a2, V2, B2, i2, s2, R2, c2, o2, W2, r2, h2, m2, I2, J2;
    this._resize = () => {
      this._camera && (this._camera.data.setSize(U2.width, U2.height), this._camera.update(), n2 = F2.getUniformLocation(this.program, "projection"), F2.uniformMatrix4fv(n2, false, this._camera.data.projectionMatrix.buffer), e2 = F2.getUniformLocation(this.program, "viewport"), F2.uniform2fv(e2, new Float32Array([U2.width, U2.height])));
    };
    const b2 = () => {
      this._worker = new g(), this._worker.onmessage = (t3) => {
        if (t3.data.depthIndex) {
          const { depthIndex: l3 } = t3.data;
          this._depthIndex = l3, F2.bindBuffer(F2.ARRAY_BUFFER, J2), F2.bufferData(F2.ARRAY_BUFFER, l3, F2.STATIC_DRAW);
        }
      };
    };
    this._initialize = () => {
      if (this._scene && this._camera) {
        this._resize(), this._scene.addEventListener("objectAdded", C2), this._scene.addEventListener("objectRemoved", N2);
        for (const t3 of this._scene.objects) t3 instanceof Z && t3.addEventListener("objectChanged", G2);
        this._renderData = new X(this._scene), Q2 = F2.getUniformLocation(this.program, "focal"), F2.uniform2fv(Q2, new Float32Array([this._camera.data.fx, this._camera.data.fy])), d2 = F2.getUniformLocation(this.program, "view"), F2.uniformMatrix4fv(d2, false, this._camera.data.viewMatrix.buffer), s2 = F2.getUniformLocation(this.program, "outlineThickness"), F2.uniform1f(s2, this.outlineThickness), R2 = F2.getUniformLocation(this.program, "outlineColor"), F2.uniform4fv(R2, new Float32Array(this.outlineColor.flatNorm())), this._splatTexture = F2.createTexture(), A2 = F2.getUniformLocation(this.program, "u_texture"), F2.uniform1i(A2, 0), W2 = F2.createTexture(), a2 = F2.getUniformLocation(this.program, "u_transforms"), F2.uniform1i(a2, 1), r2 = F2.createTexture(), V2 = F2.getUniformLocation(this.program, "u_transformIndices"), F2.uniform1i(V2, 2), h2 = F2.createTexture(), B2 = F2.getUniformLocation(this.program, "u_colorTransforms"), F2.uniform1i(B2, 3), m2 = F2.createTexture(), i2 = F2.getUniformLocation(this.program, "u_colorTransformIndices"), F2.uniform1i(i2, 4), I2 = F2.createBuffer(), F2.bindBuffer(F2.ARRAY_BUFFER, I2), F2.bufferData(F2.ARRAY_BUFFER, new Float32Array([-2, -2, 2, -2, 2, 2, -2, 2]), F2.STATIC_DRAW), c2 = F2.getAttribLocation(this.program, "position"), F2.enableVertexAttribArray(c2), F2.vertexAttribPointer(c2, 2, F2.FLOAT, false, 0, 0), J2 = F2.createBuffer(), o2 = F2.getAttribLocation(this.program, "index"), F2.enableVertexAttribArray(o2), F2.bindBuffer(F2.ARRAY_BUFFER, J2), b2();
      } else console.error("Cannot render without scene and camera");
    };
    const C2 = (t3) => {
      const l3 = t3;
      l3.object instanceof Z && l3.object.addEventListener("objectChanged", G2), this.dispose();
    }, N2 = (t3) => {
      const l3 = t3;
      l3.object instanceof Z && l3.object.removeEventListener("objectChanged", G2), this.dispose();
    }, G2 = (t3) => {
      const l3 = t3;
      l3.object instanceof Z && this._renderData && this._renderData.markDirty(l3.object);
    };
    this._render = () => {
      var t3, l3;
      if (this._scene && this._camera && this.renderData) {
        if (this.renderData.needsRebuild && this.renderData.rebuild(), this.renderData.dataChanged || this.renderData.transformsChanged || this.renderData.colorTransformsChanged) {
          this.renderData.dataChanged && (F2.activeTexture(F2.TEXTURE0), F2.bindTexture(F2.TEXTURE_2D, this.splatTexture), F2.texParameteri(F2.TEXTURE_2D, F2.TEXTURE_WRAP_S, F2.CLAMP_TO_EDGE), F2.texParameteri(F2.TEXTURE_2D, F2.TEXTURE_WRAP_T, F2.CLAMP_TO_EDGE), F2.texParameteri(F2.TEXTURE_2D, F2.TEXTURE_MIN_FILTER, F2.NEAREST), F2.texParameteri(F2.TEXTURE_2D, F2.TEXTURE_MAG_FILTER, F2.NEAREST), F2.texImage2D(F2.TEXTURE_2D, 0, F2.RGBA32UI, this.renderData.width, this.renderData.height, 0, F2.RGBA_INTEGER, F2.UNSIGNED_INT, this.renderData.data)), this.renderData.transformsChanged && (F2.activeTexture(F2.TEXTURE1), F2.bindTexture(F2.TEXTURE_2D, W2), F2.texParameteri(F2.TEXTURE_2D, F2.TEXTURE_WRAP_S, F2.CLAMP_TO_EDGE), F2.texParameteri(F2.TEXTURE_2D, F2.TEXTURE_WRAP_T, F2.CLAMP_TO_EDGE), F2.texParameteri(F2.TEXTURE_2D, F2.TEXTURE_MIN_FILTER, F2.NEAREST), F2.texParameteri(F2.TEXTURE_2D, F2.TEXTURE_MAG_FILTER, F2.NEAREST), F2.texImage2D(F2.TEXTURE_2D, 0, F2.RGBA32F, this.renderData.transformsWidth, this.renderData.transformsHeight, 0, F2.RGBA, F2.FLOAT, this.renderData.transforms), F2.activeTexture(F2.TEXTURE2), F2.bindTexture(F2.TEXTURE_2D, r2), F2.texParameteri(F2.TEXTURE_2D, F2.TEXTURE_WRAP_S, F2.CLAMP_TO_EDGE), F2.texParameteri(F2.TEXTURE_2D, F2.TEXTURE_WRAP_T, F2.CLAMP_TO_EDGE), F2.texParameteri(F2.TEXTURE_2D, F2.TEXTURE_MIN_FILTER, F2.NEAREST), F2.texParameteri(F2.TEXTURE_2D, F2.TEXTURE_MAG_FILTER, F2.NEAREST), F2.texImage2D(F2.TEXTURE_2D, 0, F2.R32UI, this.renderData.transformIndicesWidth, this.renderData.transformIndicesHeight, 0, F2.RED_INTEGER, F2.UNSIGNED_INT, this.renderData.transformIndices)), this.renderData.colorTransformsChanged && (F2.activeTexture(F2.TEXTURE3), F2.bindTexture(F2.TEXTURE_2D, h2), F2.texParameteri(F2.TEXTURE_2D, F2.TEXTURE_WRAP_S, F2.CLAMP_TO_EDGE), F2.texParameteri(F2.TEXTURE_2D, F2.TEXTURE_WRAP_T, F2.CLAMP_TO_EDGE), F2.texParameteri(F2.TEXTURE_2D, F2.TEXTURE_MIN_FILTER, F2.NEAREST), F2.texParameteri(F2.TEXTURE_2D, F2.TEXTURE_MAG_FILTER, F2.NEAREST), F2.texImage2D(F2.TEXTURE_2D, 0, F2.RGBA32F, this.renderData.colorTransformsWidth, this.renderData.colorTransformsHeight, 0, F2.RGBA, F2.FLOAT, this.renderData.colorTransforms), F2.activeTexture(F2.TEXTURE4), F2.bindTexture(F2.TEXTURE_2D, m2), F2.texParameteri(F2.TEXTURE_2D, F2.TEXTURE_WRAP_S, F2.CLAMP_TO_EDGE), F2.texParameteri(F2.TEXTURE_2D, F2.TEXTURE_WRAP_T, F2.CLAMP_TO_EDGE), F2.texParameteri(F2.TEXTURE_2D, F2.TEXTURE_MIN_FILTER, F2.NEAREST), F2.texParameteri(F2.TEXTURE_2D, F2.TEXTURE_MAG_FILTER, F2.NEAREST), F2.texImage2D(F2.TEXTURE_2D, 0, F2.R32UI, this.renderData.colorTransformIndicesWidth, this.renderData.colorTransformIndicesHeight, 0, F2.RED_INTEGER, F2.UNSIGNED_INT, this.renderData.colorTransformIndices));
          const l4 = new Float32Array(this.renderData.positions.slice().buffer), U3 = new Float32Array(this.renderData.transforms.slice().buffer), n3 = new Uint32Array(this.renderData.transformIndices.slice().buffer);
          null === (t3 = this._worker) || void 0 === t3 || t3.postMessage({ sortData: { positions: l4, transforms: U3, transformIndices: n3, vertexCount: this.renderData.vertexCount } }, [l4.buffer, U3.buffer, n3.buffer]), this.renderData.dataChanged = false, this.renderData.transformsChanged = false, this.renderData.colorTransformsChanged = false;
        }
        this._camera.update(), null === (l3 = this._worker) || void 0 === l3 || l3.postMessage({ viewProj: this._camera.data.viewProj.buffer }), F2.viewport(0, 0, U2.width, U2.height), F2.clearColor(0, 0, 0, 0), F2.clear(F2.COLOR_BUFFER_BIT), F2.disable(F2.DEPTH_TEST), F2.enable(F2.BLEND), F2.blendFuncSeparate(F2.ONE_MINUS_DST_ALPHA, F2.ONE, F2.ONE_MINUS_DST_ALPHA, F2.ONE), F2.blendEquationSeparate(F2.FUNC_ADD, F2.FUNC_ADD), F2.uniformMatrix4fv(n2, false, this._camera.data.projectionMatrix.buffer), F2.uniformMatrix4fv(d2, false, this._camera.data.viewMatrix.buffer), F2.bindBuffer(F2.ARRAY_BUFFER, I2), F2.vertexAttribPointer(c2, 2, F2.FLOAT, false, 0, 0), F2.bindBuffer(F2.ARRAY_BUFFER, J2), F2.bufferData(F2.ARRAY_BUFFER, this.depthIndex, F2.STATIC_DRAW), F2.vertexAttribIPointer(o2, 1, F2.INT, 0, 0), F2.vertexAttribDivisor(o2, 1), F2.drawArraysInstanced(F2.TRIANGLE_FAN, 0, 4, this.renderData.vertexCount);
      } else console.error("Cannot render without scene and camera");
    }, this._dispose = () => {
      var t3;
      if (this._scene && this._camera && this.renderData) {
        this._scene.removeEventListener("objectAdded", C2), this._scene.removeEventListener("objectRemoved", N2);
        for (const t4 of this._scene.objects) t4 instanceof Z && t4.removeEventListener("objectChanged", G2);
        null === (t3 = this._worker) || void 0 === t3 || t3.terminate(), this.renderData.dispose(), F2.deleteTexture(this.splatTexture), F2.deleteTexture(W2), F2.deleteTexture(r2), F2.deleteBuffer(J2), F2.deleteBuffer(I2);
      } else console.error("Cannot dispose without scene and camera");
    }, this._setOutlineThickness = (t3) => {
      this._outlineThickness = t3, this._initialized && F2.uniform1f(s2, t3);
    }, this._setOutlineColor = (t3) => {
      this._outlineColor = t3, this._initialized && F2.uniform4fv(R2, new Float32Array(t3.flatNorm()));
    };
  }
  get renderData() {
    return this._renderData;
  }
  get depthIndex() {
    return this._depthIndex;
  }
  get splatTexture() {
    return this._splatTexture;
  }
  get outlineThickness() {
    return this._outlineThickness;
  }
  set outlineThickness(t2) {
    this._setOutlineThickness(t2);
  }
  get outlineColor() {
    return this._outlineColor;
  }
  set outlineColor(t2) {
    this._setOutlineColor(t2);
  }
  get worker() {
    return this._worker;
  }
  _getVertexSource() {
    return "#version 300 es\nprecision highp float;\nprecision highp int;\n\nuniform highp usampler2D u_texture;\nuniform highp sampler2D u_transforms;\nuniform highp usampler2D u_transformIndices;\nuniform highp sampler2D u_colorTransforms;\nuniform highp usampler2D u_colorTransformIndices;\nuniform mat4 projection, view;\nuniform vec2 focal;\nuniform vec2 viewport;\n\nuniform bool useDepthFade;\nuniform float depthFade;\n\nin vec2 position;\nin int index;\n\nout vec4 vColor;\nout vec2 vPosition;\nout float vSize;\nout float vSelected;\n\nvoid main () {\n    uvec4 cen = texelFetch(u_texture, ivec2((uint(index) & 0x3ffu) << 1, uint(index) >> 10), 0);\n    float selected = float((cen.w >> 24) & 0xffu);\n\n    uint transformIndex = texelFetch(u_transformIndices, ivec2(uint(index) & 0x3ffu, uint(index) >> 10), 0).x;\n    mat4 transform = mat4(\n        texelFetch(u_transforms, ivec2(0, transformIndex), 0),\n        texelFetch(u_transforms, ivec2(1, transformIndex), 0),\n        texelFetch(u_transforms, ivec2(2, transformIndex), 0),\n        texelFetch(u_transforms, ivec2(3, transformIndex), 0)\n    );\n\n    if (selected < 0.5) {\n        selected = texelFetch(u_transforms, ivec2(4, transformIndex), 0).x;\n    }\n\n    mat4 viewTransform = view * transform;\n\n    vec4 cam = viewTransform * vec4(uintBitsToFloat(cen.xyz), 1);\n    vec4 pos2d = projection * cam;\n\n    float clip = 1.2 * pos2d.w;\n    if (pos2d.z < -pos2d.w || pos2d.z > pos2d.w || pos2d.x < -clip || pos2d.x > clip || pos2d.y < -clip || pos2d.y > clip) {\n        gl_Position = vec4(0.0, 0.0, 2.0, 1.0);\n        return;\n    }\n\n    uvec4 cov = texelFetch(u_texture, ivec2(((uint(index) & 0x3ffu) << 1) | 1u, uint(index) >> 10), 0);\n    vec2 u1 = unpackHalf2x16(cov.x), u2 = unpackHalf2x16(cov.y), u3 = unpackHalf2x16(cov.z);\n    mat3 Vrk = mat3(u1.x, u1.y, u2.x, u1.y, u2.y, u3.x, u2.x, u3.x, u3.y);\n\n    mat3 J = mat3(\n        focal.x / cam.z, 0., -(focal.x * cam.x) / (cam.z * cam.z), \n        0., -focal.y / cam.z, (focal.y * cam.y) / (cam.z * cam.z), \n        0., 0., 0.\n    );\n\n    mat3 T = transpose(mat3(viewTransform)) * J;\n    mat3 cov2d = transpose(T) * Vrk * T;\n\n    //ref: https://github.com/graphdeco-inria/diff-gaussian-rasterization/blob/main/cuda_rasterizer/forward.cu#L110-L111\n    cov2d[0][0] += 0.3;\n    cov2d[1][1] += 0.3;\n\n    float mid = (cov2d[0][0] + cov2d[1][1]) / 2.0;\n    float radius = length(vec2((cov2d[0][0] - cov2d[1][1]) / 2.0, cov2d[0][1]));\n    float lambda1 = mid + radius, lambda2 = mid - radius;\n\n    if (lambda2 < 0.0) return;\n    vec2 diagonalVector = normalize(vec2(cov2d[0][1], lambda1 - cov2d[0][0]));\n    vec2 majorAxis = min(sqrt(2.0 * lambda1), 1024.0) * diagonalVector;\n    vec2 minorAxis = min(sqrt(2.0 * lambda2), 1024.0) * vec2(diagonalVector.y, -diagonalVector.x);\n\n    uint colorTransformIndex = texelFetch(u_colorTransformIndices, ivec2(uint(index) & 0x3ffu, uint(index) >> 10), 0).x;\n    mat4 colorTransform = mat4(\n        texelFetch(u_colorTransforms, ivec2(0, colorTransformIndex), 0),\n        texelFetch(u_colorTransforms, ivec2(1, colorTransformIndex), 0),\n        texelFetch(u_colorTransforms, ivec2(2, colorTransformIndex), 0),\n        texelFetch(u_colorTransforms, ivec2(3, colorTransformIndex), 0)\n    );\n\n    vec4 color = vec4((cov.w) & 0xffu, (cov.w >> 8) & 0xffu, (cov.w >> 16) & 0xffu, (cov.w >> 24) & 0xffu) / 255.0;\n    vColor = colorTransform * color;\n\n    vPosition = position;\n    vSize = length(majorAxis);\n    vSelected = selected;\n\n    float scalingFactor = 1.0;\n\n    if (useDepthFade) {\n        float depthNorm = (pos2d.z / pos2d.w + 1.0) / 2.0;\n        float near = 0.1; float far = 100.0;\n        float normalizedDepth = (2.0 * near) / (far + near - depthNorm * (far - near));\n        float start = max(normalizedDepth - 0.1, 0.0);\n        float end = min(normalizedDepth + 0.1, 1.0);\n        scalingFactor = clamp((depthFade - start) / (end - start), 0.0, 1.0);\n    }\n\n    vec2 vCenter = vec2(pos2d) / pos2d.w;\n    gl_Position = vec4(\n        vCenter \n        + position.x * majorAxis * scalingFactor / viewport\n        + position.y * minorAxis * scalingFactor / viewport, 0.0, 1.0);\n}\n";
  }
  _getFragmentSource() {
    return "#version 300 es\nprecision highp float;\n\nuniform float outlineThickness;\nuniform vec4 outlineColor;\n\nin vec4 vColor;\nin vec2 vPosition;\nin float vSize;\nin float vSelected;\n\nout vec4 fragColor;\n\nvoid main () {\n    float A = -dot(vPosition, vPosition);\n\n    if (A < -4.0) discard;\n\n    if (vSelected < 0.5) {\n        float B = exp(A) * vColor.a;\n        fragColor = vec4(B * vColor.rgb, B);\n        return;\n    }\n\n    float outlineThreshold = -4.0 + (outlineThickness / vSize);\n\n    if (A < outlineThreshold) {\n        fragColor = outlineColor;\n    } \n    else {\n        float B = exp(A) * vColor.a;\n        fragColor = vec4(B * vColor.rgb, B);\n    }\n}\n";
  }
};
var S = class {
  constructor(t2 = 1) {
    let l2, U2, F2, n2, e2 = 0, Q2 = false;
    this.initialize = (t3) => {
      if (!(t3 instanceof y)) throw new Error("FadeInPass requires a RenderProgram");
      e2 = t3.started ? 1 : 0, Q2 = true, l2 = t3, U2 = t3.renderer.gl, F2 = U2.getUniformLocation(l2.program, "useDepthFade"), U2.uniform1i(F2, 1), n2 = U2.getUniformLocation(l2.program, "depthFade"), U2.uniform1f(n2, e2);
    }, this.render = () => {
      var d2;
      Q2 && !(null === (d2 = l2.renderData) || void 0 === d2 ? void 0 : d2.updating) && (U2.useProgram(l2.program), e2 = Math.min(e2 + 0.01 * t2, 1), e2 >= 1 && (Q2 = false, U2.uniform1i(F2, 0)), U2.uniform1f(n2, e2));
    };
  }
  dispose() {
  }
};
var Y = class {
  constructor(t2 = null, l2 = null) {
    this._backgroundColor = new E();
    const U2 = t2 || document.createElement("canvas");
    t2 || (U2.style.display = "block", U2.style.boxSizing = "border-box", U2.style.width = "100%", U2.style.height = "100%", U2.style.margin = "0", U2.style.padding = "0", document.body.appendChild(U2)), U2.style.background = this._backgroundColor.toHexString(), this._canvas = U2, this._gl = U2.getContext("webgl2", { antialias: false });
    const F2 = l2 || [];
    l2 || F2.push(new S()), this._renderProgram = new y(this, F2);
    const n2 = [this._renderProgram];
    this.resize = () => {
      const t3 = U2.clientWidth, l3 = U2.clientHeight;
      U2.width === t3 && U2.height === l3 || this.setSize(t3, l3);
    }, this.setSize = (t3, l3) => {
      U2.width = t3, U2.height = l3, this._gl.viewport(0, 0, U2.width, U2.height);
      for (const t4 of n2) t4.resize();
    }, this.render = (t3, l3) => {
      for (const U3 of n2) U3.render(t3, l3);
    }, this.dispose = () => {
      for (const t3 of n2) t3.dispose();
    }, this.addProgram = (t3) => {
      n2.push(t3);
    }, this.removeProgram = (t3) => {
      const l3 = n2.indexOf(t3);
      if (l3 < 0) throw new Error("Program not found");
      n2.splice(l3, 1);
    }, this.resize();
  }
  get canvas() {
    return this._canvas;
  }
  get gl() {
    return this._gl;
  }
  get renderProgram() {
    return this._renderProgram;
  }
  get backgroundColor() {
    return this._backgroundColor;
  }
  set backgroundColor(t2) {
    this._backgroundColor = t2, this._canvas.style.background = t2.toHexString();
  }
};
var u = class {
  constructor(U2, F2, n2 = 0.5, e2 = 0.5, Q2 = 5, d2 = true, a2 = new t()) {
    this.minAngle = -90, this.maxAngle = 90, this.minZoom = 0.1, this.maxZoom = 30, this.orbitSpeed = 1, this.panSpeed = 1, this.zoomSpeed = 1, this.dampening = 0.12, this.setCameraTarget = () => {
    };
    let V2 = a2.clone(), B2 = V2.clone(), i2 = n2, Z2 = e2, s2 = Q2, R2 = false, c2 = false, o2 = 0, W2 = 0, r2 = 0;
    const h2 = {};
    let m2 = false;
    U2.addEventListener("objectChanged", () => {
      if (m2) return;
      const l2 = U2.rotation.toEuler();
      i2 = -l2.y, Z2 = -l2.x;
      const F3 = U2.position.x - s2 * Math.sin(i2) * Math.cos(Z2), n3 = U2.position.y + s2 * Math.sin(Z2), e3 = U2.position.z + s2 * Math.cos(i2) * Math.cos(Z2);
      B2 = new t(F3, n3, e3);
    }), this.setCameraTarget = (l2) => {
      const F3 = l2.x - U2.position.x, n3 = l2.y - U2.position.y, e3 = l2.z - U2.position.z;
      s2 = Math.sqrt(F3 * F3 + n3 * n3 + e3 * e3), Z2 = Math.atan2(n3, Math.sqrt(F3 * F3 + e3 * e3)), i2 = -Math.atan2(F3, e3), B2 = new t(l2.x, l2.y, l2.z);
    };
    const I2 = () => 0.1 + 0.9 * (s2 - this.minZoom) / (this.maxZoom - this.minZoom), J2 = (t2) => {
      h2[t2.code] = true, "ArrowUp" === t2.code && (h2.KeyW = true), "ArrowDown" === t2.code && (h2.KeyS = true), "ArrowLeft" === t2.code && (h2.KeyA = true), "ArrowRight" === t2.code && (h2.KeyD = true);
    }, b2 = (t2) => {
      h2[t2.code] = false, "ArrowUp" === t2.code && (h2.KeyW = false), "ArrowDown" === t2.code && (h2.KeyS = false), "ArrowLeft" === t2.code && (h2.KeyA = false), "ArrowRight" === t2.code && (h2.KeyD = false);
    }, C2 = (t2) => {
      S2(t2), R2 = true, c2 = 2 === t2.button, W2 = t2.clientX, r2 = t2.clientY, window.addEventListener("mouseup", g2);
    }, g2 = (t2) => {
      S2(t2), R2 = false, c2 = false, window.removeEventListener("mouseup", g2);
    }, N2 = (l2) => {
      if (S2(l2), !R2 || !U2) return;
      const F3 = l2.clientX - W2, n3 = l2.clientY - r2;
      if (c2) {
        const l3 = I2(), e3 = -F3 * this.panSpeed * 0.01 * l3, Q3 = -n3 * this.panSpeed * 0.01 * l3, d3 = A.RotationFromQuaternion(U2.rotation).buffer, a3 = new t(d3[0], d3[3], d3[6]), V3 = new t(d3[1], d3[4], d3[7]);
        B2 = B2.add(a3.multiply(e3)), B2 = B2.add(V3.multiply(Q3));
      } else i2 -= F3 * this.orbitSpeed * 3e-3, Z2 += n3 * this.orbitSpeed * 3e-3, Z2 = Math.min(Math.max(Z2, this.minAngle * Math.PI / 180), this.maxAngle * Math.PI / 180);
      W2 = l2.clientX, r2 = l2.clientY;
    }, G2 = (t2) => {
      S2(t2);
      const l2 = I2();
      s2 += t2.deltaY * this.zoomSpeed * 0.025 * l2, s2 = Math.min(Math.max(s2, this.minZoom), this.maxZoom);
    }, p2 = (t2) => {
      if (S2(t2), 1 === t2.touches.length) R2 = true, c2 = false, W2 = t2.touches[0].clientX, r2 = t2.touches[0].clientY, o2 = 0;
      else if (2 === t2.touches.length) {
        R2 = true, c2 = true, W2 = (t2.touches[0].clientX + t2.touches[1].clientX) / 2, r2 = (t2.touches[0].clientY + t2.touches[1].clientY) / 2;
        const l2 = t2.touches[0].clientX - t2.touches[1].clientX, U3 = t2.touches[0].clientY - t2.touches[1].clientY;
        o2 = Math.sqrt(l2 * l2 + U3 * U3);
      }
    }, X2 = (t2) => {
      S2(t2), R2 = false, c2 = false;
    }, E2 = (l2) => {
      if (S2(l2), R2 && U2) if (c2) {
        const F3 = I2(), n3 = l2.touches[0].clientX - l2.touches[1].clientX, e3 = l2.touches[0].clientY - l2.touches[1].clientY, Q3 = Math.sqrt(n3 * n3 + e3 * e3);
        s2 += (o2 - Q3) * this.zoomSpeed * 0.1 * F3, s2 = Math.min(Math.max(s2, this.minZoom), this.maxZoom), o2 = Q3;
        const d3 = (l2.touches[0].clientX + l2.touches[1].clientX) / 2, a3 = (l2.touches[0].clientY + l2.touches[1].clientY) / 2, V3 = d3 - W2, i3 = a3 - r2, Z3 = A.RotationFromQuaternion(U2.rotation).buffer, R3 = new t(Z3[0], Z3[3], Z3[6]), c3 = new t(Z3[1], Z3[4], Z3[7]);
        B2 = B2.add(R3.multiply(-V3 * this.panSpeed * 0.025 * F3)), B2 = B2.add(c3.multiply(-i3 * this.panSpeed * 0.025 * F3)), W2 = d3, r2 = a3;
      } else {
        const t2 = l2.touches[0].clientX - W2, U3 = l2.touches[0].clientY - r2;
        i2 -= t2 * this.orbitSpeed * 3e-3, Z2 += U3 * this.orbitSpeed * 3e-3, Z2 = Math.min(Math.max(Z2, this.minAngle * Math.PI / 180), this.maxAngle * Math.PI / 180), W2 = l2.touches[0].clientX, r2 = l2.touches[0].clientY;
      }
    }, y2 = (t2, l2, U3) => (1 - U3) * t2 + U3 * l2;
    this.update = () => {
      m2 = true, n2 = y2(n2, i2, this.dampening), e2 = y2(e2, Z2, this.dampening), Q2 = y2(Q2, s2, this.dampening), V2 = V2.lerp(B2, this.dampening);
      const F3 = V2.x + Q2 * Math.sin(n2) * Math.cos(e2), d3 = V2.y - Q2 * Math.sin(e2), a3 = V2.z - Q2 * Math.cos(n2) * Math.cos(e2);
      U2.position = new t(F3, d3, a3);
      const R3 = V2.subtract(U2.position).normalize(), c3 = Math.asin(-R3.y), o3 = Math.atan2(R3.x, R3.z);
      U2.rotation = l.FromEuler(new t(c3, o3, 0));
      const W3 = 0.025, r3 = 0.01, I3 = A.RotationFromQuaternion(U2.rotation).buffer, J3 = new t(-I3[2], -I3[5], -I3[8]), b3 = new t(I3[0], I3[3], I3[6]);
      h2.KeyS && (B2 = B2.add(J3.multiply(W3))), h2.KeyW && (B2 = B2.subtract(J3.multiply(W3))), h2.KeyA && (B2 = B2.subtract(b3.multiply(W3))), h2.KeyD && (B2 = B2.add(b3.multiply(W3))), h2.KeyE && (i2 += r3), h2.KeyQ && (i2 -= r3), h2.KeyR && (Z2 += r3), h2.KeyF && (Z2 -= r3), m2 = false;
    };
    const S2 = (t2) => {
      t2.preventDefault(), t2.stopPropagation();
    };
    this.dispose = () => {
      F2.removeEventListener("dragenter", S2), F2.removeEventListener("dragover", S2), F2.removeEventListener("dragleave", S2), F2.removeEventListener("contextmenu", S2), F2.removeEventListener("mousedown", C2), F2.removeEventListener("mousemove", N2), F2.removeEventListener("wheel", G2), F2.removeEventListener("touchstart", p2), F2.removeEventListener("touchend", X2), F2.removeEventListener("touchmove", E2), d2 && (window.removeEventListener("keydown", J2), window.removeEventListener("keyup", b2));
    }, d2 && (window.addEventListener("keydown", J2), window.addEventListener("keyup", b2)), F2.addEventListener("dragenter", S2), F2.addEventListener("dragover", S2), F2.addEventListener("dragleave", S2), F2.addEventListener("contextmenu", S2), F2.addEventListener("mousedown", C2), F2.addEventListener("mousemove", N2), F2.addEventListener("wheel", G2), F2.addEventListener("touchstart", p2), F2.addEventListener("touchend", X2), F2.addEventListener("touchmove", E2), this.update();
  }
};
var k = class {
  constructor(U2, F2) {
    this.moveSpeed = 1.5, this.lookSpeed = 0.7, this.dampening = 0.5;
    const n2 = {};
    let e2 = U2.rotation.toEuler().x, Q2 = U2.rotation.toEuler().y, d2 = U2.position, a2 = false;
    const V2 = () => {
      F2.requestPointerLock();
    }, B2 = () => {
      a2 = document.pointerLockElement === F2, a2 ? F2.addEventListener("mousemove", i2) : F2.removeEventListener("mousemove", i2);
    }, i2 = (t2) => {
      const l2 = t2.movementX, U3 = t2.movementY;
      Q2 += l2 * this.lookSpeed * 1e-3, e2 -= U3 * this.lookSpeed * 1e-3, e2 = Math.max(-Math.PI / 2, Math.min(Math.PI / 2, e2));
    }, Z2 = (t2) => {
      n2[t2.code] = true, "ArrowUp" === t2.code && (n2.KeyW = true), "ArrowDown" === t2.code && (n2.KeyS = true), "ArrowLeft" === t2.code && (n2.KeyA = true), "ArrowRight" === t2.code && (n2.KeyD = true);
    }, s2 = (t2) => {
      n2[t2.code] = false, "ArrowUp" === t2.code && (n2.KeyW = false), "ArrowDown" === t2.code && (n2.KeyS = false), "ArrowLeft" === t2.code && (n2.KeyA = false), "ArrowRight" === t2.code && (n2.KeyD = false), "Escape" === t2.code && document.exitPointerLock();
    };
    this.update = () => {
      const F3 = A.RotationFromQuaternion(U2.rotation).buffer, a3 = new t(-F3[2], -F3[5], -F3[8]), V3 = new t(F3[0], F3[3], F3[6]);
      let B3 = new t(0, 0, 0);
      n2.KeyS && (B3 = B3.add(a3)), n2.KeyW && (B3 = B3.subtract(a3)), n2.KeyA && (B3 = B3.subtract(V3)), n2.KeyD && (B3 = B3.add(V3)), B3 = new t(B3.x, 0, B3.z), B3.magnitude() > 0 && (B3 = B3.normalize()), d2 = d2.add(B3.multiply(0.01 * this.moveSpeed)), U2.position = U2.position.add(d2.subtract(U2.position).multiply(this.dampening)), U2.rotation = l.FromEuler(new t(e2, Q2, 0));
    };
    const R2 = (t2) => {
      t2.preventDefault(), t2.stopPropagation();
    };
    this.dispose = () => {
      F2.removeEventListener("dragenter", R2), F2.removeEventListener("dragover", R2), F2.removeEventListener("dragleave", R2), F2.removeEventListener("contextmenu", R2), F2.removeEventListener("mousedown", V2), document.removeEventListener("pointerlockchange", B2), window.removeEventListener("keydown", Z2), window.removeEventListener("keyup", s2);
    }, window.addEventListener("keydown", Z2), window.addEventListener("keyup", s2), F2.addEventListener("dragenter", R2), F2.addEventListener("dragover", R2), F2.addEventListener("dragleave", R2), F2.addEventListener("contextmenu", R2), F2.addEventListener("mousedown", V2), document.addEventListener("pointerlockchange", B2), this.update();
  }
};
var T = class {
  constructor(t2, l2) {
    this.normal = t2, this.point = l2;
  }
  intersect(t2, l2) {
    const U2 = this.normal.dot(l2);
    if (Math.abs(U2) < 1e-4) return null;
    const F2 = this.normal.dot(this.point.subtract(t2)) / U2;
    return F2 < 0 ? null : t2.add(l2.multiply(F2));
  }
};
var H = class {
  initialize(t2) {
  }
  render() {
  }
  dispose() {
  }
};
var x = class extends N {
  constructor(t2, l2 = []) {
    super(t2, l2), this._renderData = null, this._depthIndex = new Uint32Array(), this._splatTexture = null;
    const U2 = t2.canvas, n2 = t2.gl;
    let e2, Q2, d2, A2, a2, V2, B2, i2, Z2, R2, c2;
    this._resize = () => {
      this._camera && (this._camera.data.setSize(U2.width, U2.height), this._camera.update(), Q2 = n2.getUniformLocation(this.program, "projection"), n2.uniformMatrix4fv(Q2, false, this._camera.data.projectionMatrix.buffer), d2 = n2.getUniformLocation(this.program, "viewport"), n2.uniform2fv(d2, new Float32Array([U2.width, U2.height])));
    };
    const o2 = () => {
      null !== t2.renderProgram.worker ? (e2 = t2.renderProgram.worker, e2.onmessage = (t3) => {
        if (t3.data.depthIndex) {
          const { depthIndex: l3 } = t3.data;
          this._depthIndex = l3, n2.bindBuffer(n2.ARRAY_BUFFER, c2), n2.bufferData(n2.ARRAY_BUFFER, l3, n2.STATIC_DRAW);
        }
      }) : console.error("Render program is not initialized. Cannot render without worker");
    };
    this._initialize = () => {
      if (!this._scene || !this._camera) return void console.error("Cannot render without scene and camera");
      this._resize(), this._scene.addEventListener("objectAdded", W2), this._scene.addEventListener("objectRemoved", r2);
      for (const t4 of this._scene.objects) t4 instanceof s && (null === this._renderData ? (this._renderData = t4.data, t4.addEventListener("objectChanged", h2)) : console.warn("Multiple Splatv objects are not currently supported"));
      if (null === this._renderData) return void console.error("Cannot render without Splatv object");
      A2 = n2.getUniformLocation(this.program, "focal"), n2.uniform2fv(A2, new Float32Array([this._camera.data.fx, this._camera.data.fy])), a2 = n2.getUniformLocation(this.program, "view"), n2.uniformMatrix4fv(a2, false, this._camera.data.viewMatrix.buffer), this._splatTexture = n2.createTexture(), V2 = n2.getUniformLocation(this.program, "u_texture"), n2.uniform1i(V2, 0), B2 = n2.getUniformLocation(this.program, "time"), n2.uniform1f(B2, Math.sin(Date.now() / 1e3) / 2 + 0.5), R2 = n2.createBuffer(), n2.bindBuffer(n2.ARRAY_BUFFER, R2), n2.bufferData(n2.ARRAY_BUFFER, new Float32Array([-2, -2, 2, -2, 2, 2, -2, 2]), n2.STATIC_DRAW), i2 = n2.getAttribLocation(this.program, "position"), n2.enableVertexAttribArray(i2), n2.vertexAttribPointer(i2, 2, n2.FLOAT, false, 0, 0), c2 = n2.createBuffer(), Z2 = n2.getAttribLocation(this.program, "index"), n2.enableVertexAttribArray(Z2), n2.bindBuffer(n2.ARRAY_BUFFER, c2), o2(), n2.activeTexture(n2.TEXTURE0), n2.bindTexture(n2.TEXTURE_2D, this._splatTexture), n2.texParameteri(n2.TEXTURE_2D, n2.TEXTURE_WRAP_S, n2.CLAMP_TO_EDGE), n2.texParameteri(n2.TEXTURE_2D, n2.TEXTURE_WRAP_T, n2.CLAMP_TO_EDGE), n2.texParameteri(n2.TEXTURE_2D, n2.TEXTURE_MIN_FILTER, n2.NEAREST), n2.texParameteri(n2.TEXTURE_2D, n2.TEXTURE_MAG_FILTER, n2.NEAREST), n2.texImage2D(n2.TEXTURE_2D, 0, n2.RGBA32UI, this._renderData.width, this._renderData.height, 0, n2.RGBA_INTEGER, n2.UNSIGNED_INT, this._renderData.data);
      const t3 = this._renderData.positions, l3 = new Float32Array(new F().buffer), U3 = new Uint32Array(this._renderData.vertexCount);
      U3.fill(0), e2.postMessage({ sortData: { positions: t3, transforms: l3, transformIndices: U3, vertexCount: this._renderData.vertexCount } }, [t3.buffer, l3.buffer, U3.buffer]);
    };
    const W2 = (t3) => {
      const l3 = t3;
      l3.object instanceof s && (null === this._renderData ? (this._renderData = l3.object.data, l3.object.addEventListener("objectChanged", h2)) : console.warn("Splatv not supported by default RenderProgram. Use VideoRenderProgram instead.")), this.dispose();
    }, r2 = (t3) => {
      const l3 = t3;
      l3.object instanceof s && this._renderData === l3.object.data && (this._renderData = null, l3.object.removeEventListener("objectChanged", h2)), this.dispose();
    }, h2 = (t3) => {
      const l3 = t3;
      l3.object instanceof s && this._renderData === l3.object.data && this.dispose();
    };
    this._render = () => {
      this._scene && this._camera ? this._renderData ? (this._camera.update(), e2.postMessage({ viewProj: this._camera.data.viewProj.buffer }), n2.viewport(0, 0, U2.width, U2.height), n2.clearColor(0, 0, 0, 0), n2.clear(n2.COLOR_BUFFER_BIT), n2.disable(n2.DEPTH_TEST), n2.enable(n2.BLEND), n2.blendFuncSeparate(n2.ONE_MINUS_DST_ALPHA, n2.ONE, n2.ONE_MINUS_DST_ALPHA, n2.ONE), n2.blendEquationSeparate(n2.FUNC_ADD, n2.FUNC_ADD), n2.uniformMatrix4fv(Q2, false, this._camera.data.projectionMatrix.buffer), n2.uniformMatrix4fv(a2, false, this._camera.data.viewMatrix.buffer), n2.uniform1f(B2, Math.sin(Date.now() / 1e3) / 2 + 0.5), n2.bindBuffer(n2.ARRAY_BUFFER, R2), n2.vertexAttribPointer(i2, 2, n2.FLOAT, false, 0, 0), n2.bindBuffer(n2.ARRAY_BUFFER, c2), n2.bufferData(n2.ARRAY_BUFFER, this._depthIndex, n2.STATIC_DRAW), n2.vertexAttribIPointer(Z2, 1, n2.INT, 0, 0), n2.vertexAttribDivisor(Z2, 1), n2.drawArraysInstanced(n2.TRIANGLE_FAN, 0, 4, this._renderData.vertexCount)) : console.warn("Cannot render without Splatv object") : console.error("Cannot render without scene and camera");
    }, this._dispose = () => {
      if (this._scene && this._camera) {
        this._scene.removeEventListener("objectAdded", W2), this._scene.removeEventListener("objectRemoved", r2);
        for (const t3 of this._scene.objects) t3 instanceof s && this._renderData === t3.data && (this._renderData = null, t3.removeEventListener("objectChanged", h2));
        null == e2 || e2.terminate(), n2.deleteTexture(this._splatTexture), n2.deleteBuffer(c2), n2.deleteBuffer(R2);
      } else console.error("Cannot dispose without scene and camera");
    };
  }
  get renderData() {
    return this._renderData;
  }
  _getVertexSource() {
    return "#version 300 es\nprecision highp float;\nprecision highp int;\n  \nuniform highp usampler2D u_texture;\nuniform mat4 projection, view;\nuniform vec2 focal;\nuniform vec2 viewport;\nuniform float time;\n  \nin vec2 position;\nin int index;\n  \nout vec4 vColor;\nout vec2 vPosition;\n  \nvoid main () {\n    gl_Position = vec4(0.0, 0.0, 2.0, 1.0);\n\n    uvec4 motion1 = texelFetch(u_texture, ivec2(((uint(index) & 0x3ffu) << 2) | 3u, uint(index) >> 10), 0);\n    vec2 trbf = unpackHalf2x16(motion1.w);\n    float dt = time - trbf.x;\n\n    float topacity = exp(-1.0 * pow(dt / trbf.y, 2.0));\n    if(topacity < 0.02) return;\n\n    uvec4 motion0 = texelFetch(u_texture, ivec2(((uint(index) & 0x3ffu) << 2) | 2u, uint(index) >> 10), 0);\n    uvec4 static0 = texelFetch(u_texture, ivec2(((uint(index) & 0x3ffu) << 2), uint(index) >> 10), 0);\n\n    vec2 m0 = unpackHalf2x16(motion0.x), m1 = unpackHalf2x16(motion0.y), m2 = unpackHalf2x16(motion0.z), \n         m3 = unpackHalf2x16(motion0.w), m4 = unpackHalf2x16(motion1.x); \n      \n    vec4 trot = vec4(unpackHalf2x16(motion1.y).xy, unpackHalf2x16(motion1.z).xy) * dt;\n    vec3 tpos = (vec3(m0.xy, m1.x) * dt + vec3(m1.y, m2.xy) * dt*dt + vec3(m3.xy, m4.x) * dt*dt*dt);\n      \n    vec4 cam = view * vec4(uintBitsToFloat(static0.xyz) + tpos, 1);\n    vec4 pos = projection * cam;\n  \n    float clip = 1.2 * pos.w;\n    if (pos.z < -clip || pos.x < -clip || pos.x > clip || pos.y < -clip || pos.y > clip) return;\n    uvec4 static1 = texelFetch(u_texture, ivec2(((uint(index) & 0x3ffu) << 2) | 1u, uint(index) >> 10), 0);\n\n    vec4 rot = vec4(unpackHalf2x16(static0.w).xy, unpackHalf2x16(static1.x).xy) + trot;\n    vec3 scale = vec3(unpackHalf2x16(static1.y).xy, unpackHalf2x16(static1.z).x);\n    rot /= sqrt(dot(rot, rot));\n  \n    mat3 S = mat3(scale.x, 0.0, 0.0, 0.0, scale.y, 0.0, 0.0, 0.0, scale.z);\n    mat3 R = mat3(\n        1.0 - 2.0 * (rot.z * rot.z + rot.w * rot.w), 2.0 * (rot.y * rot.z - rot.x * rot.w), 2.0 * (rot.y * rot.w + rot.x * rot.z),\n        2.0 * (rot.y * rot.z + rot.x * rot.w), 1.0 - 2.0 * (rot.y * rot.y + rot.w * rot.w), 2.0 * (rot.z * rot.w - rot.x * rot.y),\n        2.0 * (rot.y * rot.w - rot.x * rot.z), 2.0 * (rot.z * rot.w + rot.x * rot.y), 1.0 - 2.0 * (rot.y * rot.y + rot.z * rot.z));\n    mat3 M = S * R;\n    mat3 Vrk = 4.0 * transpose(M) * M;\n    mat3 J = mat3(\n        focal.x / cam.z, 0., -(focal.x * cam.x) / (cam.z * cam.z), \n        0., -focal.y / cam.z, (focal.y * cam.y) / (cam.z * cam.z), \n        0., 0., 0.\n    );\n  \n    mat3 T = transpose(mat3(view)) * J;\n    mat3 cov2d = transpose(T) * Vrk * T;\n  \n    float mid = (cov2d[0][0] + cov2d[1][1]) / 2.0;\n    float radius = length(vec2((cov2d[0][0] - cov2d[1][1]) / 2.0, cov2d[0][1]));\n    float lambda1 = mid + radius, lambda2 = mid - radius;\n  \n    if(lambda2 < 0.0) return;\n    vec2 diagonalVector = normalize(vec2(cov2d[0][1], lambda1 - cov2d[0][0]));\n    vec2 majorAxis = min(sqrt(2.0 * lambda1), 1024.0) * diagonalVector;\n    vec2 minorAxis = min(sqrt(2.0 * lambda2), 1024.0) * vec2(diagonalVector.y, -diagonalVector.x);\n      \n    uint rgba = static1.w;\n    vColor = \n        clamp(pos.z/pos.w+1.0, 0.0, 1.0) * \n        vec4(1.0, 1.0, 1.0, topacity) *\n        vec4(\n            (rgba) & 0xffu, \n            (rgba >> 8) & 0xffu, \n            (rgba >> 16) & 0xffu, \n            (rgba >> 24) & 0xffu) / 255.0;\n\n    vec2 vCenter = vec2(pos) / pos.w;\n    gl_Position = vec4(\n        vCenter \n        + position.x * majorAxis / viewport \n        + position.y * minorAxis / viewport, 0.0, 1.0);\n\n    vPosition = position;\n}\n";
  }
  _getFragmentSource() {
    return "#version 300 es\nprecision highp float;\n  \nin vec4 vColor;\nin vec2 vPosition;\n\nout vec4 fragColor;\n\nvoid main () {\n    float A = -dot(vPosition, vPosition);\n    if (A < -4.0) discard;\n    float B = exp(A) * vColor.a;\n    fragColor = vec4(B * vColor.rgb, B);\n}\n";
  }
};
var f = class _f {
  constructor(t2, l2, U2) {
    this.bounds = t2, this.boxes = l2, this.left = null, this.right = null, this.pointIndices = [], U2.length > 1 ? this.split(t2, l2, U2) : U2.length > 0 && (this.pointIndices = U2);
  }
  split(t2, l2, U2) {
    const F2 = t2.size().maxComponent();
    U2.sort((t3, U3) => l2[t3].center().getComponent(F2) - l2[U3].center().getComponent(F2));
    const n2 = Math.floor(U2.length / 2), e2 = U2.slice(0, n2), Q2 = U2.slice(n2);
    this.left = new _f(t2, l2, e2), this.right = new _f(t2, l2, Q2);
  }
  queryRange(t2) {
    return this.bounds.intersects(t2) ? null !== this.left && null !== this.right ? this.left.queryRange(t2).concat(this.right.queryRange(t2)) : this.pointIndices.filter((l2) => t2.intersects(this.boxes[l2])) : [];
  }
};
var w = class {
  constructor(t2, l2) {
    const U2 = l2.map((t3, l3) => l3);
    this.root = new f(t2, l2, U2);
  }
  queryRange(t2) {
    return this.root.queryRange(t2);
  }
};
var D = class {
  constructor(l2, U2 = 100, F2 = 1) {
    let n2 = 0, e2 = null, Q2 = [];
    this.testPoint = (d2, A2) => {
      if (null === l2.renderData || null === l2.camera) return console.error("IntersectionTester cannot be called before renderProgram has been initialized"), null;
      if ((() => {
        if (null === l2.renderData) return void console.error("IntersectionTester cannot be called before renderProgram has been initialized");
        Q2 = [];
        const U3 = l2.renderData, F3 = new Array(U3.offsets.size);
        let d3 = 0;
        const A3 = new i(new t(1 / 0, 1 / 0, 1 / 0), new t(-1 / 0, -1 / 0, -1 / 0));
        for (const t2 of U3.offsets.keys()) {
          const l3 = t2.bounds;
          F3[d3++] = l3, A3.expand(l3.min), A3.expand(l3.max), Q2.push(t2);
        }
        A3.permute(), e2 = new w(A3, F3), n2 = U3.vertexCount;
      })(), null === e2) return console.error("Failed to build octree for IntersectionTester"), null;
      const a2 = l2.renderData, V2 = l2.camera;
      n2 !== a2.vertexCount && console.warn("IntersectionTester has not been rebuilt since the last render");
      const B2 = V2.screenPointToRay(d2, A2);
      for (let l3 = 0; l3 < U2; l3 += F2) {
        const U3 = V2.position.add(B2.multiply(l3)), n3 = new t(U3.x - F2 / 2, U3.y - F2 / 2, U3.z - F2 / 2), d3 = new t(U3.x + F2 / 2, U3.y + F2 / 2, U3.z + F2 / 2), A3 = new i(n3, d3), a3 = e2.queryRange(A3);
        if (a3.length > 0) return Q2[a3[0]];
      }
      return null;
    };
  }
};
export {
  o as Camera,
  R as CameraData,
  E as Color32,
  k as FPSControls,
  S as FadeInPass,
  D as IntersectionTester,
  m as Loader,
  A as Matrix3,
  F as Matrix4,
  d as Object3D,
  u as OrbitControls,
  I as PLYLoader,
  T as Plane,
  l as Quaternion,
  X as RenderData,
  y as RenderProgram,
  W as Scene,
  H as ShaderPass,
  N as ShaderProgram,
  Z as Splat,
  a as SplatData,
  s as Splatv,
  V as SplatvData,
  J as SplatvLoader,
  t as Vector3,
  c as Vector4,
  x as VideoRenderProgram,
  Y as WebGLRenderer
};
//# sourceMappingURL=gsplat.js.map
