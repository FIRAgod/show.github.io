{
  "version": 3,
  "sources": ["../../gsplat/src/math/Vector3.ts", "../../gsplat/src/math/Quaternion.ts", "../../gsplat/src/events/EventDispatcher.ts", "../../gsplat/src/math/Matrix4.ts", "../../gsplat/src/events/Events.ts", "../../gsplat/src/core/Object3D.ts", "../../gsplat/src/math/Matrix3.ts", "../../gsplat/src/splats/SplatData.ts", "../../gsplat/src/splats/SplatvData.ts", "../../gsplat/src/utils/Converter.ts", "../../gsplat/src/math/Box3.ts", "../../gsplat/src/splats/Splat.ts", "../../gsplat/src/splats/Splatv.ts", "../../gsplat/src/cameras/CameraData.ts", "../../gsplat/src/math/Vector4.ts", "../../gsplat/src/cameras/Camera.ts", "../../gsplat/src/core/Scene.ts", "../../gsplat/src/utils/LoaderUtils.ts", "../../gsplat/src/loaders/Loader.ts", "../../gsplat/src/loaders/PLYLoader.ts", "../../gsplat/src/loaders/SplatvLoader.ts", "../../gsplat/src/renderers/webgl/programs/ShaderProgram.ts", "../../gsplat/src/wasm/data.js", "../../gsplat/src/renderers/webgl/utils/RenderData.ts", "../../gsplat/src/math/Color32.ts", "../../gsplat/src/renderers/webgl/programs/RenderProgram.ts", "../../gsplat/src/renderers/webgl/passes/FadeInPass.ts", "../../gsplat/src/renderers/WebGLRenderer.ts", "../../gsplat/src/controls/OrbitControls.ts", "../../gsplat/src/controls/FPSControls.ts", "../../gsplat/src/math/Plane.ts", "../../gsplat/src/renderers/webgl/passes/ShaderPass.ts", "../../gsplat/src/renderers/webgl/programs/VideoRenderProgram.ts", "../../gsplat/src/math/BVH.ts", "../../gsplat/src/renderers/webgl/utils/IntersectionTester.ts"],
  "sourcesContent": ["import { Matrix4 } from \"./Matrix4\";\n\nclass Vector3 {\n    public readonly x: number;\n    public readonly y: number;\n    public readonly z: number;\n\n    constructor(x: number = 0, y: number = 0, z: number = 0) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    equals(v: Vector3): boolean {\n        if (this.x !== v.x) {\n            return false;\n        }\n        if (this.y !== v.y) {\n            return false;\n        }\n        if (this.z !== v.z) {\n            return false;\n        }\n\n        return true;\n    }\n\n    add(v: number): Vector3;\n    add(v: Vector3): Vector3;\n    add(v: number | Vector3): Vector3 {\n        if (typeof v === \"number\") {\n            return new Vector3(this.x + v, this.y + v, this.z + v);\n        } else {\n            return new Vector3(this.x + v.x, this.y + v.y, this.z + v.z);\n        }\n    }\n\n    subtract(v: number): Vector3;\n    subtract(v: Vector3): Vector3;\n    subtract(v: number | Vector3): Vector3 {\n        if (typeof v === \"number\") {\n            return new Vector3(this.x - v, this.y - v, this.z - v);\n        } else {\n            return new Vector3(this.x - v.x, this.y - v.y, this.z - v.z);\n        }\n    }\n\n    multiply(v: number): Vector3;\n    multiply(v: Vector3): Vector3;\n    multiply(v: Matrix4): Vector3;\n    multiply(v: number | Vector3 | Matrix4): Vector3 {\n        if (typeof v === \"number\") {\n            return new Vector3(this.x * v, this.y * v, this.z * v);\n        } else if (v instanceof Vector3) {\n            return new Vector3(this.x * v.x, this.y * v.y, this.z * v.z);\n        } else {\n            return new Vector3(\n                this.x * v.buffer[0] + this.y * v.buffer[4] + this.z * v.buffer[8] + v.buffer[12],\n                this.x * v.buffer[1] + this.y * v.buffer[5] + this.z * v.buffer[9] + v.buffer[13],\n                this.x * v.buffer[2] + this.y * v.buffer[6] + this.z * v.buffer[10] + v.buffer[14],\n            );\n        }\n    }\n\n    divide(v: number): Vector3;\n    divide(v: Vector3): Vector3;\n    divide(v: number | Vector3): Vector3 {\n        if (typeof v === \"number\") {\n            return new Vector3(this.x / v, this.y / v, this.z / v);\n        } else {\n            return new Vector3(this.x / v.x, this.y / v.y, this.z / v.z);\n        }\n    }\n\n    cross(v: Vector3): Vector3 {\n        const x = this.y * v.z - this.z * v.y;\n        const y = this.z * v.x - this.x * v.z;\n        const z = this.x * v.y - this.y * v.x;\n\n        return new Vector3(x, y, z);\n    }\n\n    dot(v: Vector3): number {\n        return this.x * v.x + this.y * v.y + this.z * v.z;\n    }\n\n    lerp(v: Vector3, t: number): Vector3 {\n        return new Vector3(this.x + (v.x - this.x) * t, this.y + (v.y - this.y) * t, this.z + (v.z - this.z) * t);\n    }\n\n    min(v: Vector3): Vector3 {\n        return new Vector3(Math.min(this.x, v.x), Math.min(this.y, v.y), Math.min(this.z, v.z));\n    }\n\n    max(v: Vector3): Vector3 {\n        return new Vector3(Math.max(this.x, v.x), Math.max(this.y, v.y), Math.max(this.z, v.z));\n    }\n\n    getComponent(axis: number) {\n        switch (axis) {\n            case 0:\n                return this.x;\n            case 1:\n                return this.y;\n            case 2:\n                return this.z;\n            default:\n                throw new Error(`Invalid component index: ${axis}`);\n        }\n    }\n\n    minComponent(): number {\n        if (this.x < this.y && this.x < this.z) {\n            return 0;\n        } else if (this.y < this.z) {\n            return 1;\n        } else {\n            return 2;\n        }\n    }\n\n    maxComponent(): number {\n        if (this.x > this.y && this.x > this.z) {\n            return 0;\n        } else if (this.y > this.z) {\n            return 1;\n        } else {\n            return 2;\n        }\n    }\n\n    magnitude(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    }\n\n    distanceTo(v: Vector3): number {\n        return Math.sqrt((this.x - v.x) ** 2 + (this.y - v.y) ** 2 + (this.z - v.z) ** 2);\n    }\n\n    normalize(): Vector3 {\n        const length = this.magnitude();\n\n        return new Vector3(this.x / length, this.y / length, this.z / length);\n    }\n\n    flat(): number[] {\n        return [this.x, this.y, this.z];\n    }\n\n    clone(): Vector3 {\n        return new Vector3(this.x, this.y, this.z);\n    }\n\n    toString(): string {\n        return `[${this.flat().join(\", \")}]`;\n    }\n\n    static One(value: number = 1): Vector3 {\n        return new Vector3(value, value, value);\n    }\n}\n\nexport { Vector3 };\n", "import { Matrix3 } from \"./Matrix3\";\nimport { Vector3 } from \"./Vector3\";\n\nclass Quaternion {\n    public readonly x: number;\n    public readonly y: number;\n    public readonly z: number;\n    public readonly w: number;\n\n    constructor(x: number = 0, y: number = 0, z: number = 0, w: number = 1) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n    }\n\n    equals(q: Quaternion): boolean {\n        if (this.x !== q.x) {\n            return false;\n        }\n        if (this.y !== q.y) {\n            return false;\n        }\n        if (this.z !== q.z) {\n            return false;\n        }\n        if (this.w !== q.w) {\n            return false;\n        }\n\n        return true;\n    }\n\n    normalize(): Quaternion {\n        const l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\n        return new Quaternion(this.x / l, this.y / l, this.z / l, this.w / l);\n    }\n\n    multiply(q: Quaternion): Quaternion {\n        const w1 = this.w,\n            x1 = this.x,\n            y1 = this.y,\n            z1 = this.z;\n        const w2 = q.w,\n            x2 = q.x,\n            y2 = q.y,\n            z2 = q.z;\n\n        return new Quaternion(\n            w1 * x2 + x1 * w2 + y1 * z2 - z1 * y2,\n            w1 * y2 - x1 * z2 + y1 * w2 + z1 * x2,\n            w1 * z2 + x1 * y2 - y1 * x2 + z1 * w2,\n            w1 * w2 - x1 * x2 - y1 * y2 - z1 * z2,\n        );\n    }\n\n    inverse(): Quaternion {\n        const l = this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n        return new Quaternion(-this.x / l, -this.y / l, -this.z / l, this.w / l);\n    }\n\n    apply(v: Vector3): Vector3 {\n        const vecQuat = new Quaternion(v.x, v.y, v.z, 0);\n        const conjugate = new Quaternion(-this.x, -this.y, -this.z, this.w);\n        const rotatedQuat = this.multiply(vecQuat).multiply(conjugate);\n        return new Vector3(rotatedQuat.x, rotatedQuat.y, rotatedQuat.z);\n    }\n\n    flat(): number[] {\n        return [this.x, this.y, this.z, this.w];\n    }\n\n    clone(): Quaternion {\n        return new Quaternion(this.x, this.y, this.z, this.w);\n    }\n\n    static FromEuler(e: Vector3): Quaternion {\n        const halfX = e.x / 2;\n        const halfY = e.y / 2;\n        const halfZ = e.z / 2;\n        const cy = Math.cos(halfY);\n        const sy = Math.sin(halfY);\n        const cp = Math.cos(halfX);\n        const sp = Math.sin(halfX);\n        const cz = Math.cos(halfZ);\n        const sz = Math.sin(halfZ);\n\n        const q = new Quaternion(\n            cy * sp * cz + sy * cp * sz,\n            sy * cp * cz - cy * sp * sz,\n            cy * cp * sz - sy * sp * cz,\n            cy * cp * cz + sy * sp * sz,\n        );\n        return q;\n    }\n\n    toEuler(): Vector3 {\n        const sinr_cosp = 2 * (this.w * this.x + this.y * this.z);\n        const cosr_cosp = 1 - 2 * (this.x * this.x + this.y * this.y);\n        const x = Math.atan2(sinr_cosp, cosr_cosp);\n\n        let y;\n        const sinp = 2 * (this.w * this.y - this.z * this.x);\n        if (Math.abs(sinp) >= 1) {\n            y = (Math.sign(sinp) * Math.PI) / 2;\n        } else {\n            y = Math.asin(sinp);\n        }\n\n        const siny_cosp = 2 * (this.w * this.z + this.x * this.y);\n        const cosy_cosp = 1 - 2 * (this.y * this.y + this.z * this.z);\n        const z = Math.atan2(siny_cosp, cosy_cosp);\n\n        return new Vector3(x, y, z);\n    }\n\n    static FromMatrix3(matrix: Matrix3): Quaternion {\n        const m = matrix.buffer;\n        const trace = m[0] + m[4] + m[8];\n        let x, y, z, w;\n        if (trace > 0) {\n            const s = 0.5 / Math.sqrt(trace + 1.0);\n            w = 0.25 / s;\n            x = (m[7] - m[5]) * s;\n            y = (m[2] - m[6]) * s;\n            z = (m[3] - m[1]) * s;\n        } else if (m[0] > m[4] && m[0] > m[8]) {\n            const s = 2.0 * Math.sqrt(1.0 + m[0] - m[4] - m[8]);\n            w = (m[7] - m[5]) / s;\n            x = 0.25 * s;\n            y = (m[1] + m[3]) / s;\n            z = (m[2] + m[6]) / s;\n        } else if (m[4] > m[8]) {\n            const s = 2.0 * Math.sqrt(1.0 + m[4] - m[0] - m[8]);\n            w = (m[2] - m[6]) / s;\n            x = (m[1] + m[3]) / s;\n            y = 0.25 * s;\n            z = (m[5] + m[7]) / s;\n        } else {\n            const s = 2.0 * Math.sqrt(1.0 + m[8] - m[0] - m[4]);\n            w = (m[3] - m[1]) / s;\n            x = (m[2] + m[6]) / s;\n            y = (m[5] + m[7]) / s;\n            z = 0.25 * s;\n        }\n        return new Quaternion(x, y, z, w);\n    }\n\n    static FromAxisAngle(axis: Vector3, angle: number): Quaternion {\n        const halfAngle = angle / 2;\n        const sin = Math.sin(halfAngle);\n        const cos = Math.cos(halfAngle);\n        return new Quaternion(axis.x * sin, axis.y * sin, axis.z * sin, cos);\n    }\n\n    static LookRotation(direction: Vector3): Quaternion {\n        const forward = new Vector3(0, 0, 1);\n        const dot = forward.dot(direction);\n\n        if (Math.abs(dot - -1.0) < 0.000001) {\n            return new Quaternion(0, 1, 0, Math.PI);\n        }\n        if (Math.abs(dot - 1.0) < 0.000001) {\n            return new Quaternion();\n        }\n\n        const rotAngle = Math.acos(dot);\n        const rotAxis = forward.cross(direction).normalize();\n        return Quaternion.FromAxisAngle(rotAxis, rotAngle);\n    }\n\n    toString(): string {\n        return `[${this.flat().join(\", \")}]`;\n    }\n}\n\nexport { Quaternion };\n", "class EventDispatcher {\n    addEventListener: (type: string, listener: (event: Event) => void) => void;\n    removeEventListener: (type: string, listener: (event: Event) => void) => void;\n    hasEventListener: (type: string, listener: (event: Event) => void) => boolean;\n    dispatchEvent: (event: Event) => void;\n\n    constructor() {\n        const listeners = new Map<string, Set<(event: Event) => void>>();\n\n        this.addEventListener = (type: string, listener: (event: Event) => void) => {\n            if (!listeners.has(type)) {\n                listeners.set(type, new Set());\n            }\n\n            listeners.get(type)!.add(listener);\n        };\n\n        this.removeEventListener = (type: string, listener: (event: Event) => void) => {\n            if (!listeners.has(type)) {\n                return;\n            }\n\n            listeners.get(type)!.delete(listener);\n        };\n\n        this.hasEventListener = (type: string, listener: (event: Event) => void) => {\n            if (!listeners.has(type)) {\n                return false;\n            }\n\n            return listeners.get(type)!.has(listener);\n        };\n\n        this.dispatchEvent = (event: Event) => {\n            if (!listeners.has(event.type)) {\n                return;\n            }\n\n            for (const listener of listeners.get(event.type)!) {\n                listener(event);\n            }\n        };\n    }\n}\n\nexport { EventDispatcher };\n", "import { Quaternion } from \"./Quaternion\";\nimport { Vector3 } from \"./Vector3\";\n\nclass Matrix4 {\n    public readonly buffer: number[];\n\n    // prettier-ignore\n    constructor(n11: number = 1, n12: number = 0, n13: number = 0, n14: number = 0, \n                n21: number = 0, n22: number = 1, n23: number = 0, n24: number = 0, \n                n31: number = 0, n32: number = 0, n33: number = 1, n34: number = 0, \n                n41: number = 0, n42: number = 0, n43: number = 0, n44: number = 1) {\n        this.buffer = [\n            n11, n12, n13, n14, \n            n21, n22, n23, n24, \n            n31, n32, n33, n34, \n            n41, n42, n43, n44\n        ];\n    }\n\n    equals(m: Matrix4): boolean {\n        if (this.buffer.length !== m.buffer.length) {\n            return false;\n        }\n        if (this.buffer === m.buffer) {\n            return true;\n        }\n        for (let i = 0; i < this.buffer.length; i++) {\n            if (this.buffer[i] !== m.buffer[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    multiply(m: Matrix4): Matrix4 {\n        const a = this.buffer;\n        const b = m.buffer;\n        return new Matrix4(\n            b[0] * a[0] + b[1] * a[4] + b[2] * a[8] + b[3] * a[12],\n            b[0] * a[1] + b[1] * a[5] + b[2] * a[9] + b[3] * a[13],\n            b[0] * a[2] + b[1] * a[6] + b[2] * a[10] + b[3] * a[14],\n            b[0] * a[3] + b[1] * a[7] + b[2] * a[11] + b[3] * a[15],\n            b[4] * a[0] + b[5] * a[4] + b[6] * a[8] + b[7] * a[12],\n            b[4] * a[1] + b[5] * a[5] + b[6] * a[9] + b[7] * a[13],\n            b[4] * a[2] + b[5] * a[6] + b[6] * a[10] + b[7] * a[14],\n            b[4] * a[3] + b[5] * a[7] + b[6] * a[11] + b[7] * a[15],\n            b[8] * a[0] + b[9] * a[4] + b[10] * a[8] + b[11] * a[12],\n            b[8] * a[1] + b[9] * a[5] + b[10] * a[9] + b[11] * a[13],\n            b[8] * a[2] + b[9] * a[6] + b[10] * a[10] + b[11] * a[14],\n            b[8] * a[3] + b[9] * a[7] + b[10] * a[11] + b[11] * a[15],\n            b[12] * a[0] + b[13] * a[4] + b[14] * a[8] + b[15] * a[12],\n            b[12] * a[1] + b[13] * a[5] + b[14] * a[9] + b[15] * a[13],\n            b[12] * a[2] + b[13] * a[6] + b[14] * a[10] + b[15] * a[14],\n            b[12] * a[3] + b[13] * a[7] + b[14] * a[11] + b[15] * a[15],\n        );\n    }\n\n    clone(): Matrix4 {\n        const e = this.buffer;\n        // prettier-ignore\n        return new Matrix4(\n            e[0], e[1], e[2], e[3], \n            e[4], e[5], e[6], e[7], \n            e[8], e[9], e[10], e[11], \n            e[12], e[13], e[14], e[15]\n        );\n    }\n\n    determinant(): number {\n        const e = this.buffer;\n        // prettier-ignore\n        return (\n            e[12] * e[9] * e[6] * e[3] - e[8] * e[13] * e[6] * e[3] - e[12] * e[5] * e[10] * e[3] + e[4] * e[13] * e[10] * e[3] +\n            e[8] * e[5] * e[14] * e[3] - e[4] * e[9] * e[14] * e[3] - e[12] * e[9] * e[2] * e[7] + e[8] * e[13] * e[2] * e[7] +\n            e[12] * e[1] * e[10] * e[7] - e[0] * e[13] * e[10] * e[7] - e[8] * e[1] * e[14] * e[7] + e[0] * e[9] * e[14] * e[7] +\n            e[12] * e[5] * e[2] * e[11] - e[4] * e[13] * e[2] * e[11] - e[12] * e[1] * e[6] * e[11] + e[0] * e[13] * e[6] * e[11] +\n            e[4] * e[1] * e[14] * e[11] - e[0] * e[5] * e[14] * e[11] - e[8] * e[5] * e[2] * e[15] + e[4] * e[9] * e[2] * e[15] +\n            e[8] * e[1] * e[6] * e[15] - e[0] * e[9] * e[6] * e[15] - e[4] * e[1] * e[10] * e[15] + e[0] * e[5] * e[10] * e[15]\n        );\n    }\n\n    invert(): Matrix4 {\n        const e = this.buffer;\n        const det = this.determinant();\n        if (det === 0) {\n            throw new Error(\"Matrix is not invertible.\");\n        }\n        const invDet = 1 / det;\n        // prettier-ignore\n        return new Matrix4(\n            invDet * (\n                e[5] * e[10] * e[15] - e[5] * e[11] * e[14] - e[9] * e[6] * e[15] + e[9] * e[7] * e[14] + e[13] * e[6] * e[11] - e[13] * e[7] * e[10]\n            ),\n            invDet * (\n                -e[1] * e[10] * e[15] + e[1] * e[11] * e[14] + e[9] * e[2] * e[15] - e[9] * e[3] * e[14] - e[13] * e[2] * e[11] + e[13] * e[3] * e[10]\n            ),\n            invDet * (\n                e[1] * e[6] * e[15] - e[1] * e[7] * e[14] - e[5] * e[2] * e[15] + e[5] * e[3] * e[14] + e[13] * e[2] * e[7] - e[13] * e[3] * e[6]\n            ),\n            invDet * (\n                -e[1] * e[6] * e[11] + e[1] * e[7] * e[10] + e[5] * e[2] * e[11] - e[5] * e[3] * e[10] - e[9] * e[2] * e[7] + e[9] * e[3] * e[6]\n            ),\n            invDet * (\n                -e[4] * e[10] * e[15] + e[4] * e[11] * e[14] + e[8] * e[6] * e[15] - e[8] * e[7] * e[14] - e[12] * e[6] * e[11] + e[12] * e[7] * e[10]\n            ),\n            invDet * (\n                e[0] * e[10] * e[15] - e[0] * e[11] * e[14] - e[8] * e[2] * e[15] + e[8] * e[3] * e[14] + e[12] * e[2] * e[11] - e[12] * e[3] * e[10]\n            ),\n            invDet * (\n                -e[0] * e[6] * e[15] + e[0] * e[7] * e[14] + e[4] * e[2] * e[15] - e[4] * e[3] * e[14] - e[12] * e[2] * e[7] + e[12] * e[3] * e[6]\n            ),\n            invDet * (\n                e[0] * e[6] * e[11] - e[0] * e[7] * e[10] - e[4] * e[2] * e[11] + e[4] * e[3] * e[10] + e[8] * e[2] * e[7] - e[8] * e[3] * e[6]\n            ),\n            invDet * (\n                e[4] * e[9] * e[15] - e[4] * e[11] * e[13] - e[8] * e[5] * e[15] + e[8] * e[7] * e[13] + e[12] * e[5] * e[11] - e[12] * e[7] * e[9]\n            ),\n            invDet * (\n                -e[0] * e[9] * e[15] + e[0] * e[11] * e[13] + e[8] * e[1] * e[15] - e[8] * e[3] * e[13] - e[12] * e[1] * e[11] + e[12] * e[3] * e[9]\n            ),\n            invDet * (\n                e[0] * e[5] * e[15] - e[0] * e[7] * e[13] - e[4] * e[1] * e[15] + e[4] * e[3] * e[13] + e[12] * e[1] * e[7] - e[12] * e[3] * e[5]\n            ),\n            invDet * (\n                -e[0] * e[5] * e[11] + e[0] * e[7] * e[9] + e[4] * e[1] * e[11] - e[4] * e[3] * e[9] - e[8] * e[1] * e[7] + e[8] * e[3] * e[5]\n            ),\n            invDet * (\n                -e[4] * e[9] * e[14] + e[4] * e[10] * e[13] + e[8] * e[5] * e[14] - e[8] * e[6] * e[13] - e[12] * e[5] * e[10] + e[12] * e[6] * e[9]\n            ),\n            invDet * (\n                e[0] * e[9] * e[14] - e[0] * e[10] * e[13] - e[8] * e[1] * e[14] + e[8] * e[2] * e[13] + e[12] * e[1] * e[10] - e[12] * e[2] * e[9]\n            ),\n            invDet * (\n                -e[0] * e[5] * e[14] + e[0] * e[6] * e[13] + e[4] * e[1] * e[14] - e[4] * e[2] * e[13] - e[12] * e[1] * e[6] + e[12] * e[2] * e[5]\n            ),\n            invDet * (\n                e[0] * e[5] * e[10] - e[0] * e[6] * e[9] - e[4] * e[1] * e[10] + e[4] * e[2] * e[9] + e[8] * e[1] * e[6] - e[8] * e[2] * e[5]\n            ),\n        );\n    }\n\n    static Compose(position: Vector3, rotation: Quaternion, scale: Vector3): Matrix4 {\n        const x = rotation.x,\n            y = rotation.y,\n            z = rotation.z,\n            w = rotation.w;\n        const x2 = x + x,\n            y2 = y + y,\n            z2 = z + z;\n        const xx = x * x2,\n            xy = x * y2,\n            xz = x * z2;\n        const yy = y * y2,\n            yz = y * z2,\n            zz = z * z2;\n        const wx = w * x2,\n            wy = w * y2,\n            wz = w * z2;\n        const sx = scale.x,\n            sy = scale.y,\n            sz = scale.z;\n        // prettier-ignore\n        return new Matrix4(\n            (1 - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n            (xy - wz) * sy, (1 - (xx + zz)) * sy, (yz + wx) * sy, 0,\n            (xz + wy) * sz, (yz - wx) * sz, (1 - (xx + yy)) * sz, 0,\n            position.x, position.y, position.z, 1\n        );\n    }\n\n    toString(): string {\n        return `[${this.buffer.join(\", \")}]`;\n    }\n}\n\nexport { Matrix4 };\n", "import { Object3D } from \"../core/Object3D\";\n\nclass ObjectAddedEvent extends Event {\n    constructor(public object: Object3D) {\n        super(\"objectAdded\");\n    }\n}\n\nclass ObjectRemovedEvent extends Event {\n    constructor(public object: Object3D) {\n        super(\"objectRemoved\");\n    }\n}\n\nclass ObjectChangedEvent extends Event {\n    constructor(public object: Object3D) {\n        super(\"objectChanged\");\n    }\n}\n\nexport { ObjectAddedEvent, ObjectRemovedEvent, ObjectChangedEvent };\n", "import { Vector3 } from \"../math/Vector3\";\nimport { Quaternion } from \"../math/Quaternion\";\nimport { EventDispatcher } from \"../events/EventDispatcher\";\nimport { Matrix4 } from \"../math/Matrix4\";\nimport { ObjectChangedEvent } from \"../events/Events\";\n\nabstract class Object3D extends EventDispatcher {\n    public positionChanged: boolean = false;\n    public rotationChanged: boolean = false;\n    public scaleChanged: boolean = false;\n\n    protected _position: Vector3 = new Vector3();\n    protected _rotation: Quaternion = new Quaternion();\n    protected _scale: Vector3 = new Vector3(1, 1, 1);\n    protected _transform: Matrix4 = new Matrix4();\n\n    protected _changeEvent = new ObjectChangedEvent(this);\n\n    update: () => void;\n    applyPosition: () => void;\n    applyRotation: () => void;\n    applyScale: () => void;\n    raiseChangeEvent: () => void;\n\n    constructor() {\n        super();\n\n        this.update = () => {};\n\n        this.applyPosition = () => {\n            this.position = new Vector3();\n        };\n\n        this.applyRotation = () => {\n            this.rotation = new Quaternion();\n        };\n\n        this.applyScale = () => {\n            this.scale = new Vector3(1, 1, 1);\n        };\n\n        this.raiseChangeEvent = () => {\n            this.dispatchEvent(this._changeEvent);\n        };\n    }\n\n    protected _updateMatrix() {\n        this._transform = Matrix4.Compose(this._position, this._rotation, this._scale);\n    }\n\n    get position() {\n        return this._position;\n    }\n\n    set position(position: Vector3) {\n        if (!this._position.equals(position)) {\n            this._position = position;\n            this.positionChanged = true;\n            this._updateMatrix();\n            this.dispatchEvent(this._changeEvent);\n        }\n    }\n\n    get rotation() {\n        return this._rotation;\n    }\n\n    set rotation(rotation: Quaternion) {\n        if (!this._rotation.equals(rotation)) {\n            this._rotation = rotation;\n            this.rotationChanged = true;\n            this._updateMatrix();\n            this.dispatchEvent(this._changeEvent);\n        }\n    }\n\n    get scale() {\n        return this._scale;\n    }\n\n    set scale(scale: Vector3) {\n        if (!this._scale.equals(scale)) {\n            this._scale = scale;\n            this.scaleChanged = true;\n            this._updateMatrix();\n            this.dispatchEvent(this._changeEvent);\n        }\n    }\n\n    get forward() {\n        let forward = new Vector3(0, 0, 1);\n        forward = this.rotation.apply(forward);\n        return forward;\n    }\n\n    get transform() {\n        return this._transform;\n    }\n}\n\nexport { Object3D };\n", "import { Quaternion } from \"./Quaternion\";\nimport type { Vector3 } from \"./Vector3\";\n\nclass Matrix3 {\n    public readonly buffer: number[];\n\n    // prettier-ignore\n    constructor(n11: number = 1, n12: number = 0, n13: number = 0,\n                n21: number = 0, n22: number = 1, n23: number = 0,\n                n31: number = 0, n32: number = 0, n33: number = 1) {\n        this.buffer = [\n            n11, n12, n13,\n            n21, n22, n23,\n            n31, n32, n33\n        ];\n    }\n\n    equals(m: Matrix3): boolean {\n        if (this.buffer.length !== m.buffer.length) {\n            return false;\n        }\n        if (this.buffer === m.buffer) {\n            return true;\n        }\n        for (let i = 0; i < this.buffer.length; i++) {\n            if (this.buffer[i] !== m.buffer[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    multiply(v: Matrix3): Matrix3 {\n        const a = this.buffer;\n        const b = v.buffer;\n        return new Matrix3(\n            b[0] * a[0] + b[3] * a[1] + b[6] * a[2],\n            b[1] * a[0] + b[4] * a[1] + b[7] * a[2],\n            b[2] * a[0] + b[5] * a[1] + b[8] * a[2],\n            b[0] * a[3] + b[3] * a[4] + b[6] * a[5],\n            b[1] * a[3] + b[4] * a[4] + b[7] * a[5],\n            b[2] * a[3] + b[5] * a[4] + b[8] * a[5],\n            b[0] * a[6] + b[3] * a[7] + b[6] * a[8],\n            b[1] * a[6] + b[4] * a[7] + b[7] * a[8],\n            b[2] * a[6] + b[5] * a[7] + b[8] * a[8],\n        );\n    }\n\n    clone(): Matrix3 {\n        const e = this.buffer;\n        // prettier-ignore\n        return new Matrix3(\n            e[0], e[1], e[2],\n            e[3], e[4], e[5],\n            e[6], e[7], e[8]\n        );\n    }\n\n    static Eye(v: number = 1): Matrix3 {\n        return new Matrix3(v, 0, 0, 0, v, 0, 0, 0, v);\n    }\n\n    static Diagonal(v: Vector3): Matrix3 {\n        return new Matrix3(v.x, 0, 0, 0, v.y, 0, 0, 0, v.z);\n    }\n\n    static RotationFromQuaternion(q: Quaternion): Matrix3 {\n        const matrix = new Matrix3(\n            1 - 2 * q.y * q.y - 2 * q.z * q.z,\n            2 * q.x * q.y - 2 * q.z * q.w,\n            2 * q.x * q.z + 2 * q.y * q.w,\n            2 * q.x * q.y + 2 * q.z * q.w,\n            1 - 2 * q.x * q.x - 2 * q.z * q.z,\n            2 * q.y * q.z - 2 * q.x * q.w,\n            2 * q.x * q.z - 2 * q.y * q.w,\n            2 * q.y * q.z + 2 * q.x * q.w,\n            1 - 2 * q.x * q.x - 2 * q.y * q.y,\n        );\n        return matrix;\n    }\n\n    static RotationFromEuler(m: Vector3): Matrix3 {\n        const cx = Math.cos(m.x);\n        const sx = Math.sin(m.x);\n        const cy = Math.cos(m.y);\n        const sy = Math.sin(m.y);\n        const cz = Math.cos(m.z);\n        const sz = Math.sin(m.z);\n\n        const rotationMatrix = [\n            cy * cz + sy * sx * sz,\n            -cy * sz + sy * sx * cz,\n            sy * cx,\n            cx * sz,\n            cx * cz,\n            -sx,\n            -sy * cz + cy * sx * sz,\n            sy * sz + cy * sx * cz,\n            cy * cx,\n        ];\n\n        return new Matrix3(...rotationMatrix);\n    }\n\n    toString(): string {\n        return `[${this.buffer.join(\", \")}]`;\n    }\n}\n\nexport { Matrix3 };\n", "import { Vector3 } from \"../math/Vector3\";\nimport { Quaternion } from \"../math/Quaternion\";\nimport { Matrix3 } from \"../math/Matrix3\";\n\nclass SplatData {\n    static RowLength = 3 * 4 + 3 * 4 + 4 + 4;\n\n    public changed = false;\n    public detached = false;\n\n    private _vertexCount: number;\n    private _positions: Float32Array;\n    private _rotations: Float32Array;\n    private _scales: Float32Array;\n    private _colors: Uint8Array;\n    private _selection: Uint8Array;\n\n    translate: (translation: Vector3) => void;\n    rotate: (rotation: Quaternion) => void;\n    scale: (scale: Vector3) => void;\n    serialize: () => Uint8Array;\n    reattach: (\n        positions: ArrayBufferLike,\n        rotations: ArrayBufferLike,\n        scales: ArrayBufferLike,\n        colors: ArrayBufferLike,\n        selection: ArrayBufferLike,\n    ) => void;\n\n    constructor(\n        vertexCount: number = 0,\n        positions: Float32Array | null = null,\n        rotations: Float32Array | null = null,\n        scales: Float32Array | null = null,\n        colors: Uint8Array | null = null,\n    ) {\n        this._vertexCount = vertexCount;\n        this._positions = positions || new Float32Array(0);\n        this._rotations = rotations || new Float32Array(0);\n        this._scales = scales || new Float32Array(0);\n        this._colors = colors || new Uint8Array(0);\n        this._selection = new Uint8Array(this.vertexCount);\n\n        this.translate = (translation: Vector3) => {\n            for (let i = 0; i < this.vertexCount; i++) {\n                this.positions[3 * i + 0] += translation.x;\n                this.positions[3 * i + 1] += translation.y;\n                this.positions[3 * i + 2] += translation.z;\n            }\n\n            this.changed = true;\n        };\n\n        this.rotate = (rotation: Quaternion) => {\n            const R = Matrix3.RotationFromQuaternion(rotation).buffer;\n            for (let i = 0; i < this.vertexCount; i++) {\n                const x = this.positions[3 * i + 0];\n                const y = this.positions[3 * i + 1];\n                const z = this.positions[3 * i + 2];\n\n                this.positions[3 * i + 0] = R[0] * x + R[1] * y + R[2] * z;\n                this.positions[3 * i + 1] = R[3] * x + R[4] * y + R[5] * z;\n                this.positions[3 * i + 2] = R[6] * x + R[7] * y + R[8] * z;\n\n                const currentRotation = new Quaternion(\n                    this.rotations[4 * i + 1],\n                    this.rotations[4 * i + 2],\n                    this.rotations[4 * i + 3],\n                    this.rotations[4 * i + 0],\n                );\n\n                const newRot = rotation.multiply(currentRotation);\n                this.rotations[4 * i + 1] = newRot.x;\n                this.rotations[4 * i + 2] = newRot.y;\n                this.rotations[4 * i + 3] = newRot.z;\n                this.rotations[4 * i + 0] = newRot.w;\n            }\n\n            this.changed = true;\n        };\n\n        this.scale = (scale: Vector3) => {\n            for (let i = 0; i < this.vertexCount; i++) {\n                this.positions[3 * i + 0] *= scale.x;\n                this.positions[3 * i + 1] *= scale.y;\n                this.positions[3 * i + 2] *= scale.z;\n\n                this.scales[3 * i + 0] *= scale.x;\n                this.scales[3 * i + 1] *= scale.y;\n                this.scales[3 * i + 2] *= scale.z;\n            }\n\n            this.changed = true;\n        };\n\n        this.serialize = () => {\n            const data = new Uint8Array(this.vertexCount * SplatData.RowLength);\n\n            const f_buffer = new Float32Array(data.buffer);\n            const u_buffer = new Uint8Array(data.buffer);\n\n            for (let i = 0; i < this.vertexCount; i++) {\n                f_buffer[8 * i + 0] = this.positions[3 * i + 0];\n                f_buffer[8 * i + 1] = this.positions[3 * i + 1];\n                f_buffer[8 * i + 2] = this.positions[3 * i + 2];\n\n                u_buffer[32 * i + 24 + 0] = this.colors[4 * i + 0];\n                u_buffer[32 * i + 24 + 1] = this.colors[4 * i + 1];\n                u_buffer[32 * i + 24 + 2] = this.colors[4 * i + 2];\n                u_buffer[32 * i + 24 + 3] = this.colors[4 * i + 3];\n\n                f_buffer[8 * i + 3 + 0] = this.scales[3 * i + 0];\n                f_buffer[8 * i + 3 + 1] = this.scales[3 * i + 1];\n                f_buffer[8 * i + 3 + 2] = this.scales[3 * i + 2];\n\n                u_buffer[32 * i + 28 + 0] = (this.rotations[4 * i + 0] * 128 + 128) & 0xff;\n                u_buffer[32 * i + 28 + 1] = (this.rotations[4 * i + 1] * 128 + 128) & 0xff;\n                u_buffer[32 * i + 28 + 2] = (this.rotations[4 * i + 2] * 128 + 128) & 0xff;\n                u_buffer[32 * i + 28 + 3] = (this.rotations[4 * i + 3] * 128 + 128) & 0xff;\n            }\n\n            return data;\n        };\n\n        this.reattach = (\n            positions: ArrayBufferLike,\n            rotations: ArrayBufferLike,\n            scales: ArrayBufferLike,\n            colors: ArrayBufferLike,\n            selection: ArrayBufferLike,\n        ) => {\n            console.assert(\n                positions.byteLength === this.vertexCount * 3 * 4,\n                `Expected ${this.vertexCount * 3 * 4} bytes, got ${positions.byteLength} bytes`,\n            );\n            this._positions = new Float32Array(positions);\n            this._rotations = new Float32Array(rotations);\n            this._scales = new Float32Array(scales);\n            this._colors = new Uint8Array(colors);\n            this._selection = new Uint8Array(selection);\n            this.detached = false;\n        };\n    }\n\n    static Deserialize(data: Uint8Array): SplatData {\n        const vertexCount = data.length / SplatData.RowLength;\n        const positions = new Float32Array(3 * vertexCount);\n        const rotations = new Float32Array(4 * vertexCount);\n        const scales = new Float32Array(3 * vertexCount);\n        const colors = new Uint8Array(4 * vertexCount);\n\n        const f_buffer = new Float32Array(data.buffer);\n        const u_buffer = new Uint8Array(data.buffer);\n\n        for (let i = 0; i < vertexCount; i++) {\n            positions[3 * i + 0] = f_buffer[8 * i + 0];\n            positions[3 * i + 1] = f_buffer[8 * i + 1];\n            positions[3 * i + 2] = f_buffer[8 * i + 2];\n\n            rotations[4 * i + 0] = (u_buffer[32 * i + 28 + 0] - 128) / 128;\n            rotations[4 * i + 1] = (u_buffer[32 * i + 28 + 1] - 128) / 128;\n            rotations[4 * i + 2] = (u_buffer[32 * i + 28 + 2] - 128) / 128;\n            rotations[4 * i + 3] = (u_buffer[32 * i + 28 + 3] - 128) / 128;\n\n            scales[3 * i + 0] = f_buffer[8 * i + 3 + 0];\n            scales[3 * i + 1] = f_buffer[8 * i + 3 + 1];\n            scales[3 * i + 2] = f_buffer[8 * i + 3 + 2];\n\n            colors[4 * i + 0] = u_buffer[32 * i + 24 + 0];\n            colors[4 * i + 1] = u_buffer[32 * i + 24 + 1];\n            colors[4 * i + 2] = u_buffer[32 * i + 24 + 2];\n            colors[4 * i + 3] = u_buffer[32 * i + 24 + 3];\n        }\n\n        return new SplatData(vertexCount, positions, rotations, scales, colors);\n    }\n\n    get vertexCount() {\n        return this._vertexCount;\n    }\n\n    get positions() {\n        return this._positions;\n    }\n\n    get rotations() {\n        return this._rotations;\n    }\n\n    get scales() {\n        return this._scales;\n    }\n\n    get colors() {\n        return this._colors;\n    }\n\n    get selection() {\n        return this._selection;\n    }\n}\n\nexport { SplatData };\n", "class SplatvData {\n    static RowLength = 64;\n\n    private _vertexCount: number;\n    private _positions: Float32Array;\n    private _data: Uint32Array;\n    private _width: number;\n    private _height: number;\n\n    serialize: () => Uint8Array;\n\n    constructor(vertexCount: number, positions: Float32Array, data: Uint32Array, width: number, height: number) {\n        this._vertexCount = vertexCount;\n        this._positions = positions;\n        this._data = data;\n        this._width = width;\n        this._height = height;\n\n        this.serialize = () => {\n            return new Uint8Array(this._data.buffer);\n        };\n    }\n\n    static Deserialize(data: Uint8Array, width: number, height: number): SplatvData {\n        const buffer = new Uint32Array(data.buffer);\n        const f_buffer = new Float32Array(data.buffer);\n        const vertexCount = Math.floor(f_buffer.byteLength / this.RowLength);\n        const positions = new Float32Array(vertexCount * 3);\n        for (let i = 0; i < vertexCount; i++) {\n            positions[3 * i + 0] = f_buffer[16 * i + 0];\n            positions[3 * i + 1] = f_buffer[16 * i + 1];\n            positions[3 * i + 2] = f_buffer[16 * i + 2];\n            positions[3 * i + 0] = f_buffer[16 * i + 3];\n        }\n        return new SplatvData(vertexCount, positions, buffer, width, height);\n    }\n\n    get vertexCount() {\n        return this._vertexCount;\n    }\n\n    get positions() {\n        return this._positions;\n    }\n\n    get data() {\n        return this._data;\n    }\n\n    get width() {\n        return this._width;\n    }\n\n    get height() {\n        return this._height;\n    }\n}\n\nexport { SplatvData };\n", "import { Quaternion } from \"../math/Quaternion\";\n\nclass Converter {\n    public static SH_C0 = 0.28209479177387814;\n\n    public static SplatToPLY(buffer: ArrayBuffer, vertexCount: number): ArrayBuffer {\n        let header = \"ply\\nformat binary_little_endian 1.0\\n\";\n        header += `element vertex ${vertexCount}\\n`;\n\n        const properties = [\"x\", \"y\", \"z\", \"nx\", \"ny\", \"nz\", \"f_dc_0\", \"f_dc_1\", \"f_dc_2\"];\n        for (let i = 0; i < 45; i++) {\n            properties.push(`f_rest_${i}`);\n        }\n        properties.push(\"opacity\");\n        properties.push(\"scale_0\");\n        properties.push(\"scale_1\");\n        properties.push(\"scale_2\");\n        properties.push(\"rot_0\");\n        properties.push(\"rot_1\");\n        properties.push(\"rot_2\");\n        properties.push(\"rot_3\");\n\n        for (const property of properties) {\n            header += `property float ${property}\\n`;\n        }\n        header += \"end_header\\n\";\n\n        const headerBuffer = new TextEncoder().encode(header);\n\n        const plyRowLength = 4 * 3 + 4 * 3 + 4 * 3 + 4 * 45 + 4 + 4 * 3 + 4 * 4;\n        const plyLength = vertexCount * plyRowLength;\n        const output = new DataView(new ArrayBuffer(headerBuffer.length + plyLength));\n        new Uint8Array(output.buffer).set(headerBuffer, 0);\n\n        const f_buffer = new Float32Array(buffer);\n        const u_buffer = new Uint8Array(buffer);\n\n        const offset = headerBuffer.length;\n        const f_dc_offset = 4 * 3 + 4 * 3;\n        const opacity_offset = f_dc_offset + 4 * 3 + 4 * 45;\n        const scale_offset = opacity_offset + 4;\n        const rot_offset = scale_offset + 4 * 3;\n        for (let i = 0; i < vertexCount; i++) {\n            const pos0 = f_buffer[8 * i + 0];\n            const pos1 = f_buffer[8 * i + 1];\n            const pos2 = f_buffer[8 * i + 2];\n\n            const f_dc_0 = (u_buffer[32 * i + 24 + 0] / 255 - 0.5) / this.SH_C0;\n            const f_dc_1 = (u_buffer[32 * i + 24 + 1] / 255 - 0.5) / this.SH_C0;\n            const f_dc_2 = (u_buffer[32 * i + 24 + 2] / 255 - 0.5) / this.SH_C0;\n\n            const alpha = u_buffer[32 * i + 24 + 3] / 255;\n            const opacity = Math.log(alpha / (1 - alpha));\n\n            const scale0 = Math.log(f_buffer[8 * i + 3 + 0]);\n            const scale1 = Math.log(f_buffer[8 * i + 3 + 1]);\n            const scale2 = Math.log(f_buffer[8 * i + 3 + 2]);\n\n            let q = new Quaternion(\n                (u_buffer[32 * i + 28 + 1] - 128) / 128,\n                (u_buffer[32 * i + 28 + 2] - 128) / 128,\n                (u_buffer[32 * i + 28 + 3] - 128) / 128,\n                (u_buffer[32 * i + 28 + 0] - 128) / 128,\n            );\n            q = q.normalize();\n\n            const rot0 = q.w;\n            const rot1 = q.x;\n            const rot2 = q.y;\n            const rot3 = q.z;\n\n            output.setFloat32(offset + plyRowLength * i + 0, pos0, true);\n            output.setFloat32(offset + plyRowLength * i + 4, pos1, true);\n            output.setFloat32(offset + plyRowLength * i + 8, pos2, true);\n\n            output.setFloat32(offset + plyRowLength * i + f_dc_offset + 0, f_dc_0, true);\n            output.setFloat32(offset + plyRowLength * i + f_dc_offset + 4, f_dc_1, true);\n            output.setFloat32(offset + plyRowLength * i + f_dc_offset + 8, f_dc_2, true);\n\n            output.setFloat32(offset + plyRowLength * i + opacity_offset, opacity, true);\n\n            output.setFloat32(offset + plyRowLength * i + scale_offset + 0, scale0, true);\n            output.setFloat32(offset + plyRowLength * i + scale_offset + 4, scale1, true);\n            output.setFloat32(offset + plyRowLength * i + scale_offset + 8, scale2, true);\n\n            output.setFloat32(offset + plyRowLength * i + rot_offset + 0, rot0, true);\n            output.setFloat32(offset + plyRowLength * i + rot_offset + 4, rot1, true);\n            output.setFloat32(offset + plyRowLength * i + rot_offset + 8, rot2, true);\n            output.setFloat32(offset + plyRowLength * i + rot_offset + 12, rot3, true);\n        }\n\n        return output.buffer;\n    }\n}\n\nexport { Converter };\n", "import { Vector3 } from \"./Vector3\";\n\nclass Box3 {\n    constructor(\n        public min: Vector3,\n        public max: Vector3,\n    ) {}\n\n    public contains(point: Vector3) {\n        return (\n            point.x >= this.min.x &&\n            point.x <= this.max.x &&\n            point.y >= this.min.y &&\n            point.y <= this.max.y &&\n            point.z >= this.min.z &&\n            point.z <= this.max.z\n        );\n    }\n\n    public intersects(box: Box3) {\n        return (\n            this.max.x >= box.min.x &&\n            this.min.x <= box.max.x &&\n            this.max.y >= box.min.y &&\n            this.min.y <= box.max.y &&\n            this.max.z >= box.min.z &&\n            this.min.z <= box.max.z\n        );\n    }\n\n    public size() {\n        return this.max.subtract(this.min);\n    }\n\n    public center() {\n        return this.min.add(this.max).divide(2);\n    }\n\n    public expand(point: Vector3) {\n        this.min = this.min.min(point);\n        this.max = this.max.max(point);\n    }\n\n    public permute() {\n        const min = this.min;\n        const max = this.max;\n        this.min = new Vector3(Math.min(min.x, max.x), Math.min(min.y, max.y), Math.min(min.z, max.z));\n        this.max = new Vector3(Math.max(min.x, max.x), Math.max(min.y, max.y), Math.max(min.z, max.z));\n    }\n}\n\nexport { Box3 };\n", "import { SplatData } from \"./SplatData\";\nimport { Object3D } from \"../core/Object3D\";\nimport { Vector3 } from \"../math/Vector3\";\nimport { Quaternion } from \"../math/Quaternion\";\nimport { Converter } from \"../utils/Converter\";\nimport { Matrix4 } from \"../math/Matrix4\";\nimport { Box3 } from \"../math/Box3\";\n\nclass Splat extends Object3D {\n    public selectedChanged: boolean = false;\n    public colorTransformChanged: boolean = false;\n\n    private _data: SplatData;\n    private _selected: boolean = false;\n    private _colorTransforms: Array<Matrix4> = [];\n    private _colorTransformsMap: Map<number, number> = new Map();\n    private _bounds: Box3;\n\n    recalculateBounds: () => void;\n\n    constructor(splat: SplatData | undefined = undefined) {\n        super();\n\n        this._data = splat || new SplatData();\n        this._bounds = new Box3(\n            new Vector3(Infinity, Infinity, Infinity),\n            new Vector3(-Infinity, -Infinity, -Infinity),\n        );\n\n        this.recalculateBounds = () => {\n            this._bounds = new Box3(\n                new Vector3(Infinity, Infinity, Infinity),\n                new Vector3(-Infinity, -Infinity, -Infinity),\n            );\n            for (let i = 0; i < this._data.vertexCount; i++) {\n                this._bounds.expand(\n                    new Vector3(\n                        this._data.positions[3 * i],\n                        this._data.positions[3 * i + 1],\n                        this._data.positions[3 * i + 2],\n                    ),\n                );\n            }\n        };\n\n        this.applyPosition = () => {\n            this.data.translate(this.position);\n            this.position = new Vector3();\n        };\n\n        this.applyRotation = () => {\n            this.data.rotate(this.rotation);\n            this.rotation = new Quaternion();\n        };\n\n        this.applyScale = () => {\n            this.data.scale(this.scale);\n            this.scale = new Vector3(1, 1, 1);\n        };\n\n        this.recalculateBounds();\n    }\n\n    saveToFile(name: string | null = null, format: string | null = null) {\n        if (!document) return;\n\n        if (!format) {\n            format = \"splat\";\n        } else if (format !== \"splat\" && format !== \"ply\") {\n            throw new Error(\"Invalid format. Must be 'splat' or 'ply'\");\n        }\n\n        if (!name) {\n            const now = new Date();\n            name = `splat-${now.getFullYear()}-${now.getMonth() + 1}-${now.getDate()}.${format}`;\n        }\n\n        this.applyRotation();\n        this.applyScale();\n        this.applyPosition();\n\n        const data = this.data.serialize();\n        let blob;\n        if (format === \"ply\") {\n            const plyData = Converter.SplatToPLY(data.buffer, this.data.vertexCount);\n            blob = new Blob([plyData], { type: \"application/octet-stream\" });\n        } else {\n            blob = new Blob([data.buffer], { type: \"application/octet-stream\" });\n        }\n\n        const link = document.createElement(\"a\");\n        link.download = name;\n        link.href = URL.createObjectURL(blob);\n        link.click();\n    }\n\n    get data() {\n        return this._data;\n    }\n\n    get selected() {\n        return this._selected;\n    }\n\n    set selected(selected: boolean) {\n        if (this._selected !== selected) {\n            this._selected = selected;\n            this.selectedChanged = true;\n            this.dispatchEvent(this._changeEvent);\n        }\n    }\n\n    get colorTransforms() {\n        return this._colorTransforms;\n    }\n\n    get colorTransformsMap() {\n        return this._colorTransformsMap;\n    }\n\n    get bounds() {\n        let center = this._bounds.center();\n        center = center.add(this.position);\n\n        let size = this._bounds.size();\n        size = size.multiply(this.scale);\n\n        return new Box3(center.subtract(size.divide(2)), center.add(size.divide(2)));\n    }\n}\n\nexport { Splat };\n", "import { Object3D } from \"../core/Object3D\";\nimport { SplatvData } from \"./SplatvData\";\n\nclass Splatv extends Object3D {\n    private _data: SplatvData;\n\n    constructor(splat: SplatvData) {\n        super();\n\n        this._data = splat;\n    }\n\n    get data() {\n        return this._data;\n    }\n}\n\nexport { Splatv };\n", "import { Quaternion } from \"../math/Quaternion\";\nimport { Matrix3 } from \"../math/Matrix3\";\nimport { Matrix4 } from \"../math/Matrix4\";\nimport { Vector3 } from \"../math/Vector3\";\n\nclass CameraData {\n    private _fx: number = 1132;\n    private _fy: number = 1132;\n    private _near: number = 0.1;\n    private _far: number = 100;\n\n    private _width: number = 512;\n    private _height: number = 512;\n\n    private _projectionMatrix: Matrix4 = new Matrix4();\n    private _viewMatrix: Matrix4 = new Matrix4();\n    private _viewProj: Matrix4 = new Matrix4();\n\n    update: (position: Vector3, rotation: Quaternion) => void;\n    setSize: (width: number, height: number) => void;\n\n    private _updateProjectionMatrix: () => void;\n\n    constructor() {\n        this._updateProjectionMatrix = () => {\n            // prettier-ignore\n            this._projectionMatrix = new Matrix4(\n                2 * this.fx / this.width, 0, 0, 0,\n                0, -2 * this.fy / this.height, 0, 0,\n                0, 0, this.far / (this.far - this.near), 1,\n                0, 0, -(this.far * this.near) / (this.far - this.near), 0\n            );\n\n            this._viewProj = this.projectionMatrix.multiply(this.viewMatrix);\n        };\n\n        this.update = (position: Vector3, rotation: Quaternion) => {\n            const R = Matrix3.RotationFromQuaternion(rotation).buffer;\n            const t = position.flat();\n\n            // prettier-ignore\n            this._viewMatrix = new Matrix4(\n                R[0], R[1], R[2], 0,\n                R[3], R[4], R[5], 0,\n                R[6], R[7], R[8], 0,\n                -t[0] * R[0] - t[1] * R[3] - t[2] * R[6],\n                -t[0] * R[1] - t[1] * R[4] - t[2] * R[7],\n                -t[0] * R[2] - t[1] * R[5] - t[2] * R[8],\n                1,\n            );\n\n            this._viewProj = this.projectionMatrix.multiply(this.viewMatrix);\n        };\n\n        this.setSize = (width: number, height: number) => {\n            this._width = width;\n            this._height = height;\n            this._updateProjectionMatrix();\n        };\n    }\n\n    get fx() {\n        return this._fx;\n    }\n\n    set fx(fx: number) {\n        if (this._fx !== fx) {\n            this._fx = fx;\n            this._updateProjectionMatrix();\n        }\n    }\n\n    get fy() {\n        return this._fy;\n    }\n\n    set fy(fy: number) {\n        if (this._fy !== fy) {\n            this._fy = fy;\n            this._updateProjectionMatrix();\n        }\n    }\n\n    get near() {\n        return this._near;\n    }\n\n    set near(near: number) {\n        if (this._near !== near) {\n            this._near = near;\n            this._updateProjectionMatrix();\n        }\n    }\n\n    get far() {\n        return this._far;\n    }\n\n    set far(far: number) {\n        if (this._far !== far) {\n            this._far = far;\n            this._updateProjectionMatrix();\n        }\n    }\n\n    get width() {\n        return this._width;\n    }\n\n    get height() {\n        return this._height;\n    }\n\n    get projectionMatrix() {\n        return this._projectionMatrix;\n    }\n\n    get viewMatrix() {\n        return this._viewMatrix;\n    }\n\n    get viewProj() {\n        return this._viewProj;\n    }\n}\n\nexport { CameraData };\n", "import { Matrix4 } from \"./Matrix4\";\n\nclass Vector4 {\n    public readonly x: number;\n    public readonly y: number;\n    public readonly z: number;\n    public readonly w: number;\n\n    constructor(x: number = 0, y: number = 0, z: number = 0, w: number = 0) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n    }\n\n    equals(v: Vector4): boolean {\n        if (this.x !== v.x) {\n            return false;\n        }\n        if (this.y !== v.y) {\n            return false;\n        }\n        if (this.z !== v.z) {\n            return false;\n        }\n        if (this.w !== v.w) {\n            return false;\n        }\n\n        return true;\n    }\n\n    add(v: number): Vector4;\n    add(v: Vector4): Vector4;\n    add(v: number | Vector4): Vector4 {\n        if (typeof v === \"number\") {\n            return new Vector4(this.x + v, this.y + v, this.z + v, this.w + v);\n        } else {\n            return new Vector4(this.x + v.x, this.y + v.y, this.z + v.z, this.w + v.w);\n        }\n    }\n\n    subtract(v: number): Vector4;\n    subtract(v: Vector4): Vector4;\n    subtract(v: number | Vector4): Vector4 {\n        if (typeof v === \"number\") {\n            return new Vector4(this.x - v, this.y - v, this.z - v, this.w - v);\n        } else {\n            return new Vector4(this.x - v.x, this.y - v.y, this.z - v.z, this.w - v.w);\n        }\n    }\n\n    multiply(v: number): Vector4;\n    multiply(v: Vector4): Vector4;\n    multiply(v: Matrix4): Vector4;\n    multiply(v: number | Vector4 | Matrix4): Vector4 {\n        if (typeof v === \"number\") {\n            return new Vector4(this.x * v, this.y * v, this.z * v, this.w * v);\n        } else if (v instanceof Vector4) {\n            return new Vector4(this.x * v.x, this.y * v.y, this.z * v.z, this.w * v.w);\n        } else {\n            return new Vector4(\n                this.x * v.buffer[0] + this.y * v.buffer[4] + this.z * v.buffer[8] + this.w * v.buffer[12],\n                this.x * v.buffer[1] + this.y * v.buffer[5] + this.z * v.buffer[9] + this.w * v.buffer[13],\n                this.x * v.buffer[2] + this.y * v.buffer[6] + this.z * v.buffer[10] + this.w * v.buffer[14],\n                this.x * v.buffer[3] + this.y * v.buffer[7] + this.z * v.buffer[11] + this.w * v.buffer[15],\n            );\n        }\n    }\n\n    dot(v: Vector4): number {\n        return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n    }\n\n    lerp(v: Vector4, t: number): Vector4 {\n        return new Vector4(\n            this.x + (v.x - this.x) * t,\n            this.y + (v.y - this.y) * t,\n            this.z + (v.z - this.z) * t,\n            this.w + (v.w - this.w) * t,\n        );\n    }\n\n    magnitude(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\n    }\n\n    distanceTo(v: Vector4): number {\n        return Math.sqrt((this.x - v.x) ** 2 + (this.y - v.y) ** 2 + (this.z - v.z) ** 2 + (this.w - v.w) ** 2);\n    }\n\n    normalize(): Vector4 {\n        const length = this.magnitude();\n\n        return new Vector4(this.x / length, this.y / length, this.z / length, this.w / length);\n    }\n\n    flat(): number[] {\n        return [this.x, this.y, this.z, this.w];\n    }\n\n    clone(): Vector4 {\n        return new Vector4(this.x, this.y, this.z, this.w);\n    }\n\n    toString(): string {\n        return `[${this.flat().join(\", \")}]`;\n    }\n}\n\nexport { Vector4 };\n", "import { CameraData } from \"./CameraData\";\nimport { Object3D } from \"../core/Object3D\";\nimport { Vector3 } from \"../math/Vector3\";\nimport { Vector4 } from \"../math/Vector4\";\n\nclass Camera extends Object3D {\n    private _data: CameraData;\n\n    screenPointToRay: (x: number, y: number) => Vector3;\n\n    constructor(camera: CameraData | undefined = undefined) {\n        super();\n\n        this._data = camera ? camera : new CameraData();\n        this._position = new Vector3(0, 0, -5);\n\n        this.update = () => {\n            this.data.update(this.position, this.rotation);\n        };\n\n        this.screenPointToRay = (x: number, y: number) => {\n            const clipSpaceCoords = new Vector4(x, y, -1, 1);\n            const inverseProjectionMatrix = this._data.projectionMatrix.invert();\n            const cameraSpaceCoords = clipSpaceCoords.multiply(inverseProjectionMatrix);\n            const inverseViewMatrix = this._data.viewMatrix.invert();\n            const worldSpaceCoords = cameraSpaceCoords.multiply(inverseViewMatrix);\n            const worldSpacePosition = new Vector3(\n                worldSpaceCoords.x / worldSpaceCoords.w,\n                worldSpaceCoords.y / worldSpaceCoords.w,\n                worldSpaceCoords.z / worldSpaceCoords.w,\n            );\n            const direction = worldSpacePosition.subtract(this.position).normalize();\n            return direction;\n        };\n    }\n\n    get data() {\n        return this._data;\n    }\n}\n\nexport { Camera };\n", "import { Object3D } from \"./Object3D\";\nimport { SplatData } from \"../splats/SplatData\";\nimport { Splat } from \"../splats/Splat\";\nimport { EventDispatcher } from \"../events/EventDispatcher\";\nimport { ObjectAddedEvent, ObjectRemovedEvent } from \"../events/Events\";\nimport { Converter } from \"../utils/Converter\";\n\nclass Scene extends EventDispatcher {\n    private _objects: Object3D[] = [];\n\n    addObject: (object: Object3D) => void;\n    removeObject: (object: Object3D) => void;\n    findObject: (predicate: (object: Object3D) => boolean) => Object3D | undefined;\n    findObjectOfType: <T extends Object3D>(type: { new (): T }) => T | undefined;\n    reset: () => void;\n\n    constructor() {\n        super();\n\n        this.addObject = (object: Object3D) => {\n            this.objects.push(object);\n            this.dispatchEvent(new ObjectAddedEvent(object));\n        };\n\n        this.removeObject = (object: Object3D) => {\n            const index = this.objects.indexOf(object);\n            if (index < 0) {\n                throw new Error(\"Object not found in scene\");\n            }\n            this.objects.splice(index, 1);\n            this.dispatchEvent(new ObjectRemovedEvent(object));\n        };\n\n        this.findObject = (predicate: (object: Object3D) => boolean) => {\n            for (const object of this.objects) {\n                if (predicate(object)) {\n                    return object;\n                }\n            }\n            return undefined;\n        };\n\n        this.findObjectOfType = <T extends Object3D>(type: { new (): T }) => {\n            for (const object of this.objects) {\n                if (object instanceof type) {\n                    return object;\n                }\n            }\n            return undefined;\n        };\n\n        this.reset = () => {\n            const objectsToRemove = this.objects.slice();\n            for (const object of objectsToRemove) {\n                this.removeObject(object);\n            }\n        };\n\n        this.reset();\n    }\n\n    saveToFile(name: string | null = null, format: string | null = null) {\n        if (!document) return;\n\n        if (!format) {\n            format = \"splat\";\n        } else if (format !== \"splat\" && format !== \"ply\") {\n            throw new Error(\"Invalid format. Must be 'splat' or 'ply'\");\n        }\n\n        if (!name) {\n            const now = new Date();\n            name = `scene-${now.getFullYear()}-${now.getMonth() + 1}-${now.getDate()}.${format}`;\n        }\n\n        const buffers: Uint8Array[] = [];\n        let vertexCount = 0;\n\n        for (const object of this.objects) {\n            object.applyRotation();\n            object.applyScale();\n            object.applyPosition();\n            if (object instanceof Splat) {\n                const buffer = object.data.serialize();\n                buffers.push(buffer);\n                vertexCount += object.data.vertexCount;\n            }\n        }\n\n        const data = new Uint8Array(vertexCount * SplatData.RowLength);\n        let offset = 0;\n        for (const buffer of buffers) {\n            data.set(buffer, offset);\n            offset += buffer.length;\n        }\n\n        let blob;\n        if (format === \"ply\") {\n            const plyData = Converter.SplatToPLY(data.buffer, vertexCount);\n            blob = new Blob([plyData], { type: \"application/octet-stream\" });\n        } else {\n            blob = new Blob([data.buffer], { type: \"application/octet-stream\" });\n        }\n\n        const link = document.createElement(\"a\");\n        link.download = name;\n        link.href = URL.createObjectURL(blob);\n        link.click();\n    }\n\n    get objects() {\n        return this._objects;\n    }\n}\n\nexport { Scene };\n", "export async function initiateFetchRequest(url: string, useCache: boolean): Promise<Response> {\n    const req = await fetch(url, {\n        mode: \"cors\",\n        credentials: \"omit\",\n        cache: useCache ? \"force-cache\" : \"default\",\n    });\n\n    if (req.status != 200) {\n        throw new Error(req.status + \" Unable to load \" + req.url);\n    }\n\n    return req;\n}\n\nexport async function loadDataIntoBuffer(res: Response, onProgress?: (progress: number) => void): Promise<Uint8Array> {\n    const reader = res.body!.getReader();\n\n    const contentLength = parseInt(res.headers.get(\"content-length\") as string);\n    const buffer = new Uint8Array(contentLength);\n\n    let bytesRead = 0;\n\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n        const { done, value } = await reader.read();\n        if (done) break;\n\n        buffer.set(value, bytesRead);\n        bytesRead += value.length;\n        onProgress?.(bytesRead / contentLength);\n    }\n\n    return buffer;\n}\n\nexport async function loadChunkedDataIntoBuffer(\n    res: Response,\n    onProgress?: (progress: number) => void,\n): Promise<Uint8Array> {\n    const reader = res.body!.getReader();\n\n    const chunks = [];\n    let receivedLength = 0;\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n        const { done, value } = await reader.read();\n        if (done) break;\n\n        chunks.push(value);\n        receivedLength += value.length;\n    }\n\n    const buffer = new Uint8Array(receivedLength);\n    let position = 0;\n    for (const chunk of chunks) {\n        buffer.set(chunk, position);\n        position += chunk.length;\n\n        onProgress?.(position / receivedLength);\n    }\n\n    return buffer;\n}\n\nexport async function loadRequestDataIntoBuffer(\n    res: Response,\n    onProgress?: (progress: number) => void,\n): Promise<Uint8Array> {\n    if (res.headers.has(\"content-length\")) {\n        return loadDataIntoBuffer(res, onProgress);\n    } else {\n        return loadChunkedDataIntoBuffer(res, onProgress);\n    }\n}\n", "import type { Scene } from \"../core/Scene\";\nimport { Splat } from \"../splats/Splat\";\nimport { SplatData } from \"../splats/SplatData\";\nimport { initiateFetchRequest, loadRequestDataIntoBuffer } from \"../utils/LoaderUtils\";\n\nclass Loader {\n    static async LoadAsync(\n        url: string,\n        scene: Scene,\n        onProgress?: (progress: number) => void,\n        useCache: boolean = false,\n    ): Promise<Splat> {\n        const res: Response = await initiateFetchRequest(url, useCache);\n\n        const buffer = await loadRequestDataIntoBuffer(res, onProgress);\n        return this.LoadFromArrayBuffer(buffer, scene);\n    }\n\n    static async LoadFromFileAsync(file: File, scene: Scene, onProgress?: (progress: number) => void): Promise<Splat> {\n        const reader = new FileReader();\n        let splat = new Splat();\n        reader.onload = (e) => {\n            splat = this.LoadFromArrayBuffer(e.target!.result as ArrayBuffer, scene);\n        };\n        reader.onprogress = (e) => {\n            onProgress?.(e.loaded / e.total);\n        };\n        reader.readAsArrayBuffer(file);\n        await new Promise<void>((resolve) => {\n            reader.onloadend = () => {\n                resolve();\n            };\n        });\n        return splat;\n    }\n\n    static LoadFromArrayBuffer(arrayBuffer: ArrayBufferLike, scene: Scene): Splat {\n        const buffer = new Uint8Array(arrayBuffer);\n        const data = SplatData.Deserialize(buffer);\n        const splat = new Splat(data);\n        scene.addObject(splat);\n        return splat;\n    }\n}\n\nexport { Loader };\n", "import { Scene } from \"../core/Scene\";\nimport { Vector3 } from \"../math/Vector3\";\nimport { Quaternion } from \"../math/Quaternion\";\nimport { SplatData } from \"../splats/SplatData\";\nimport { Splat } from \"../splats/Splat\";\nimport { Converter } from \"../utils/Converter\";\nimport { initiateFetchRequest, loadRequestDataIntoBuffer } from \"../utils/LoaderUtils\";\n\nclass PLYLoader {\n    static async LoadAsync(\n        url: string,\n        scene: Scene,\n        onProgress?: (progress: number) => void,\n        format: string = \"\",\n        useCache: boolean = false,\n    ): Promise<Splat> {\n        const res: Response = await initiateFetchRequest(url, useCache);\n\n        const plyData = await loadRequestDataIntoBuffer(res, onProgress);\n\n        if (plyData[0] !== 112 || plyData[1] !== 108 || plyData[2] !== 121 || plyData[3] !== 10) {\n            throw new Error(\"Invalid PLY file\");\n        }\n\n        return this.LoadFromArrayBuffer(plyData.buffer, scene, format);\n    }\n\n    static async LoadFromFileAsync(\n        file: File,\n        scene: Scene,\n        onProgress?: (progress: number) => void,\n        format: string = \"\",\n    ): Promise<Splat> {\n        const reader = new FileReader();\n        let splat = new Splat();\n        reader.onload = (e) => {\n            splat = this.LoadFromArrayBuffer(e.target!.result as ArrayBuffer, scene, format);\n        };\n        reader.onprogress = (e) => {\n            onProgress?.(e.loaded / e.total);\n        };\n        reader.readAsArrayBuffer(file);\n        await new Promise<void>((resolve) => {\n            reader.onloadend = () => {\n                resolve();\n            };\n        });\n        return splat;\n    }\n\n    static LoadFromArrayBuffer(arrayBuffer: ArrayBufferLike, scene: Scene, format: string = \"\"): Splat {\n        const buffer = new Uint8Array(this._ParsePLYBuffer(arrayBuffer, format));\n        const data = SplatData.Deserialize(buffer);\n        const splat = new Splat(data);\n        scene.addObject(splat);\n        return splat;\n    }\n\n    private static _ParsePLYBuffer(inputBuffer: ArrayBuffer, format: string): ArrayBuffer {\n        type PlyProperty = {\n            name: string;\n            type: string;\n            offset: number;\n        };\n\n        const ubuf = new Uint8Array(inputBuffer);\n        const headerText = new TextDecoder().decode(ubuf.slice(0, 1024 * 10));\n        const header_end = \"end_header\\n\";\n        const header_end_index = headerText.indexOf(header_end);\n        if (header_end_index < 0) throw new Error(\"Unable to read .ply file header\");\n\n        const vertexCount = parseInt(/element vertex (\\d+)\\n/.exec(headerText)![1]);\n\n        let rowOffset = 0;\n        const offsets: Record<string, number> = {\n            double: 8,\n            int: 4,\n            uint: 4,\n            float: 4,\n            short: 2,\n            ushort: 2,\n            uchar: 1,\n        };\n\n        const properties: PlyProperty[] = [];\n        for (const prop of headerText\n            .slice(0, header_end_index)\n            .split(\"\\n\")\n            .filter((k) => k.startsWith(\"property \"))) {\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            const [_p, type, name] = prop.split(\" \");\n            properties.push({ name, type, offset: rowOffset });\n            console.log(name, type, rowOffset);\n            if (!offsets[type]) throw new Error(`Unsupported property type: ${type}`);\n            rowOffset += offsets[type];\n        }\n\n        const dataView = new DataView(inputBuffer, header_end_index + header_end.length);\n        const buffer = new ArrayBuffer(SplatData.RowLength * vertexCount);\n\n        const q_polycam = Quaternion.FromEuler(new Vector3(Math.PI / 2, 0, 0));\n\n        for (let i = 0; i < vertexCount; i++) {\n            const position = new Float32Array(buffer, i * SplatData.RowLength, 3);\n            const scale = new Float32Array(buffer, i * SplatData.RowLength + 12, 3);\n            const rgba = new Uint8ClampedArray(buffer, i * SplatData.RowLength + 24, 4);\n            const rot = new Uint8ClampedArray(buffer, i * SplatData.RowLength + 28, 4);\n\n            let r0: number = 255;\n            let r1: number = 0;\n            let r2: number = 0;\n            let r3: number = 0;\n\n            properties.forEach((property) => {\n                let value;\n                switch (property.type) {\n                    case \"float\":\n                        value = dataView.getFloat32(property.offset + i * rowOffset, true);\n                        break;\n                    case \"int\":\n                        value = dataView.getInt32(property.offset + i * rowOffset, true);\n                        break;\n                    default:\n                        throw new Error(`Unsupported property type: ${property.type}`);\n                }\n\n                switch (property.name) {\n                    case \"x\":\n                        position[0] = value;\n                        break;\n                    case \"y\":\n                        position[1] = value;\n                        break;\n                    case \"z\":\n                        position[2] = value;\n                        break;\n                    case \"scale_0\":\n                    case \"scaling_0\":\n                        scale[0] = Math.exp(value);\n                        break;\n                    case \"scale_1\":\n                    case \"scaling_1\":\n                        scale[1] = Math.exp(value);\n                        break;\n                    case \"scale_2\":\n                    case \"scaling_2\":\n                        scale[2] = Math.exp(value);\n                        break;\n                    case \"red\":\n                        rgba[0] = value;\n                        break;\n                    case \"green\":\n                        rgba[1] = value;\n                        break;\n                    case \"blue\":\n                        rgba[2] = value;\n                        break;\n                    case \"f_dc_0\":\n                    case \"features_0\":\n                        rgba[0] = (0.5 + Converter.SH_C0 * value) * 255;\n                        break;\n                    case \"f_dc_1\":\n                    case \"features_1\":\n                        rgba[1] = (0.5 + Converter.SH_C0 * value) * 255;\n                        break;\n                    case \"f_dc_2\":\n                    case \"features_2\":\n                        rgba[2] = (0.5 + Converter.SH_C0 * value) * 255;\n                        break;\n                    case \"f_dc_3\":\n                        rgba[3] = (0.5 + Converter.SH_C0 * value) * 255;\n                        break;\n                    case \"opacity\":\n                    case \"opacity_0\":\n                        rgba[3] = (1 / (1 + Math.exp(-value))) * 255;\n                        break;\n                    case \"rot_0\":\n                    case \"rotation_0\":\n                        r0 = value;\n                        break;\n                    case \"rot_1\":\n                    case \"rotation_1\":\n                        r1 = value;\n                        break;\n                    case \"rot_2\":\n                    case \"rotation_2\":\n                        r2 = value;\n                        break;\n                    case \"rot_3\":\n                    case \"rotation_3\":\n                        r3 = value;\n                        break;\n                }\n            });\n\n            let q = new Quaternion(r1, r2, r3, r0);\n\n            switch (format) {\n                case \"polycam\": {\n                    const temp = position[1];\n                    position[1] = -position[2];\n                    position[2] = temp;\n                    q = q_polycam.multiply(q);\n                    break;\n                }\n                case \"\":\n                    break;\n                default:\n                    throw new Error(`Unsupported format: ${format}`);\n            }\n\n            q = q.normalize();\n            rot[0] = q.w * 128 + 128;\n            rot[1] = q.x * 128 + 128;\n            rot[2] = q.y * 128 + 128;\n            rot[3] = q.z * 128 + 128;\n        }\n\n        return buffer;\n    }\n}\n\nexport { PLYLoader };\n", "import { Camera } from \"../cameras/Camera\";\nimport type { Scene } from \"../core/Scene\";\nimport { Matrix3 } from \"../math/Matrix3\";\nimport { Quaternion } from \"../math/Quaternion\";\nimport { Vector3 } from \"../math/Vector3\";\nimport { Splatv } from \"../splats/Splatv\";\nimport { SplatvData } from \"../splats/SplatvData\";\nimport { initiateFetchRequest, loadRequestDataIntoBuffer } from \"../utils/LoaderUtils\";\n\nclass SplatvLoader {\n    static async LoadAsync(\n        url: string,\n        scene: Scene,\n        camera: Camera | null,\n        onProgress?: (progress: number) => void,\n        useCache: boolean = false,\n    ): Promise<Splatv> {\n        const res: Response = await initiateFetchRequest(url, useCache);\n\n        const buffer = await loadRequestDataIntoBuffer(res, onProgress);\n        return this._ParseSplatvBuffer(buffer.buffer, scene, camera);\n    }\n\n    static async LoadFromFileAsync(\n        file: File,\n        scene: Scene,\n        camera: Camera | null,\n        onProgress?: (progress: number) => void,\n    ): Promise<Splatv> {\n        const reader = new FileReader();\n        let splatv: Splatv | null = null;\n        reader.onload = (e) => {\n            splatv = this._ParseSplatvBuffer(e.target!.result as ArrayBuffer, scene, camera);\n        };\n        reader.onprogress = (e) => {\n            onProgress?.(e.loaded / e.total);\n        };\n        reader.readAsArrayBuffer(file);\n        await new Promise<void>((resolve) => {\n            reader.onloadend = () => {\n                resolve();\n            };\n        });\n        if (!splatv) {\n            throw new Error(\"Failed to load splatv file\");\n        }\n        return splatv;\n    }\n\n    private static _ParseSplatvBuffer(inputBuffer: ArrayBuffer, scene: Scene, camera: Camera | null): Splatv {\n        let result: Splatv | null = null;\n\n        const handleChunk = (\n            chunk: { size: number; type: string; texwidth: number; texheight: number },\n            buffer: Uint8Array,\n            chunks: { size: number; type: string }[],\n        ) => {\n            if (chunk.type === \"magic\") {\n                const intView = new Int32Array(buffer.buffer);\n                if (intView[0] !== 0x674b) {\n                    throw new Error(\"Invalid splatv file\");\n                }\n                chunks.push({ size: intView[1], type: \"chunks\" });\n            } else if (chunk.type === \"chunks\") {\n                const splatChunks = JSON.parse(new TextDecoder(\"utf-8\").decode(buffer));\n                if (splatChunks.length == 0) {\n                    throw new Error(\"Invalid splatv file\");\n                } else if (splatChunks.length > 1) {\n                    console.warn(\"Splatv file contains more than one chunk, only the first one will be loaded\");\n                }\n                const chunk = splatChunks[0];\n                const cameras = chunk.cameras as { position: number[]; rotation: number[][] }[];\n                if (camera && cameras && cameras.length) {\n                    const cameraData = cameras[0];\n                    const position = new Vector3(\n                        cameraData.position[0],\n                        cameraData.position[1],\n                        cameraData.position[2],\n                    );\n                    const rotation = Quaternion.FromMatrix3(\n                        new Matrix3(\n                            cameraData.rotation[0][0],\n                            cameraData.rotation[0][1],\n                            cameraData.rotation[0][2],\n                            cameraData.rotation[1][0],\n                            cameraData.rotation[1][1],\n                            cameraData.rotation[1][2],\n                            cameraData.rotation[2][0],\n                            cameraData.rotation[2][1],\n                            cameraData.rotation[2][2],\n                        ),\n                    );\n                    camera.position = position;\n                    camera.rotation = rotation;\n                }\n                chunks.push(chunk);\n            } else if (chunk.type === \"splat\") {\n                const data = SplatvData.Deserialize(buffer, chunk.texwidth, chunk.texheight);\n                const splatv = new Splatv(data);\n                scene.addObject(splatv);\n                result = splatv;\n            }\n        };\n\n        const ubuf = new Uint8Array(inputBuffer);\n        const chunks: { size: number; type: string; texwidth: number; texheight: number }[] = [\n            { size: 8, type: \"magic\", texwidth: 0, texheight: 0 },\n        ];\n        let chunk: { size: number; type: string; texwidth: number; texheight: number } | undefined = chunks.shift();\n        let buffer = new Uint8Array(chunk!.size);\n        let offset = 0;\n        let inputOffset = 0;\n        while (chunk) {\n            while (offset < chunk.size) {\n                const sizeToRead = Math.min(chunk.size - offset, ubuf.length - inputOffset);\n                buffer.set(ubuf.subarray(inputOffset, inputOffset + sizeToRead), offset);\n                offset += sizeToRead;\n                inputOffset += sizeToRead;\n            }\n            handleChunk(chunk, buffer, chunks);\n            if (result) {\n                return result;\n            }\n            chunk = chunks.shift();\n            if (chunk) {\n                buffer = new Uint8Array(chunk.size);\n                offset = 0;\n            }\n        }\n\n        throw new Error(\"Invalid splatv file\");\n    }\n}\n\nexport { SplatvLoader };\n", "import { Camera } from \"../../../cameras/Camera\";\nimport { Scene } from \"../../../core/Scene\";\nimport { WebGLRenderer } from \"../../WebGLRenderer\";\nimport { ShaderPass } from \"../passes/ShaderPass\";\n\nabstract class ShaderProgram {\n    private _renderer: WebGLRenderer;\n    private _program: WebGLProgram;\n    private _passes: ShaderPass[];\n\n    protected _scene: Scene | null = null;\n    protected _camera: Camera | null = null;\n    protected _started: boolean = false;\n    protected _initialized: boolean = false;\n\n    protected abstract _initialize: () => void;\n    protected abstract _resize: () => void;\n    protected abstract _render: () => void;\n    protected abstract _dispose: () => void;\n\n    initialize: () => void;\n    resize: () => void;\n    render: (scene: Scene, camera: Camera) => void;\n    dispose: () => void;\n\n    constructor(renderer: WebGLRenderer, passes: ShaderPass[]) {\n        this._renderer = renderer;\n        const gl = renderer.gl;\n\n        this._program = gl.createProgram() as WebGLProgram;\n        this._passes = passes || [];\n\n        const vertexShader = gl.createShader(gl.VERTEX_SHADER) as WebGLShader;\n        gl.shaderSource(vertexShader, this._getVertexSource());\n        gl.compileShader(vertexShader);\n        if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {\n            console.error(gl.getShaderInfoLog(vertexShader));\n        }\n\n        const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER) as WebGLShader;\n        gl.shaderSource(fragmentShader, this._getFragmentSource());\n        gl.compileShader(fragmentShader);\n        if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\n            console.error(gl.getShaderInfoLog(fragmentShader));\n        }\n\n        gl.attachShader(this.program, vertexShader);\n        gl.attachShader(this.program, fragmentShader);\n        gl.linkProgram(this.program);\n        if (!gl.getProgramParameter(this.program, gl.LINK_STATUS)) {\n            console.error(gl.getProgramInfoLog(this.program));\n        }\n\n        this.resize = () => {\n            gl.useProgram(this._program);\n\n            this._resize();\n        };\n\n        this.initialize = () => {\n            console.assert(!this._initialized, \"ShaderProgram already initialized\");\n\n            gl.useProgram(this._program);\n\n            this._initialize();\n            for (const pass of this.passes) {\n                pass.initialize(this);\n            }\n\n            this._initialized = true;\n            this._started = true;\n        };\n\n        this.render = (scene: Scene, camera: Camera) => {\n            gl.useProgram(this._program);\n\n            if (this._scene !== scene || this._camera !== camera) {\n                this.dispose();\n                this._scene = scene;\n                this._camera = camera;\n                this.initialize();\n            }\n\n            for (const pass of this.passes) {\n                pass.render();\n            }\n\n            this._render();\n        };\n\n        this.dispose = () => {\n            if (!this._initialized) return;\n\n            gl.useProgram(this._program);\n\n            for (const pass of this.passes) {\n                pass.dispose();\n            }\n\n            this._dispose();\n\n            this._scene = null;\n            this._camera = null;\n            this._initialized = false;\n        };\n    }\n\n    get renderer() {\n        return this._renderer;\n    }\n\n    get scene() {\n        return this._scene;\n    }\n\n    get camera() {\n        return this._camera;\n    }\n\n    get program() {\n        return this._program;\n    }\n\n    get passes() {\n        return this._passes;\n    }\n\n    get started() {\n        return this._started;\n    }\n\n    protected abstract _getVertexSource(): string;\n    protected abstract _getFragmentSource(): string;\n}\n\nexport { ShaderProgram };\n", "\nvar loadWasm = (() => {\n  var _scriptDir = import.meta.url;\n  \n  return (\nfunction(moduleArg = {}) {\n\nvar Module=moduleArg;var readyPromiseResolve,readyPromiseReject;Module[\"ready\"]=new Promise((resolve,reject)=>{readyPromiseResolve=resolve;readyPromiseReject=reject});var moduleOverrides=Object.assign({},Module);var arguments_=[];var thisProgram=\"./this.program\";var quit_=(status,toThrow)=>{throw toThrow};var ENVIRONMENT_IS_WEB=false;var ENVIRONMENT_IS_WORKER=true;var scriptDirectory=\"\";function locateFile(path){if(Module[\"locateFile\"]){return Module[\"locateFile\"](path,scriptDirectory)}return scriptDirectory+path}var read_,readAsync,readBinary;if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){if(ENVIRONMENT_IS_WORKER){scriptDirectory=self.location.href}else if(typeof document!=\"undefined\"&&document.currentScript){scriptDirectory=document.currentScript.src}if(_scriptDir){scriptDirectory=_scriptDir}if(scriptDirectory.indexOf(\"blob:\")!==0){scriptDirectory=scriptDirectory.substr(0,scriptDirectory.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1)}else{scriptDirectory=\"\"}{read_=url=>{var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,false);xhr.send(null);return xhr.responseText};if(ENVIRONMENT_IS_WORKER){readBinary=url=>{var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,false);xhr.responseType=\"arraybuffer\";xhr.send(null);return new Uint8Array(xhr.response)}}readAsync=(url,onload,onerror)=>{var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,true);xhr.responseType=\"arraybuffer\";xhr.onload=()=>{if(xhr.status==200||xhr.status==0&&xhr.response){onload(xhr.response);return}onerror()};xhr.onerror=onerror;xhr.send(null)}}}else{}var out=Module[\"print\"]||console.log.bind(console);var err=Module[\"printErr\"]||console.error.bind(console);Object.assign(Module,moduleOverrides);moduleOverrides=null;if(Module[\"arguments\"])arguments_=Module[\"arguments\"];if(Module[\"thisProgram\"])thisProgram=Module[\"thisProgram\"];if(Module[\"quit\"])quit_=Module[\"quit\"];var wasmBinary;if(Module[\"wasmBinary\"])wasmBinary=Module[\"wasmBinary\"];if(typeof WebAssembly!=\"object\"){abort(\"no native wasm support detected\")}var wasmMemory;var ABORT=false;var EXITSTATUS;var HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;function updateMemoryViews(){var b=wasmMemory.buffer;Module[\"HEAP8\"]=HEAP8=new Int8Array(b);Module[\"HEAP16\"]=HEAP16=new Int16Array(b);Module[\"HEAPU8\"]=HEAPU8=new Uint8Array(b);Module[\"HEAPU16\"]=HEAPU16=new Uint16Array(b);Module[\"HEAP32\"]=HEAP32=new Int32Array(b);Module[\"HEAPU32\"]=HEAPU32=new Uint32Array(b);Module[\"HEAPF32\"]=HEAPF32=new Float32Array(b);Module[\"HEAPF64\"]=HEAPF64=new Float64Array(b)}var __ATPRERUN__=[];var __ATINIT__=[];var __ATPOSTRUN__=[];var runtimeInitialized=false;function preRun(){if(Module[\"preRun\"]){if(typeof Module[\"preRun\"]==\"function\")Module[\"preRun\"]=[Module[\"preRun\"]];while(Module[\"preRun\"].length){addOnPreRun(Module[\"preRun\"].shift())}}callRuntimeCallbacks(__ATPRERUN__)}function initRuntime(){runtimeInitialized=true;callRuntimeCallbacks(__ATINIT__)}function postRun(){if(Module[\"postRun\"]){if(typeof Module[\"postRun\"]==\"function\")Module[\"postRun\"]=[Module[\"postRun\"]];while(Module[\"postRun\"].length){addOnPostRun(Module[\"postRun\"].shift())}}callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(cb){__ATPRERUN__.unshift(cb)}function addOnInit(cb){__ATINIT__.unshift(cb)}function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb)}var runDependencies=0;var runDependencyWatcher=null;var dependenciesFulfilled=null;function addRunDependency(id){runDependencies++;if(Module[\"monitorRunDependencies\"]){Module[\"monitorRunDependencies\"](runDependencies)}}function removeRunDependency(id){runDependencies--;if(Module[\"monitorRunDependencies\"]){Module[\"monitorRunDependencies\"](runDependencies)}if(runDependencies==0){if(runDependencyWatcher!==null){clearInterval(runDependencyWatcher);runDependencyWatcher=null}if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback()}}}function abort(what){if(Module[\"onAbort\"]){Module[\"onAbort\"](what)}what=\"Aborted(\"+what+\")\";err(what);ABORT=true;EXITSTATUS=1;what+=\". Build with -sASSERTIONS for more info.\";var e=new WebAssembly.RuntimeError(what);readyPromiseReject(e);throw e}var dataURIPrefix=\"data:application/octet-stream;base64,\";var isDataURI=filename=>filename.startsWith(dataURIPrefix);var wasmBinaryFile;wasmBinaryFile=\"data:application/octet-stream;base64,\";if(!isDataURI(wasmBinaryFile)){wasmBinaryFile=locateFile(wasmBinaryFile)}function getBinarySync(file){if(file==wasmBinaryFile&&wasmBinary){return new Uint8Array(wasmBinary)}var binary=tryParseAsDataURI(file);if(binary){return binary}if(readBinary){return readBinary(file)}throw\"both async and sync fetching of the wasm failed\"}function getBinaryPromise(binaryFile){return Promise.resolve().then(()=>getBinarySync(binaryFile))}function instantiateArrayBuffer(binaryFile,imports,receiver){return getBinaryPromise(binaryFile).then(binary=>WebAssembly.instantiate(binary,imports)).then(instance=>instance).then(receiver,reason=>{err(`failed to asynchronously prepare wasm: ${reason}`);abort(reason)})}function instantiateAsync(binary,binaryFile,imports,callback){return instantiateArrayBuffer(binaryFile,imports,callback)}function createWasm(){var info={\"a\":wasmImports};function receiveInstance(instance,module){wasmExports=instance.exports;wasmMemory=wasmExports[\"k\"];updateMemoryViews();addOnInit(wasmExports[\"l\"]);removeRunDependency(\"wasm-instantiate\");return wasmExports}addRunDependency(\"wasm-instantiate\");function receiveInstantiationResult(result){receiveInstance(result[\"instance\"])}if(Module[\"instantiateWasm\"]){try{return Module[\"instantiateWasm\"](info,receiveInstance)}catch(e){err(`Module.instantiateWasm callback failed with error: ${e}`);readyPromiseReject(e)}}instantiateAsync(wasmBinary,wasmBinaryFile,info,receiveInstantiationResult).catch(readyPromiseReject);return{}}var callRuntimeCallbacks=callbacks=>{while(callbacks.length>0){callbacks.shift()(Module)}};var noExitRuntime=Module[\"noExitRuntime\"]||true;var __embind_register_bigint=(primitiveType,name,size,minRange,maxRange)=>{};var embind_init_charCodes=()=>{var codes=new Array(256);for(var i=0;i<256;++i){codes[i]=String.fromCharCode(i)}embind_charCodes=codes};var embind_charCodes;var readLatin1String=ptr=>{var ret=\"\";var c=ptr;while(HEAPU8[c]){ret+=embind_charCodes[HEAPU8[c++]]}return ret};var awaitingDependencies={};var registeredTypes={};var typeDependencies={};var BindingError;var throwBindingError=message=>{throw new BindingError(message)};var InternalError;function sharedRegisterType(rawType,registeredInstance,options={}){var name=registeredInstance.name;if(!rawType){throwBindingError(`type \"${name}\" must have a positive integer typeid pointer`)}if(registeredTypes.hasOwnProperty(rawType)){if(options.ignoreDuplicateRegistrations){return}else{throwBindingError(`Cannot register type '${name}' twice`)}}registeredTypes[rawType]=registeredInstance;delete typeDependencies[rawType];if(awaitingDependencies.hasOwnProperty(rawType)){var callbacks=awaitingDependencies[rawType];delete awaitingDependencies[rawType];callbacks.forEach(cb=>cb())}}function registerType(rawType,registeredInstance,options={}){if(!(\"argPackAdvance\"in registeredInstance)){throw new TypeError(\"registerType registeredInstance requires argPackAdvance\")}return sharedRegisterType(rawType,registeredInstance,options)}var GenericWireTypeSize=8;var __embind_register_bool=(rawType,name,trueValue,falseValue)=>{name=readLatin1String(name);registerType(rawType,{name:name,\"fromWireType\":function(wt){return!!wt},\"toWireType\":function(destructors,o){return o?trueValue:falseValue},\"argPackAdvance\":GenericWireTypeSize,\"readValueFromPointer\":function(pointer){return this[\"fromWireType\"](HEAPU8[pointer])},destructorFunction:null})};function handleAllocatorInit(){Object.assign(HandleAllocator.prototype,{get(id){return this.allocated[id]},has(id){return this.allocated[id]!==undefined},allocate(handle){var id=this.freelist.pop()||this.allocated.length;this.allocated[id]=handle;return id},free(id){this.allocated[id]=undefined;this.freelist.push(id)}})}function HandleAllocator(){this.allocated=[undefined];this.freelist=[]}var emval_handles=new HandleAllocator;var __emval_decref=handle=>{if(handle>=emval_handles.reserved&&0===--emval_handles.get(handle).refcount){emval_handles.free(handle)}};var count_emval_handles=()=>{var count=0;for(var i=emval_handles.reserved;i<emval_handles.allocated.length;++i){if(emval_handles.allocated[i]!==undefined){++count}}return count};var init_emval=()=>{emval_handles.allocated.push({value:undefined},{value:null},{value:true},{value:false});emval_handles.reserved=emval_handles.allocated.length;Module[\"count_emval_handles\"]=count_emval_handles};var Emval={toValue:handle=>{if(!handle){throwBindingError(\"Cannot use deleted val. handle = \"+handle)}return emval_handles.get(handle).value},toHandle:value=>{switch(value){case undefined:return 1;case null:return 2;case true:return 3;case false:return 4;default:{return emval_handles.allocate({refcount:1,value:value})}}}};function simpleReadValueFromPointer(pointer){return this[\"fromWireType\"](HEAP32[pointer>>2])}var __embind_register_emval=(rawType,name)=>{name=readLatin1String(name);registerType(rawType,{name:name,\"fromWireType\":handle=>{var rv=Emval.toValue(handle);__emval_decref(handle);return rv},\"toWireType\":(destructors,value)=>Emval.toHandle(value),\"argPackAdvance\":GenericWireTypeSize,\"readValueFromPointer\":simpleReadValueFromPointer,destructorFunction:null})};var floatReadValueFromPointer=(name,width)=>{switch(width){case 4:return function(pointer){return this[\"fromWireType\"](HEAPF32[pointer>>2])};case 8:return function(pointer){return this[\"fromWireType\"](HEAPF64[pointer>>3])};default:throw new TypeError(`invalid float width (${width}): ${name}`)}};var __embind_register_float=(rawType,name,size)=>{name=readLatin1String(name);registerType(rawType,{name:name,\"fromWireType\":value=>value,\"toWireType\":(destructors,value)=>value,\"argPackAdvance\":GenericWireTypeSize,\"readValueFromPointer\":floatReadValueFromPointer(name,size),destructorFunction:null})};var integerReadValueFromPointer=(name,width,signed)=>{switch(width){case 1:return signed?pointer=>HEAP8[pointer>>0]:pointer=>HEAPU8[pointer>>0];case 2:return signed?pointer=>HEAP16[pointer>>1]:pointer=>HEAPU16[pointer>>1];case 4:return signed?pointer=>HEAP32[pointer>>2]:pointer=>HEAPU32[pointer>>2];default:throw new TypeError(`invalid integer width (${width}): ${name}`)}};var __embind_register_integer=(primitiveType,name,size,minRange,maxRange)=>{name=readLatin1String(name);if(maxRange===-1){maxRange=4294967295}var fromWireType=value=>value;if(minRange===0){var bitshift=32-8*size;fromWireType=value=>value<<bitshift>>>bitshift}var isUnsignedType=name.includes(\"unsigned\");var checkAssertions=(value,toTypeName)=>{};var toWireType;if(isUnsignedType){toWireType=function(destructors,value){checkAssertions(value,this.name);return value>>>0}}else{toWireType=function(destructors,value){checkAssertions(value,this.name);return value}}registerType(primitiveType,{name:name,\"fromWireType\":fromWireType,\"toWireType\":toWireType,\"argPackAdvance\":GenericWireTypeSize,\"readValueFromPointer\":integerReadValueFromPointer(name,size,minRange!==0),destructorFunction:null})};var __embind_register_memory_view=(rawType,dataTypeIndex,name)=>{var typeMapping=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array];var TA=typeMapping[dataTypeIndex];function decodeMemoryView(handle){var size=HEAPU32[handle>>2];var data=HEAPU32[handle+4>>2];return new TA(HEAP8.buffer,data,size)}name=readLatin1String(name);registerType(rawType,{name:name,\"fromWireType\":decodeMemoryView,\"argPackAdvance\":GenericWireTypeSize,\"readValueFromPointer\":decodeMemoryView},{ignoreDuplicateRegistrations:true})};function readPointer(pointer){return this[\"fromWireType\"](HEAPU32[pointer>>2])}var stringToUTF8Array=(str,heap,outIdx,maxBytesToWrite)=>{if(!(maxBytesToWrite>0))return 0;var startIdx=outIdx;var endIdx=outIdx+maxBytesToWrite-1;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343){var u1=str.charCodeAt(++i);u=65536+((u&1023)<<10)|u1&1023}if(u<=127){if(outIdx>=endIdx)break;heap[outIdx++]=u}else if(u<=2047){if(outIdx+1>=endIdx)break;heap[outIdx++]=192|u>>6;heap[outIdx++]=128|u&63}else if(u<=65535){if(outIdx+2>=endIdx)break;heap[outIdx++]=224|u>>12;heap[outIdx++]=128|u>>6&63;heap[outIdx++]=128|u&63}else{if(outIdx+3>=endIdx)break;heap[outIdx++]=240|u>>18;heap[outIdx++]=128|u>>12&63;heap[outIdx++]=128|u>>6&63;heap[outIdx++]=128|u&63}}heap[outIdx]=0;return outIdx-startIdx};var stringToUTF8=(str,outPtr,maxBytesToWrite)=>stringToUTF8Array(str,HEAPU8,outPtr,maxBytesToWrite);var lengthBytesUTF8=str=>{var len=0;for(var i=0;i<str.length;++i){var c=str.charCodeAt(i);if(c<=127){len++}else if(c<=2047){len+=2}else if(c>=55296&&c<=57343){len+=4;++i}else{len+=3}}return len};var UTF8Decoder=typeof TextDecoder!=\"undefined\"?new TextDecoder(\"utf8\"):undefined;var UTF8ArrayToString=(heapOrArray,idx,maxBytesToRead)=>{var endIdx=idx+maxBytesToRead;var endPtr=idx;while(heapOrArray[endPtr]&&!(endPtr>=endIdx))++endPtr;if(endPtr-idx>16&&heapOrArray.buffer&&UTF8Decoder){return UTF8Decoder.decode(heapOrArray.subarray(idx,endPtr))}var str=\"\";while(idx<endPtr){var u0=heapOrArray[idx++];if(!(u0&128)){str+=String.fromCharCode(u0);continue}var u1=heapOrArray[idx++]&63;if((u0&224)==192){str+=String.fromCharCode((u0&31)<<6|u1);continue}var u2=heapOrArray[idx++]&63;if((u0&240)==224){u0=(u0&15)<<12|u1<<6|u2}else{u0=(u0&7)<<18|u1<<12|u2<<6|heapOrArray[idx++]&63}if(u0<65536){str+=String.fromCharCode(u0)}else{var ch=u0-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}}return str};var UTF8ToString=(ptr,maxBytesToRead)=>ptr?UTF8ArrayToString(HEAPU8,ptr,maxBytesToRead):\"\";var __embind_register_std_string=(rawType,name)=>{name=readLatin1String(name);var stdStringIsUTF8=name===\"std::string\";registerType(rawType,{name:name,\"fromWireType\"(value){var length=HEAPU32[value>>2];var payload=value+4;var str;if(stdStringIsUTF8){var decodeStartPtr=payload;for(var i=0;i<=length;++i){var currentBytePtr=payload+i;if(i==length||HEAPU8[currentBytePtr]==0){var maxRead=currentBytePtr-decodeStartPtr;var stringSegment=UTF8ToString(decodeStartPtr,maxRead);if(str===undefined){str=stringSegment}else{str+=String.fromCharCode(0);str+=stringSegment}decodeStartPtr=currentBytePtr+1}}}else{var a=new Array(length);for(var i=0;i<length;++i){a[i]=String.fromCharCode(HEAPU8[payload+i])}str=a.join(\"\")}_free(value);return str},\"toWireType\"(destructors,value){if(value instanceof ArrayBuffer){value=new Uint8Array(value)}var length;var valueIsOfTypeString=typeof value==\"string\";if(!(valueIsOfTypeString||value instanceof Uint8Array||value instanceof Uint8ClampedArray||value instanceof Int8Array)){throwBindingError(\"Cannot pass non-string to std::string\")}if(stdStringIsUTF8&&valueIsOfTypeString){length=lengthBytesUTF8(value)}else{length=value.length}var base=_malloc(4+length+1);var ptr=base+4;HEAPU32[base>>2]=length;if(stdStringIsUTF8&&valueIsOfTypeString){stringToUTF8(value,ptr,length+1)}else{if(valueIsOfTypeString){for(var i=0;i<length;++i){var charCode=value.charCodeAt(i);if(charCode>255){_free(ptr);throwBindingError(\"String has UTF-16 code units that do not fit in 8 bits\")}HEAPU8[ptr+i]=charCode}}else{for(var i=0;i<length;++i){HEAPU8[ptr+i]=value[i]}}}if(destructors!==null){destructors.push(_free,base)}return base},\"argPackAdvance\":GenericWireTypeSize,\"readValueFromPointer\":readPointer,destructorFunction(ptr){_free(ptr)}})};var UTF16Decoder=typeof TextDecoder!=\"undefined\"?new TextDecoder(\"utf-16le\"):undefined;var UTF16ToString=(ptr,maxBytesToRead)=>{var endPtr=ptr;var idx=endPtr>>1;var maxIdx=idx+maxBytesToRead/2;while(!(idx>=maxIdx)&&HEAPU16[idx])++idx;endPtr=idx<<1;if(endPtr-ptr>32&&UTF16Decoder)return UTF16Decoder.decode(HEAPU8.subarray(ptr,endPtr));var str=\"\";for(var i=0;!(i>=maxBytesToRead/2);++i){var codeUnit=HEAP16[ptr+i*2>>1];if(codeUnit==0)break;str+=String.fromCharCode(codeUnit)}return str};var stringToUTF16=(str,outPtr,maxBytesToWrite)=>{if(maxBytesToWrite===undefined){maxBytesToWrite=2147483647}if(maxBytesToWrite<2)return 0;maxBytesToWrite-=2;var startPtr=outPtr;var numCharsToWrite=maxBytesToWrite<str.length*2?maxBytesToWrite/2:str.length;for(var i=0;i<numCharsToWrite;++i){var codeUnit=str.charCodeAt(i);HEAP16[outPtr>>1]=codeUnit;outPtr+=2}HEAP16[outPtr>>1]=0;return outPtr-startPtr};var lengthBytesUTF16=str=>str.length*2;var UTF32ToString=(ptr,maxBytesToRead)=>{var i=0;var str=\"\";while(!(i>=maxBytesToRead/4)){var utf32=HEAP32[ptr+i*4>>2];if(utf32==0)break;++i;if(utf32>=65536){var ch=utf32-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}else{str+=String.fromCharCode(utf32)}}return str};var stringToUTF32=(str,outPtr,maxBytesToWrite)=>{if(maxBytesToWrite===undefined){maxBytesToWrite=2147483647}if(maxBytesToWrite<4)return 0;var startPtr=outPtr;var endPtr=startPtr+maxBytesToWrite-4;for(var i=0;i<str.length;++i){var codeUnit=str.charCodeAt(i);if(codeUnit>=55296&&codeUnit<=57343){var trailSurrogate=str.charCodeAt(++i);codeUnit=65536+((codeUnit&1023)<<10)|trailSurrogate&1023}HEAP32[outPtr>>2]=codeUnit;outPtr+=4;if(outPtr+4>endPtr)break}HEAP32[outPtr>>2]=0;return outPtr-startPtr};var lengthBytesUTF32=str=>{var len=0;for(var i=0;i<str.length;++i){var codeUnit=str.charCodeAt(i);if(codeUnit>=55296&&codeUnit<=57343)++i;len+=4}return len};var __embind_register_std_wstring=(rawType,charSize,name)=>{name=readLatin1String(name);var decodeString,encodeString,getHeap,lengthBytesUTF,shift;if(charSize===2){decodeString=UTF16ToString;encodeString=stringToUTF16;lengthBytesUTF=lengthBytesUTF16;getHeap=()=>HEAPU16;shift=1}else if(charSize===4){decodeString=UTF32ToString;encodeString=stringToUTF32;lengthBytesUTF=lengthBytesUTF32;getHeap=()=>HEAPU32;shift=2}registerType(rawType,{name:name,\"fromWireType\":value=>{var length=HEAPU32[value>>2];var HEAP=getHeap();var str;var decodeStartPtr=value+4;for(var i=0;i<=length;++i){var currentBytePtr=value+4+i*charSize;if(i==length||HEAP[currentBytePtr>>shift]==0){var maxReadBytes=currentBytePtr-decodeStartPtr;var stringSegment=decodeString(decodeStartPtr,maxReadBytes);if(str===undefined){str=stringSegment}else{str+=String.fromCharCode(0);str+=stringSegment}decodeStartPtr=currentBytePtr+charSize}}_free(value);return str},\"toWireType\":(destructors,value)=>{if(!(typeof value==\"string\")){throwBindingError(`Cannot pass non-string to C++ string type ${name}`)}var length=lengthBytesUTF(value);var ptr=_malloc(4+length+charSize);HEAPU32[ptr>>2]=length>>shift;encodeString(value,ptr+4,length+charSize);if(destructors!==null){destructors.push(_free,ptr)}return ptr},\"argPackAdvance\":GenericWireTypeSize,\"readValueFromPointer\":simpleReadValueFromPointer,destructorFunction(ptr){_free(ptr)}})};var __embind_register_void=(rawType,name)=>{name=readLatin1String(name);registerType(rawType,{isVoid:true,name:name,\"argPackAdvance\":0,\"fromWireType\":()=>undefined,\"toWireType\":(destructors,o)=>undefined})};var getHeapMax=()=>2147483648;var growMemory=size=>{var b=wasmMemory.buffer;var pages=(size-b.byteLength+65535)/65536;try{wasmMemory.grow(pages);updateMemoryViews();return 1}catch(e){}};var _emscripten_resize_heap=requestedSize=>{var oldSize=HEAPU8.length;requestedSize>>>=0;var maxHeapSize=getHeapMax();if(requestedSize>maxHeapSize){return false}var alignUp=(x,multiple)=>x+(multiple-x%multiple)%multiple;for(var cutDown=1;cutDown<=4;cutDown*=2){var overGrownHeapSize=oldSize*(1+.2/cutDown);overGrownHeapSize=Math.min(overGrownHeapSize,requestedSize+100663296);var newSize=Math.min(maxHeapSize,alignUp(Math.max(requestedSize,overGrownHeapSize),65536));var replacement=growMemory(newSize);if(replacement){return true}}return false};embind_init_charCodes();BindingError=Module[\"BindingError\"]=class BindingError extends Error{constructor(message){super(message);this.name=\"BindingError\"}};InternalError=Module[\"InternalError\"]=class InternalError extends Error{constructor(message){super(message);this.name=\"InternalError\"}};handleAllocatorInit();init_emval();var wasmImports={f:__embind_register_bigint,i:__embind_register_bool,h:__embind_register_emval,e:__embind_register_float,b:__embind_register_integer,a:__embind_register_memory_view,d:__embind_register_std_string,c:__embind_register_std_wstring,j:__embind_register_void,g:_emscripten_resize_heap};var wasmExports=createWasm();var ___wasm_call_ctors=()=>(___wasm_call_ctors=wasmExports[\"l\"])();var _pack=Module[\"_pack\"]=(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10)=>(_pack=Module[\"_pack\"]=wasmExports[\"m\"])(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10);var ___getTypeName=a0=>(___getTypeName=wasmExports[\"__getTypeName\"])(a0);var __embind_initialize_bindings=Module[\"__embind_initialize_bindings\"]=()=>(__embind_initialize_bindings=Module[\"__embind_initialize_bindings\"]=wasmExports[\"n\"])();var ___errno_location=()=>(___errno_location=wasmExports[\"__errno_location\"])();var _malloc=Module[\"_malloc\"]=a0=>(_malloc=Module[\"_malloc\"]=wasmExports[\"p\"])(a0);var _free=Module[\"_free\"]=a0=>(_free=Module[\"_free\"]=wasmExports[\"q\"])(a0);function intArrayFromBase64(s){var decoded=atob(s);var bytes=new Uint8Array(decoded.length);for(var i=0;i<decoded.length;++i){bytes[i]=decoded.charCodeAt(i)}return bytes}function tryParseAsDataURI(filename){if(!isDataURI(filename)){return}return intArrayFromBase64(filename.slice(dataURIPrefix.length))}var calledRun;dependenciesFulfilled=function runCaller(){if(!calledRun)run();if(!calledRun)dependenciesFulfilled=runCaller};function run(){if(runDependencies>0){return}preRun();if(runDependencies>0){return}function doRun(){if(calledRun)return;calledRun=true;Module[\"calledRun\"]=true;if(ABORT)return;initRuntime();readyPromiseResolve(Module);if(Module[\"onRuntimeInitialized\"])Module[\"onRuntimeInitialized\"]();postRun()}if(Module[\"setStatus\"]){Module[\"setStatus\"](\"Running...\");setTimeout(function(){setTimeout(function(){Module[\"setStatus\"](\"\")},1);doRun()},1)}else{doRun()}}if(Module[\"preInit\"]){if(typeof Module[\"preInit\"]==\"function\")Module[\"preInit\"]=[Module[\"preInit\"]];while(Module[\"preInit\"].length>0){Module[\"preInit\"].pop()()}}run();\n\n\n  return moduleArg.ready\n}\n\n);\n})();\nexport default loadWasm;", "import { Scene } from \"../../../core/Scene\";\nimport { Splat } from \"../../../splats/Splat\";\nimport DataWorker from \"web-worker:./DataWorker.ts\";\nimport loadWasm from \"../../../wasm/data\";\nimport { Matrix4 } from \"../../../math/Matrix4\";\n\nclass RenderData {\n    public dataChanged = false;\n    public transformsChanged = false;\n    public colorTransformsChanged = false;\n\n    private _splatIndices: Map<Splat, number>;\n    private _offsets: Map<Splat, number>;\n    private _data: Uint32Array;\n    private _width: number;\n    private _height: number;\n    private _transforms: Float32Array;\n    private _transformsWidth: number;\n    private _transformsHeight: number;\n    private _transformIndices: Uint32Array;\n    private _transformIndicesWidth: number;\n    private _transformIndicesHeight: number;\n    private _colorTransforms: Float32Array;\n    private _colorTransformsWidth: number;\n    private _colorTransformsHeight: number;\n    private _colorTransformIndices: Uint32Array;\n    private _colorTransformIndicesWidth: number;\n    private _colorTransformIndicesHeight: number;\n    private _positions: Float32Array;\n    private _rotations: Float32Array;\n    private _scales: Float32Array;\n    private _vertexCount: number;\n    private _updating: Set<Splat> = new Set<Splat>();\n    private _dirty: Set<Splat> = new Set<Splat>();\n    private _worker: Worker;\n\n    getSplat: (index: number) => Splat | null;\n    getLocalIndex: (splat: Splat, index: number) => number;\n    markDirty: (splat: Splat) => void;\n    rebuild: () => void;\n    dispose: () => void;\n\n    constructor(scene: Scene) {\n        let vertexCount = 0;\n        let splatIndex = 0;\n        this._splatIndices = new Map<Splat, number>();\n        this._offsets = new Map<Splat, number>();\n        const lookup = new Map<number, Splat>();\n        for (const object of scene.objects) {\n            if (object instanceof Splat) {\n                this._splatIndices.set(object, splatIndex);\n                this._offsets.set(object, vertexCount);\n                lookup.set(vertexCount, object);\n                vertexCount += object.data.vertexCount;\n                splatIndex++;\n            }\n        }\n\n        this._vertexCount = vertexCount;\n        this._width = 2048;\n        this._height = Math.ceil((2 * this.vertexCount) / this.width);\n        this._data = new Uint32Array(this.width * this.height * 4);\n\n        this._transformsWidth = 5;\n        this._transformsHeight = lookup.size;\n        this._transforms = new Float32Array(this._transformsWidth * this._transformsHeight * 4);\n\n        this._transformIndicesWidth = 1024;\n        this._transformIndicesHeight = Math.ceil(this.vertexCount / this._transformIndicesWidth);\n        this._transformIndices = new Uint32Array(this._transformIndicesWidth * this._transformIndicesHeight);\n\n        this._colorTransformsWidth = 4;\n        this._colorTransformsHeight = 64;\n        this._colorTransforms = new Float32Array(this._colorTransformsWidth * this._colorTransformsHeight * 4);\n        this._colorTransforms.fill(0);\n        this._colorTransforms[0] = 1;\n        this._colorTransforms[5] = 1;\n        this._colorTransforms[10] = 1;\n        this._colorTransforms[15] = 1;\n\n        this._colorTransformIndicesWidth = 1024;\n        this._colorTransformIndicesHeight = Math.ceil(this.vertexCount / this._colorTransformIndicesWidth);\n        this._colorTransformIndices = new Uint32Array(\n            this._colorTransformIndicesWidth * this._colorTransformIndicesHeight,\n        );\n        this.colorTransformIndices.fill(0);\n\n        this._positions = new Float32Array(this.vertexCount * 3);\n        this._rotations = new Float32Array(this.vertexCount * 4);\n        this._scales = new Float32Array(this.vertexCount * 3);\n\n        this._worker = new DataWorker();\n\n        const updateTransform = (splat: Splat) => {\n            const splatIndex = this._splatIndices.get(splat) as number;\n            this._transforms.set(splat.transform.buffer, splatIndex * 20);\n            this._transforms[splatIndex * 20 + 16] = splat.selected ? 1 : 0;\n            splat.positionChanged = false;\n            splat.rotationChanged = false;\n            splat.scaleChanged = false;\n            splat.selectedChanged = false;\n            this.transformsChanged = true;\n        };\n\n        const updateColorTransforms = () => {\n            let colorTransformsChanged = false;\n            for (const splat of this._splatIndices.keys()) {\n                if (splat.colorTransformChanged) {\n                    colorTransformsChanged = true;\n                    break;\n                }\n            }\n            if (!colorTransformsChanged) {\n                return;\n            }\n            const colorTransformsMap: Matrix4[] = [new Matrix4()];\n            this._colorTransformIndices.fill(0);\n            let i = 1;\n            for (const splat of this._splatIndices.keys()) {\n                const offset = this._offsets.get(splat) as number;\n                for (const colorTransform of splat.colorTransforms) {\n                    if (!colorTransformsMap.includes(colorTransform)) {\n                        colorTransformsMap.push(colorTransform);\n                        i++;\n                    }\n                }\n                for (const index of splat.colorTransformsMap.keys()) {\n                    const colorTransformIndex = splat.colorTransformsMap.get(index) as number;\n                    this._colorTransformIndices[index + offset] = colorTransformIndex + i - 1;\n                }\n                splat.colorTransformChanged = false;\n            }\n            for (let index = 0; index < colorTransformsMap.length; index++) {\n                const colorTransform = colorTransformsMap[index];\n                this._colorTransforms.set(colorTransform.buffer, index * 16);\n            }\n            this.colorTransformsChanged = true;\n        };\n\n        this._worker.onmessage = (e) => {\n            if (e.data.response) {\n                const response = e.data.response;\n                const splat = lookup.get(response.offset) as Splat;\n                updateTransform(splat);\n                updateColorTransforms();\n\n                const splatIndex = this._splatIndices.get(splat) as number;\n                for (let i = 0; i < splat.data.vertexCount; i++) {\n                    this._transformIndices[response.offset + i] = splatIndex;\n                }\n\n                this._data.set(response.data, response.offset * 8);\n                splat.data.reattach(\n                    response.positions,\n                    response.rotations,\n                    response.scales,\n                    response.colors,\n                    response.selection,\n                );\n\n                this._positions.set(response.worldPositions, response.offset * 3);\n                this._rotations.set(response.worldRotations, response.offset * 4);\n                this._scales.set(response.worldScales, response.offset * 3);\n\n                this._updating.delete(splat);\n\n                splat.selectedChanged = false;\n\n                this.dataChanged = true;\n            }\n        };\n\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        let wasmModule: any;\n\n        async function initWasm() {\n            wasmModule = await loadWasm();\n        }\n\n        initWasm();\n\n        async function waitForWasm() {\n            while (!wasmModule) {\n                await new Promise((resolve) => setTimeout(resolve, 0));\n            }\n        }\n\n        const buildImmediate = (splat: Splat) => {\n            if (!wasmModule) {\n                waitForWasm().then(() => {\n                    buildImmediate(splat);\n                });\n                return;\n            }\n\n            updateTransform(splat);\n\n            const positionsPtr = wasmModule._malloc(3 * splat.data.vertexCount * 4);\n            const rotationsPtr = wasmModule._malloc(4 * splat.data.vertexCount * 4);\n            const scalesPtr = wasmModule._malloc(3 * splat.data.vertexCount * 4);\n            const colorsPtr = wasmModule._malloc(4 * splat.data.vertexCount);\n            const selectionPtr = wasmModule._malloc(splat.data.vertexCount);\n            const dataPtr = wasmModule._malloc(8 * splat.data.vertexCount * 4);\n            const worldPositionsPtr = wasmModule._malloc(3 * splat.data.vertexCount * 4);\n            const worldRotationsPtr = wasmModule._malloc(4 * splat.data.vertexCount * 4);\n            const worldScalesPtr = wasmModule._malloc(3 * splat.data.vertexCount * 4);\n\n            wasmModule.HEAPF32.set(splat.data.positions, positionsPtr / 4);\n            wasmModule.HEAPF32.set(splat.data.rotations, rotationsPtr / 4);\n            wasmModule.HEAPF32.set(splat.data.scales, scalesPtr / 4);\n            wasmModule.HEAPU8.set(splat.data.colors, colorsPtr);\n            wasmModule.HEAPU8.set(splat.data.selection, selectionPtr);\n\n            wasmModule._pack(\n                splat.selected,\n                splat.data.vertexCount,\n                positionsPtr,\n                rotationsPtr,\n                scalesPtr,\n                colorsPtr,\n                selectionPtr,\n                dataPtr,\n                worldPositionsPtr,\n                worldRotationsPtr,\n                worldScalesPtr,\n            );\n\n            const outData = new Uint32Array(wasmModule.HEAPU32.buffer, dataPtr, splat.data.vertexCount * 8);\n            const worldPositions = new Float32Array(\n                wasmModule.HEAPF32.buffer,\n                worldPositionsPtr,\n                splat.data.vertexCount * 3,\n            );\n            const worldRotations = new Float32Array(\n                wasmModule.HEAPF32.buffer,\n                worldRotationsPtr,\n                splat.data.vertexCount * 4,\n            );\n            const worldScales = new Float32Array(wasmModule.HEAPF32.buffer, worldScalesPtr, splat.data.vertexCount * 3);\n\n            const splatIndex = this._splatIndices.get(splat) as number;\n            const offset = this._offsets.get(splat) as number;\n            for (let i = 0; i < splat.data.vertexCount; i++) {\n                this._transformIndices[offset + i] = splatIndex;\n            }\n            this._data.set(outData, offset * 8);\n            this._positions.set(worldPositions, offset * 3);\n            this._rotations.set(worldRotations, offset * 4);\n            this._scales.set(worldScales, offset * 3);\n\n            wasmModule._free(positionsPtr);\n            wasmModule._free(rotationsPtr);\n            wasmModule._free(scalesPtr);\n            wasmModule._free(colorsPtr);\n            wasmModule._free(selectionPtr);\n            wasmModule._free(dataPtr);\n            wasmModule._free(worldPositionsPtr);\n            wasmModule._free(worldRotationsPtr);\n            wasmModule._free(worldScalesPtr);\n\n            this.dataChanged = true;\n            this.colorTransformsChanged = true;\n        };\n\n        const build = (splat: Splat) => {\n            if (splat.positionChanged || splat.rotationChanged || splat.scaleChanged || splat.selectedChanged) {\n                updateTransform(splat);\n            }\n\n            if (splat.colorTransformChanged) {\n                updateColorTransforms();\n            }\n\n            if (!splat.data.changed || splat.data.detached) return;\n\n            const serializedSplat = {\n                position: new Float32Array(splat.position.flat()),\n                rotation: new Float32Array(splat.rotation.flat()),\n                scale: new Float32Array(splat.scale.flat()),\n                selected: splat.selected,\n                vertexCount: splat.data.vertexCount,\n                positions: splat.data.positions,\n                rotations: splat.data.rotations,\n                scales: splat.data.scales,\n                colors: splat.data.colors,\n                selection: splat.data.selection,\n                offset: this._offsets.get(splat) as number,\n            };\n\n            this._worker.postMessage(\n                {\n                    splat: serializedSplat,\n                },\n                [\n                    serializedSplat.position.buffer,\n                    serializedSplat.rotation.buffer,\n                    serializedSplat.scale.buffer,\n                    serializedSplat.positions.buffer,\n                    serializedSplat.rotations.buffer,\n                    serializedSplat.scales.buffer,\n                    serializedSplat.colors.buffer,\n                    serializedSplat.selection.buffer,\n                ],\n            );\n\n            this._updating.add(splat);\n\n            splat.data.detached = true;\n        };\n\n        this.getSplat = (index: number) => {\n            let splat = null;\n            for (const [key, value] of this._offsets) {\n                if (index >= value) {\n                    splat = key;\n                } else {\n                    break;\n                }\n            }\n            return splat;\n        };\n\n        this.getLocalIndex = (splat: Splat, index: number) => {\n            const offset = this._offsets.get(splat) as number;\n            return index - offset;\n        };\n\n        this.markDirty = (splat: Splat) => {\n            this._dirty.add(splat);\n        };\n\n        this.rebuild = () => {\n            for (const splat of this._dirty) {\n                build(splat);\n            }\n\n            this._dirty.clear();\n        };\n\n        this.dispose = () => {\n            this._worker.terminate();\n        };\n\n        for (const splat of this._splatIndices.keys()) {\n            buildImmediate(splat);\n        }\n\n        updateColorTransforms();\n    }\n\n    get offsets() {\n        return this._offsets;\n    }\n\n    get data() {\n        return this._data;\n    }\n\n    get width() {\n        return this._width;\n    }\n\n    get height() {\n        return this._height;\n    }\n\n    get transforms() {\n        return this._transforms;\n    }\n\n    get transformsWidth() {\n        return this._transformsWidth;\n    }\n\n    get transformsHeight() {\n        return this._transformsHeight;\n    }\n\n    get transformIndices() {\n        return this._transformIndices;\n    }\n\n    get transformIndicesWidth() {\n        return this._transformIndicesWidth;\n    }\n\n    get transformIndicesHeight() {\n        return this._transformIndicesHeight;\n    }\n\n    get colorTransforms() {\n        return this._colorTransforms;\n    }\n\n    get colorTransformsWidth() {\n        return this._colorTransformsWidth;\n    }\n\n    get colorTransformsHeight() {\n        return this._colorTransformsHeight;\n    }\n\n    get colorTransformIndices() {\n        return this._colorTransformIndices;\n    }\n\n    get colorTransformIndicesWidth() {\n        return this._colorTransformIndicesWidth;\n    }\n\n    get colorTransformIndicesHeight() {\n        return this._colorTransformIndicesHeight;\n    }\n\n    get positions() {\n        return this._positions;\n    }\n\n    get rotations() {\n        return this._rotations;\n    }\n\n    get scales() {\n        return this._scales;\n    }\n\n    get vertexCount() {\n        return this._vertexCount;\n    }\n\n    get needsRebuild() {\n        return this._dirty.size > 0;\n    }\n\n    get updating() {\n        return this._updating.size > 0;\n    }\n}\n\nexport { RenderData };\n", "class Color32 {\n    public readonly r: number;\n    public readonly g: number;\n    public readonly b: number;\n    public readonly a: number;\n\n    constructor(r: number = 0, g: number = 0, b: number = 0, a: number = 255) {\n        this.r = r;\n        this.g = g;\n        this.b = b;\n        this.a = a;\n    }\n\n    flat(): number[] {\n        return [this.r, this.g, this.b, this.a];\n    }\n\n    flatNorm(): number[] {\n        return [this.r / 255, this.g / 255, this.b / 255, this.a / 255];\n    }\n\n    toHexString(): string {\n        return (\n            \"#\" +\n            this.flat()\n                .map((x) => x.toString(16).padStart(2, \"0\"))\n                .join(\"\")\n        );\n    }\n\n    toString(): string {\n        return `[${this.flat().join(\", \")}]`;\n    }\n}\n\nexport { Color32 };\n", "import SortWorker from \"web-worker:../utils/SortWorker.ts\";\n\nimport { ShaderProgram } from \"./ShaderProgram\";\nimport { ShaderPass } from \"../passes/ShaderPass\";\nimport { RenderData } from \"../utils/RenderData\";\nimport { Color32 } from \"../../../math/Color32\";\nimport { ObjectAddedEvent, ObjectChangedEvent, ObjectRemovedEvent } from \"../../../events/Events\";\nimport { Splat } from \"../../../splats/Splat\";\nimport { WebGLRenderer } from \"../../WebGLRenderer\";\n\nconst vertexShaderSource = /* glsl */ `#version 300 es\nprecision highp float;\nprecision highp int;\n\nuniform highp usampler2D u_texture;\nuniform highp sampler2D u_transforms;\nuniform highp usampler2D u_transformIndices;\nuniform highp sampler2D u_colorTransforms;\nuniform highp usampler2D u_colorTransformIndices;\nuniform mat4 projection, view;\nuniform vec2 focal;\nuniform vec2 viewport;\n\nuniform bool useDepthFade;\nuniform float depthFade;\n\nin vec2 position;\nin int index;\n\nout vec4 vColor;\nout vec2 vPosition;\nout float vSize;\nout float vSelected;\n\nvoid main () {\n    uvec4 cen = texelFetch(u_texture, ivec2((uint(index) & 0x3ffu) << 1, uint(index) >> 10), 0);\n    float selected = float((cen.w >> 24) & 0xffu);\n\n    uint transformIndex = texelFetch(u_transformIndices, ivec2(uint(index) & 0x3ffu, uint(index) >> 10), 0).x;\n    mat4 transform = mat4(\n        texelFetch(u_transforms, ivec2(0, transformIndex), 0),\n        texelFetch(u_transforms, ivec2(1, transformIndex), 0),\n        texelFetch(u_transforms, ivec2(2, transformIndex), 0),\n        texelFetch(u_transforms, ivec2(3, transformIndex), 0)\n    );\n\n    if (selected < 0.5) {\n        selected = texelFetch(u_transforms, ivec2(4, transformIndex), 0).x;\n    }\n\n    mat4 viewTransform = view * transform;\n\n    vec4 cam = viewTransform * vec4(uintBitsToFloat(cen.xyz), 1);\n    vec4 pos2d = projection * cam;\n\n    float clip = 1.2 * pos2d.w;\n    if (pos2d.z < -pos2d.w || pos2d.z > pos2d.w || pos2d.x < -clip || pos2d.x > clip || pos2d.y < -clip || pos2d.y > clip) {\n        gl_Position = vec4(0.0, 0.0, 2.0, 1.0);\n        return;\n    }\n\n    uvec4 cov = texelFetch(u_texture, ivec2(((uint(index) & 0x3ffu) << 1) | 1u, uint(index) >> 10), 0);\n    vec2 u1 = unpackHalf2x16(cov.x), u2 = unpackHalf2x16(cov.y), u3 = unpackHalf2x16(cov.z);\n    mat3 Vrk = mat3(u1.x, u1.y, u2.x, u1.y, u2.y, u3.x, u2.x, u3.x, u3.y);\n\n    mat3 J = mat3(\n        focal.x / cam.z, 0., -(focal.x * cam.x) / (cam.z * cam.z), \n        0., -focal.y / cam.z, (focal.y * cam.y) / (cam.z * cam.z), \n        0., 0., 0.\n    );\n\n    mat3 T = transpose(mat3(viewTransform)) * J;\n    mat3 cov2d = transpose(T) * Vrk * T;\n\n    //ref: https://github.com/graphdeco-inria/diff-gaussian-rasterization/blob/main/cuda_rasterizer/forward.cu#L110-L111\n    cov2d[0][0] += 0.3;\n    cov2d[1][1] += 0.3;\n\n    float mid = (cov2d[0][0] + cov2d[1][1]) / 2.0;\n    float radius = length(vec2((cov2d[0][0] - cov2d[1][1]) / 2.0, cov2d[0][1]));\n    float lambda1 = mid + radius, lambda2 = mid - radius;\n\n    if (lambda2 < 0.0) return;\n    vec2 diagonalVector = normalize(vec2(cov2d[0][1], lambda1 - cov2d[0][0]));\n    vec2 majorAxis = min(sqrt(2.0 * lambda1), 1024.0) * diagonalVector;\n    vec2 minorAxis = min(sqrt(2.0 * lambda2), 1024.0) * vec2(diagonalVector.y, -diagonalVector.x);\n\n    uint colorTransformIndex = texelFetch(u_colorTransformIndices, ivec2(uint(index) & 0x3ffu, uint(index) >> 10), 0).x;\n    mat4 colorTransform = mat4(\n        texelFetch(u_colorTransforms, ivec2(0, colorTransformIndex), 0),\n        texelFetch(u_colorTransforms, ivec2(1, colorTransformIndex), 0),\n        texelFetch(u_colorTransforms, ivec2(2, colorTransformIndex), 0),\n        texelFetch(u_colorTransforms, ivec2(3, colorTransformIndex), 0)\n    );\n\n    vec4 color = vec4((cov.w) & 0xffu, (cov.w >> 8) & 0xffu, (cov.w >> 16) & 0xffu, (cov.w >> 24) & 0xffu) / 255.0;\n    vColor = colorTransform * color;\n\n    vPosition = position;\n    vSize = length(majorAxis);\n    vSelected = selected;\n\n    float scalingFactor = 1.0;\n\n    if (useDepthFade) {\n        float depthNorm = (pos2d.z / pos2d.w + 1.0) / 2.0;\n        float near = 0.1; float far = 100.0;\n        float normalizedDepth = (2.0 * near) / (far + near - depthNorm * (far - near));\n        float start = max(normalizedDepth - 0.1, 0.0);\n        float end = min(normalizedDepth + 0.1, 1.0);\n        scalingFactor = clamp((depthFade - start) / (end - start), 0.0, 1.0);\n    }\n\n    vec2 vCenter = vec2(pos2d) / pos2d.w;\n    gl_Position = vec4(\n        vCenter \n        + position.x * majorAxis * scalingFactor / viewport\n        + position.y * minorAxis * scalingFactor / viewport, 0.0, 1.0);\n}\n`;\n\nconst fragmentShaderSource = /* glsl */ `#version 300 es\nprecision highp float;\n\nuniform float outlineThickness;\nuniform vec4 outlineColor;\n\nin vec4 vColor;\nin vec2 vPosition;\nin float vSize;\nin float vSelected;\n\nout vec4 fragColor;\n\nvoid main () {\n    float A = -dot(vPosition, vPosition);\n\n    if (A < -4.0) discard;\n\n    if (vSelected < 0.5) {\n        float B = exp(A) * vColor.a;\n        fragColor = vec4(B * vColor.rgb, B);\n        return;\n    }\n\n    float outlineThreshold = -4.0 + (outlineThickness / vSize);\n\n    if (A < outlineThreshold) {\n        fragColor = outlineColor;\n    } \n    else {\n        float B = exp(A) * vColor.a;\n        fragColor = vec4(B * vColor.rgb, B);\n    }\n}\n`;\n\nclass RenderProgram extends ShaderProgram {\n    private _outlineThickness: number = 10.0;\n    private _outlineColor: Color32 = new Color32(255, 165, 0, 255);\n    private _renderData: RenderData | null = null;\n    private _depthIndex: Uint32Array = new Uint32Array();\n    private _splatTexture: WebGLTexture | null = null;\n    private _worker: Worker | null = null;\n\n    protected _initialize: () => void;\n    protected _resize: () => void;\n    protected _render: () => void;\n    protected _dispose: () => void;\n\n    private _setOutlineThickness: (value: number) => void;\n    private _setOutlineColor: (value: Color32) => void;\n\n    constructor(renderer: WebGLRenderer, passes: ShaderPass[]) {\n        super(renderer, passes);\n\n        const canvas = renderer.canvas;\n        const gl = renderer.gl;\n\n        let u_projection: WebGLUniformLocation;\n        let u_viewport: WebGLUniformLocation;\n        let u_focal: WebGLUniformLocation;\n        let u_view: WebGLUniformLocation;\n        let u_texture: WebGLUniformLocation;\n        let u_transforms: WebGLUniformLocation;\n        let u_transformIndices: WebGLUniformLocation;\n        let u_colorTransforms: WebGLUniformLocation;\n        let u_colorTransformIndices: WebGLUniformLocation;\n\n        let u_outlineThickness: WebGLUniformLocation;\n        let u_outlineColor: WebGLUniformLocation;\n\n        let positionAttribute: number;\n        let indexAttribute: number;\n\n        let transformsTexture: WebGLTexture;\n        let transformIndicesTexture: WebGLTexture;\n\n        let colorTransformsTexture: WebGLTexture;\n        let colorTransformIndicesTexture: WebGLTexture;\n\n        let vertexBuffer: WebGLBuffer;\n        let indexBuffer: WebGLBuffer;\n\n        this._resize = () => {\n            if (!this._camera) return;\n\n            this._camera.data.setSize(canvas.width, canvas.height);\n            this._camera.update();\n\n            u_projection = gl.getUniformLocation(this.program, \"projection\") as WebGLUniformLocation;\n            gl.uniformMatrix4fv(u_projection, false, this._camera.data.projectionMatrix.buffer);\n\n            u_viewport = gl.getUniformLocation(this.program, \"viewport\") as WebGLUniformLocation;\n            gl.uniform2fv(u_viewport, new Float32Array([canvas.width, canvas.height]));\n        };\n\n        const createWorker = () => {\n            this._worker = new SortWorker();\n            this._worker.onmessage = (e) => {\n                if (e.data.depthIndex) {\n                    const { depthIndex } = e.data;\n                    this._depthIndex = depthIndex;\n                    gl.bindBuffer(gl.ARRAY_BUFFER, indexBuffer);\n                    gl.bufferData(gl.ARRAY_BUFFER, depthIndex, gl.STATIC_DRAW);\n                }\n            };\n        };\n\n        this._initialize = () => {\n            if (!this._scene || !this._camera) {\n                console.error(\"Cannot render without scene and camera\");\n                return;\n            }\n\n            this._resize();\n\n            this._scene.addEventListener(\"objectAdded\", handleObjectAdded);\n            this._scene.addEventListener(\"objectRemoved\", handleObjectRemoved);\n            for (const object of this._scene.objects) {\n                if (object instanceof Splat) {\n                    object.addEventListener(\"objectChanged\", handleObjectChanged);\n                }\n            }\n\n            this._renderData = new RenderData(this._scene);\n\n            u_focal = gl.getUniformLocation(this.program, \"focal\") as WebGLUniformLocation;\n            gl.uniform2fv(u_focal, new Float32Array([this._camera.data.fx, this._camera.data.fy]));\n\n            u_view = gl.getUniformLocation(this.program, \"view\") as WebGLUniformLocation;\n            gl.uniformMatrix4fv(u_view, false, this._camera.data.viewMatrix.buffer);\n\n            u_outlineThickness = gl.getUniformLocation(this.program, \"outlineThickness\") as WebGLUniformLocation;\n            gl.uniform1f(u_outlineThickness, this.outlineThickness);\n\n            u_outlineColor = gl.getUniformLocation(this.program, \"outlineColor\") as WebGLUniformLocation;\n            gl.uniform4fv(u_outlineColor, new Float32Array(this.outlineColor.flatNorm()));\n\n            this._splatTexture = gl.createTexture() as WebGLTexture;\n            u_texture = gl.getUniformLocation(this.program, \"u_texture\") as WebGLUniformLocation;\n            gl.uniform1i(u_texture, 0);\n\n            transformsTexture = gl.createTexture() as WebGLTexture;\n            u_transforms = gl.getUniformLocation(this.program, \"u_transforms\") as WebGLUniformLocation;\n            gl.uniform1i(u_transforms, 1);\n\n            transformIndicesTexture = gl.createTexture() as WebGLTexture;\n            u_transformIndices = gl.getUniformLocation(this.program, \"u_transformIndices\") as WebGLUniformLocation;\n            gl.uniform1i(u_transformIndices, 2);\n\n            colorTransformsTexture = gl.createTexture() as WebGLTexture;\n            u_colorTransforms = gl.getUniformLocation(this.program, \"u_colorTransforms\") as WebGLUniformLocation;\n            gl.uniform1i(u_colorTransforms, 3);\n\n            colorTransformIndicesTexture = gl.createTexture() as WebGLTexture;\n            u_colorTransformIndices = gl.getUniformLocation(\n                this.program,\n                \"u_colorTransformIndices\",\n            ) as WebGLUniformLocation;\n            gl.uniform1i(u_colorTransformIndices, 4);\n\n            vertexBuffer = gl.createBuffer() as WebGLBuffer;\n            gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([-2, -2, 2, -2, 2, 2, -2, 2]), gl.STATIC_DRAW);\n\n            positionAttribute = gl.getAttribLocation(this.program, \"position\");\n            gl.enableVertexAttribArray(positionAttribute);\n            gl.vertexAttribPointer(positionAttribute, 2, gl.FLOAT, false, 0, 0);\n\n            indexBuffer = gl.createBuffer() as WebGLBuffer;\n            indexAttribute = gl.getAttribLocation(this.program, \"index\");\n            gl.enableVertexAttribArray(indexAttribute);\n            gl.bindBuffer(gl.ARRAY_BUFFER, indexBuffer);\n\n            createWorker();\n        };\n\n        const handleObjectAdded = (event: Event) => {\n            const e = event as ObjectAddedEvent;\n\n            if (e.object instanceof Splat) {\n                e.object.addEventListener(\"objectChanged\", handleObjectChanged);\n            }\n\n            this.dispose();\n        };\n\n        const handleObjectRemoved = (event: Event) => {\n            const e = event as ObjectRemovedEvent;\n\n            if (e.object instanceof Splat) {\n                e.object.removeEventListener(\"objectChanged\", handleObjectChanged);\n            }\n\n            this.dispose();\n        };\n\n        const handleObjectChanged = (event: Event) => {\n            const e = event as ObjectChangedEvent;\n\n            if (e.object instanceof Splat && this._renderData) {\n                this._renderData.markDirty(e.object);\n            }\n        };\n\n        this._render = () => {\n            if (!this._scene || !this._camera || !this.renderData) {\n                console.error(\"Cannot render without scene and camera\");\n                return;\n            }\n\n            if (this.renderData.needsRebuild) {\n                this.renderData.rebuild();\n            }\n\n            if (\n                this.renderData.dataChanged ||\n                this.renderData.transformsChanged ||\n                this.renderData.colorTransformsChanged\n            ) {\n                if (this.renderData.dataChanged) {\n                    gl.activeTexture(gl.TEXTURE0);\n                    gl.bindTexture(gl.TEXTURE_2D, this.splatTexture);\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n                    gl.texImage2D(\n                        gl.TEXTURE_2D,\n                        0,\n                        gl.RGBA32UI,\n                        this.renderData.width,\n                        this.renderData.height,\n                        0,\n                        gl.RGBA_INTEGER,\n                        gl.UNSIGNED_INT,\n                        this.renderData.data,\n                    );\n                }\n\n                if (this.renderData.transformsChanged) {\n                    gl.activeTexture(gl.TEXTURE1);\n                    gl.bindTexture(gl.TEXTURE_2D, transformsTexture);\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n                    gl.texImage2D(\n                        gl.TEXTURE_2D,\n                        0,\n                        gl.RGBA32F,\n                        this.renderData.transformsWidth,\n                        this.renderData.transformsHeight,\n                        0,\n                        gl.RGBA,\n                        gl.FLOAT,\n                        this.renderData.transforms,\n                    );\n\n                    gl.activeTexture(gl.TEXTURE2);\n                    gl.bindTexture(gl.TEXTURE_2D, transformIndicesTexture);\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n                    gl.texImage2D(\n                        gl.TEXTURE_2D,\n                        0,\n                        gl.R32UI,\n                        this.renderData.transformIndicesWidth,\n                        this.renderData.transformIndicesHeight,\n                        0,\n                        gl.RED_INTEGER,\n                        gl.UNSIGNED_INT,\n                        this.renderData.transformIndices,\n                    );\n                }\n\n                if (this.renderData.colorTransformsChanged) {\n                    gl.activeTexture(gl.TEXTURE3);\n                    gl.bindTexture(gl.TEXTURE_2D, colorTransformsTexture);\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n                    gl.texImage2D(\n                        gl.TEXTURE_2D,\n                        0,\n                        gl.RGBA32F,\n                        this.renderData.colorTransformsWidth,\n                        this.renderData.colorTransformsHeight,\n                        0,\n                        gl.RGBA,\n                        gl.FLOAT,\n                        this.renderData.colorTransforms,\n                    );\n\n                    gl.activeTexture(gl.TEXTURE4);\n                    gl.bindTexture(gl.TEXTURE_2D, colorTransformIndicesTexture);\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n                    gl.texImage2D(\n                        gl.TEXTURE_2D,\n                        0,\n                        gl.R32UI,\n                        this.renderData.colorTransformIndicesWidth,\n                        this.renderData.colorTransformIndicesHeight,\n                        0,\n                        gl.RED_INTEGER,\n                        gl.UNSIGNED_INT,\n                        this.renderData.colorTransformIndices,\n                    );\n                }\n\n                const detachedPositions = new Float32Array(this.renderData.positions.slice().buffer);\n                const detachedTransforms = new Float32Array(this.renderData.transforms.slice().buffer);\n                const detachedTransformIndices = new Uint32Array(this.renderData.transformIndices.slice().buffer);\n                this._worker?.postMessage(\n                    {\n                        sortData: {\n                            positions: detachedPositions,\n                            transforms: detachedTransforms,\n                            transformIndices: detachedTransformIndices,\n                            vertexCount: this.renderData.vertexCount,\n                        },\n                    },\n                    [detachedPositions.buffer, detachedTransforms.buffer, detachedTransformIndices.buffer],\n                );\n\n                this.renderData.dataChanged = false;\n                this.renderData.transformsChanged = false;\n                this.renderData.colorTransformsChanged = false;\n            }\n\n            this._camera.update();\n            this._worker?.postMessage({ viewProj: this._camera.data.viewProj.buffer });\n\n            gl.viewport(0, 0, canvas.width, canvas.height);\n            gl.clearColor(0, 0, 0, 0);\n            gl.clear(gl.COLOR_BUFFER_BIT);\n\n            gl.disable(gl.DEPTH_TEST);\n            gl.enable(gl.BLEND);\n            gl.blendFuncSeparate(gl.ONE_MINUS_DST_ALPHA, gl.ONE, gl.ONE_MINUS_DST_ALPHA, gl.ONE);\n            gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n\n            gl.uniformMatrix4fv(u_projection, false, this._camera.data.projectionMatrix.buffer);\n            gl.uniformMatrix4fv(u_view, false, this._camera.data.viewMatrix.buffer);\n\n            gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n            gl.vertexAttribPointer(positionAttribute, 2, gl.FLOAT, false, 0, 0);\n\n            gl.bindBuffer(gl.ARRAY_BUFFER, indexBuffer);\n            gl.bufferData(gl.ARRAY_BUFFER, this.depthIndex, gl.STATIC_DRAW);\n            gl.vertexAttribIPointer(indexAttribute, 1, gl.INT, 0, 0);\n            gl.vertexAttribDivisor(indexAttribute, 1);\n\n            gl.drawArraysInstanced(gl.TRIANGLE_FAN, 0, 4, this.renderData.vertexCount);\n        };\n\n        this._dispose = () => {\n            if (!this._scene || !this._camera || !this.renderData) {\n                console.error(\"Cannot dispose without scene and camera\");\n                return;\n            }\n\n            this._scene.removeEventListener(\"objectAdded\", handleObjectAdded);\n            this._scene.removeEventListener(\"objectRemoved\", handleObjectRemoved);\n            for (const object of this._scene.objects) {\n                if (object instanceof Splat) {\n                    object.removeEventListener(\"objectChanged\", handleObjectChanged);\n                }\n            }\n\n            this._worker?.terminate();\n            this.renderData.dispose();\n\n            gl.deleteTexture(this.splatTexture);\n            gl.deleteTexture(transformsTexture);\n            gl.deleteTexture(transformIndicesTexture);\n\n            gl.deleteBuffer(indexBuffer);\n            gl.deleteBuffer(vertexBuffer);\n        };\n\n        this._setOutlineThickness = (value: number) => {\n            this._outlineThickness = value;\n            if (this._initialized) {\n                gl.uniform1f(u_outlineThickness, value);\n            }\n        };\n\n        this._setOutlineColor = (value: Color32) => {\n            this._outlineColor = value;\n            if (this._initialized) {\n                gl.uniform4fv(u_outlineColor, new Float32Array(value.flatNorm()));\n            }\n        };\n    }\n\n    get renderData() {\n        return this._renderData;\n    }\n\n    get depthIndex() {\n        return this._depthIndex;\n    }\n\n    get splatTexture() {\n        return this._splatTexture;\n    }\n\n    get outlineThickness() {\n        return this._outlineThickness;\n    }\n\n    set outlineThickness(value: number) {\n        this._setOutlineThickness(value);\n    }\n\n    get outlineColor() {\n        return this._outlineColor;\n    }\n\n    set outlineColor(value: Color32) {\n        this._setOutlineColor(value);\n    }\n\n    get worker() {\n        return this._worker;\n    }\n\n    protected _getVertexSource() {\n        return vertexShaderSource;\n    }\n\n    protected _getFragmentSource() {\n        return fragmentShaderSource;\n    }\n}\n\nexport { RenderProgram };\n", "import { RenderProgram } from \"../programs/RenderProgram\";\nimport { ShaderProgram } from \"../programs/ShaderProgram\";\nimport { ShaderPass } from \"./ShaderPass\";\n\nclass FadeInPass implements ShaderPass {\n    initialize: (program: ShaderProgram) => void;\n    render: () => void;\n\n    constructor(speed: number = 1.0) {\n        let value = 0.0;\n        let active = false;\n\n        let renderProgram: RenderProgram;\n        let gl: WebGL2RenderingContext;\n        let u_useDepthFade: WebGLUniformLocation;\n        let u_depthFade: WebGLUniformLocation;\n\n        this.initialize = (program: ShaderProgram) => {\n            if (!(program instanceof RenderProgram)) {\n                throw new Error(\"FadeInPass requires a RenderProgram\");\n            }\n\n            value = program.started ? 1.0 : 0.0;\n            active = true;\n            renderProgram = program;\n            gl = program.renderer.gl;\n\n            u_useDepthFade = gl.getUniformLocation(renderProgram.program, \"useDepthFade\") as WebGLUniformLocation;\n            gl.uniform1i(u_useDepthFade, 1);\n\n            u_depthFade = gl.getUniformLocation(renderProgram.program, \"depthFade\") as WebGLUniformLocation;\n            gl.uniform1f(u_depthFade, value);\n        };\n\n        this.render = () => {\n            if (!active || renderProgram.renderData?.updating) return;\n            gl.useProgram(renderProgram.program);\n            value = Math.min(value + speed * 0.01, 1.0);\n            if (value >= 1.0) {\n                active = false;\n                gl.uniform1i(u_useDepthFade, 0);\n            }\n            gl.uniform1f(u_depthFade, value);\n        };\n    }\n\n    dispose() {}\n}\n\nexport { FadeInPass };\n", "import type { Scene } from \"../core/Scene\";\nimport { FadeInPass } from \"./webgl/passes/FadeInPass\";\nimport { Camera } from \"../cameras/Camera\";\nimport { Color32 } from \"../math/Color32\";\nimport { ShaderProgram } from \"./webgl/programs/ShaderProgram\";\nimport { RenderProgram } from \"./webgl/programs/RenderProgram\";\nimport { ShaderPass } from \"./webgl/passes/ShaderPass\";\n\nexport class WebGLRenderer {\n    private _canvas: HTMLCanvasElement;\n    private _gl: WebGL2RenderingContext;\n    private _backgroundColor: Color32 = new Color32();\n    private _renderProgram: RenderProgram;\n\n    addProgram: (program: ShaderProgram) => void;\n    removeProgram: (program: ShaderProgram) => void;\n    resize: () => void;\n    setSize: (width: number, height: number) => void;\n    render: (scene: Scene, camera: Camera) => void;\n    dispose: () => void;\n\n    constructor(optionalCanvas: HTMLCanvasElement | null = null, optionalRenderPasses: ShaderPass[] | null = null) {\n        const canvas: HTMLCanvasElement = optionalCanvas || document.createElement(\"canvas\");\n        if (!optionalCanvas) {\n            canvas.style.display = \"block\";\n            canvas.style.boxSizing = \"border-box\";\n            canvas.style.width = \"100%\";\n            canvas.style.height = \"100%\";\n            canvas.style.margin = \"0\";\n            canvas.style.padding = \"0\";\n            document.body.appendChild(canvas);\n        }\n        canvas.style.background = this._backgroundColor.toHexString();\n        this._canvas = canvas;\n\n        this._gl = canvas.getContext(\"webgl2\", { antialias: false }) as WebGL2RenderingContext;\n\n        const renderPasses = optionalRenderPasses || [];\n        if (!optionalRenderPasses) {\n            renderPasses.push(new FadeInPass());\n        }\n\n        this._renderProgram = new RenderProgram(this, renderPasses);\n        const programs = [this._renderProgram] as ShaderProgram[];\n\n        this.resize = () => {\n            const width = canvas.clientWidth;\n            const height = canvas.clientHeight;\n            if (canvas.width !== width || canvas.height !== height) {\n                this.setSize(width, height);\n            }\n        };\n\n        this.setSize = (width: number, height: number) => {\n            canvas.width = width;\n            canvas.height = height;\n            this._gl.viewport(0, 0, canvas.width, canvas.height);\n            for (const program of programs) {\n                program.resize();\n            }\n        };\n\n        this.render = (scene: Scene, camera: Camera) => {\n            for (const program of programs) {\n                program.render(scene, camera);\n            }\n        };\n\n        this.dispose = () => {\n            for (const program of programs) {\n                program.dispose();\n            }\n        };\n\n        this.addProgram = (program: ShaderProgram) => {\n            programs.push(program);\n        };\n\n        this.removeProgram = (program: ShaderProgram) => {\n            const index = programs.indexOf(program);\n            if (index < 0) {\n                throw new Error(\"Program not found\");\n            }\n            programs.splice(index, 1);\n        };\n\n        this.resize();\n    }\n\n    get canvas() {\n        return this._canvas;\n    }\n\n    get gl() {\n        return this._gl;\n    }\n\n    get renderProgram() {\n        return this._renderProgram;\n    }\n\n    get backgroundColor() {\n        return this._backgroundColor;\n    }\n\n    set backgroundColor(value: Color32) {\n        this._backgroundColor = value;\n        this._canvas.style.background = value.toHexString();\n    }\n}\n", "import { Camera } from \"../cameras/Camera\";\nimport { Matrix3 } from \"../math/Matrix3\";\nimport { Quaternion } from \"../math/Quaternion\";\nimport { Vector3 } from \"../math/Vector3\";\n\nclass OrbitControls {\n    minAngle: number = -90;\n    maxAngle: number = 90;\n    minZoom: number = 0.1;\n    maxZoom: number = 30;\n    orbitSpeed: number = 1;\n    panSpeed: number = 1;\n    zoomSpeed: number = 1;\n    dampening: number = 0.12;\n    setCameraTarget: (newTarget: Vector3) => void = () => {};\n    update: () => void;\n    dispose: () => void;\n\n    constructor(\n        camera: Camera,\n        canvas: HTMLElement,\n        alpha: number = 0.5,\n        beta: number = 0.5,\n        radius: number = 5,\n        enableKeyboardControls: boolean = true,\n        inputTarget: Vector3 = new Vector3(),\n    ) {\n        let target = inputTarget.clone();\n\n        let desiredTarget = target.clone();\n        let desiredAlpha = alpha;\n        let desiredBeta = beta;\n        let desiredRadius = radius;\n\n        let dragging = false;\n        let panning = false;\n        let lastDist = 0;\n        let lastX = 0;\n        let lastY = 0;\n\n        const keys: { [key: string]: boolean } = {};\n\n        let isUpdatingCamera = false;\n\n        const onCameraChange = () => {\n            if (isUpdatingCamera) return;\n\n            const eulerRotation = camera.rotation.toEuler();\n            desiredAlpha = -eulerRotation.y;\n            desiredBeta = -eulerRotation.x;\n\n            const x = camera.position.x - desiredRadius * Math.sin(desiredAlpha) * Math.cos(desiredBeta);\n            const y = camera.position.y + desiredRadius * Math.sin(desiredBeta);\n            const z = camera.position.z + desiredRadius * Math.cos(desiredAlpha) * Math.cos(desiredBeta);\n\n            desiredTarget = new Vector3(x, y, z);\n        };\n\n        camera.addEventListener(\"objectChanged\", onCameraChange);\n\n        this.setCameraTarget = (newTarget: Vector3) => {\n            const dx = newTarget.x - camera.position.x;\n            const dy = newTarget.y - camera.position.y;\n            const dz = newTarget.z - camera.position.z;\n            desiredRadius = Math.sqrt(dx * dx + dy * dy + dz * dz);\n            desiredBeta = Math.atan2(dy, Math.sqrt(dx * dx + dz * dz));\n            desiredAlpha = -Math.atan2(dx, dz);\n            desiredTarget = new Vector3(newTarget.x, newTarget.y, newTarget.z);\n        };\n\n        const computeZoomNorm = () => {\n            return 0.1 + (0.9 * (desiredRadius - this.minZoom)) / (this.maxZoom - this.minZoom);\n        };\n\n        const onKeyDown = (e: KeyboardEvent) => {\n            keys[e.code] = true;\n            // Map arrow keys to WASD keys\n            if (e.code === \"ArrowUp\") keys[\"KeyW\"] = true;\n            if (e.code === \"ArrowDown\") keys[\"KeyS\"] = true;\n            if (e.code === \"ArrowLeft\") keys[\"KeyA\"] = true;\n            if (e.code === \"ArrowRight\") keys[\"KeyD\"] = true;\n        };\n\n        const onKeyUp = (e: KeyboardEvent) => {\n            keys[e.code] = false; // Map arrow keys to WASD keys\n            if (e.code === \"ArrowUp\") keys[\"KeyW\"] = false;\n            if (e.code === \"ArrowDown\") keys[\"KeyS\"] = false;\n            if (e.code === \"ArrowLeft\") keys[\"KeyA\"] = false;\n            if (e.code === \"ArrowRight\") keys[\"KeyD\"] = false;\n        };\n\n        const onMouseDown = (e: MouseEvent) => {\n            preventDefault(e);\n\n            dragging = true;\n            panning = e.button === 2;\n            lastX = e.clientX;\n            lastY = e.clientY;\n            window.addEventListener(\"mouseup\", onMouseUp);\n        };\n\n        const onMouseUp = (e: MouseEvent) => {\n            preventDefault(e);\n\n            dragging = false;\n            panning = false;\n            window.removeEventListener(\"mouseup\", onMouseUp);\n        };\n\n        const onMouseMove = (e: MouseEvent) => {\n            preventDefault(e);\n\n            if (!dragging || !camera) return;\n\n            const dx = e.clientX - lastX;\n            const dy = e.clientY - lastY;\n\n            if (panning) {\n                const zoomNorm = computeZoomNorm();\n                const panX = -dx * this.panSpeed * 0.01 * zoomNorm;\n                const panY = -dy * this.panSpeed * 0.01 * zoomNorm;\n                const R = Matrix3.RotationFromQuaternion(camera.rotation).buffer;\n                const right = new Vector3(R[0], R[3], R[6]);\n                const up = new Vector3(R[1], R[4], R[7]);\n                desiredTarget = desiredTarget.add(right.multiply(panX));\n                desiredTarget = desiredTarget.add(up.multiply(panY));\n            } else {\n                desiredAlpha -= dx * this.orbitSpeed * 0.003;\n                desiredBeta += dy * this.orbitSpeed * 0.003;\n                desiredBeta = Math.min(\n                    Math.max(desiredBeta, (this.minAngle * Math.PI) / 180),\n                    (this.maxAngle * Math.PI) / 180,\n                );\n            }\n\n            lastX = e.clientX;\n            lastY = e.clientY;\n        };\n\n        const onWheel = (e: WheelEvent) => {\n            preventDefault(e);\n\n            const zoomNorm = computeZoomNorm();\n            desiredRadius += e.deltaY * this.zoomSpeed * 0.025 * zoomNorm;\n            desiredRadius = Math.min(Math.max(desiredRadius, this.minZoom), this.maxZoom);\n        };\n\n        const onTouchStart = (e: TouchEvent) => {\n            preventDefault(e);\n\n            if (e.touches.length === 1) {\n                dragging = true;\n                panning = false;\n                lastX = e.touches[0].clientX;\n                lastY = e.touches[0].clientY;\n                lastDist = 0;\n            } else if (e.touches.length === 2) {\n                dragging = true;\n                panning = true;\n                lastX = (e.touches[0].clientX + e.touches[1].clientX) / 2;\n                lastY = (e.touches[0].clientY + e.touches[1].clientY) / 2;\n                const distX = e.touches[0].clientX - e.touches[1].clientX;\n                const distY = e.touches[0].clientY - e.touches[1].clientY;\n                lastDist = Math.sqrt(distX * distX + distY * distY);\n            }\n        };\n\n        const onTouchEnd = (e: TouchEvent) => {\n            preventDefault(e);\n\n            dragging = false;\n            panning = false;\n        };\n\n        const onTouchMove = (e: TouchEvent) => {\n            preventDefault(e);\n\n            if (!dragging || !camera) return;\n\n            if (panning) {\n                const zoomNorm = computeZoomNorm();\n\n                const distX = e.touches[0].clientX - e.touches[1].clientX;\n                const distY = e.touches[0].clientY - e.touches[1].clientY;\n                const dist = Math.sqrt(distX * distX + distY * distY);\n                const delta = lastDist - dist;\n                desiredRadius += delta * this.zoomSpeed * 0.1 * zoomNorm;\n                desiredRadius = Math.min(Math.max(desiredRadius, this.minZoom), this.maxZoom);\n                lastDist = dist;\n\n                const touchX = (e.touches[0].clientX + e.touches[1].clientX) / 2;\n                const touchY = (e.touches[0].clientY + e.touches[1].clientY) / 2;\n                const dx = touchX - lastX;\n                const dy = touchY - lastY;\n                const R = Matrix3.RotationFromQuaternion(camera.rotation).buffer;\n                const right = new Vector3(R[0], R[3], R[6]);\n                const up = new Vector3(R[1], R[4], R[7]);\n                desiredTarget = desiredTarget.add(right.multiply(-dx * this.panSpeed * 0.025 * zoomNorm));\n                desiredTarget = desiredTarget.add(up.multiply(-dy * this.panSpeed * 0.025 * zoomNorm));\n                lastX = touchX;\n                lastY = touchY;\n            } else {\n                const dx = e.touches[0].clientX - lastX;\n                const dy = e.touches[0].clientY - lastY;\n\n                desiredAlpha -= dx * this.orbitSpeed * 0.003;\n                desiredBeta += dy * this.orbitSpeed * 0.003;\n                desiredBeta = Math.min(\n                    Math.max(desiredBeta, (this.minAngle * Math.PI) / 180),\n                    (this.maxAngle * Math.PI) / 180,\n                );\n\n                lastX = e.touches[0].clientX;\n                lastY = e.touches[0].clientY;\n            }\n        };\n\n        const lerp = (a: number, b: number, t: number) => {\n            return (1 - t) * a + t * b;\n        };\n\n        this.update = () => {\n            isUpdatingCamera = true;\n\n            alpha = lerp(alpha, desiredAlpha, this.dampening);\n            beta = lerp(beta, desiredBeta, this.dampening);\n            radius = lerp(radius, desiredRadius, this.dampening);\n            target = target.lerp(desiredTarget, this.dampening);\n\n            const x = target.x + radius * Math.sin(alpha) * Math.cos(beta);\n            const y = target.y - radius * Math.sin(beta);\n            const z = target.z - radius * Math.cos(alpha) * Math.cos(beta);\n            camera.position = new Vector3(x, y, z);\n\n            const direction = target.subtract(camera.position).normalize();\n            const rx = Math.asin(-direction.y);\n            const ry = Math.atan2(direction.x, direction.z);\n            camera.rotation = Quaternion.FromEuler(new Vector3(rx, ry, 0));\n\n            const moveSpeed = 0.025;\n            const rotateSpeed = 0.01;\n\n            const R = Matrix3.RotationFromQuaternion(camera.rotation).buffer;\n            const forward = new Vector3(-R[2], -R[5], -R[8]);\n            const right = new Vector3(R[0], R[3], R[6]);\n\n            if (keys[\"KeyS\"]) desiredTarget = desiredTarget.add(forward.multiply(moveSpeed));\n            if (keys[\"KeyW\"]) desiredTarget = desiredTarget.subtract(forward.multiply(moveSpeed));\n            if (keys[\"KeyA\"]) desiredTarget = desiredTarget.subtract(right.multiply(moveSpeed));\n            if (keys[\"KeyD\"]) desiredTarget = desiredTarget.add(right.multiply(moveSpeed));\n\n            // Add rotation with 'e' and 'q' for horizontal rotation\n            if (keys[\"KeyE\"]) desiredAlpha += rotateSpeed;\n            if (keys[\"KeyQ\"]) desiredAlpha -= rotateSpeed;\n\n            // Add rotation with 'r' and 'f' for vertical rotation\n            if (keys[\"KeyR\"]) desiredBeta += rotateSpeed;\n            if (keys[\"KeyF\"]) desiredBeta -= rotateSpeed;\n\n            isUpdatingCamera = false;\n        };\n\n        const preventDefault = (e: Event) => {\n            e.preventDefault();\n            e.stopPropagation();\n        };\n\n        this.dispose = () => {\n            canvas.removeEventListener(\"dragenter\", preventDefault);\n            canvas.removeEventListener(\"dragover\", preventDefault);\n            canvas.removeEventListener(\"dragleave\", preventDefault);\n            canvas.removeEventListener(\"contextmenu\", preventDefault);\n\n            canvas.removeEventListener(\"mousedown\", onMouseDown);\n            canvas.removeEventListener(\"mousemove\", onMouseMove);\n            canvas.removeEventListener(\"wheel\", onWheel);\n\n            canvas.removeEventListener(\"touchstart\", onTouchStart);\n            canvas.removeEventListener(\"touchend\", onTouchEnd);\n            canvas.removeEventListener(\"touchmove\", onTouchMove);\n\n            if (enableKeyboardControls) {\n                window.removeEventListener(\"keydown\", onKeyDown);\n                window.removeEventListener(\"keyup\", onKeyUp);\n            }\n        };\n\n        if (enableKeyboardControls) {\n            window.addEventListener(\"keydown\", onKeyDown);\n            window.addEventListener(\"keyup\", onKeyUp);\n        }\n\n        canvas.addEventListener(\"dragenter\", preventDefault);\n        canvas.addEventListener(\"dragover\", preventDefault);\n        canvas.addEventListener(\"dragleave\", preventDefault);\n        canvas.addEventListener(\"contextmenu\", preventDefault);\n\n        canvas.addEventListener(\"mousedown\", onMouseDown);\n        canvas.addEventListener(\"mousemove\", onMouseMove);\n        canvas.addEventListener(\"wheel\", onWheel);\n\n        canvas.addEventListener(\"touchstart\", onTouchStart);\n        canvas.addEventListener(\"touchend\", onTouchEnd);\n        canvas.addEventListener(\"touchmove\", onTouchMove);\n\n        this.update();\n    }\n}\n\nexport { OrbitControls };\n", "import { Camera } from \"../cameras/Camera\";\nimport { Quaternion } from \"../math/Quaternion\";\nimport { Matrix3 } from \"../math/Matrix3\";\nimport { Vector3 } from \"../math/Vector3\";\n\nclass FPSControls {\n    moveSpeed: number = 1.5;\n    lookSpeed: number = 0.7;\n    dampening: number = 0.5;\n    update: () => void;\n    dispose: () => void;\n\n    constructor(camera: Camera, canvas: HTMLCanvasElement) {\n        const keys: { [key: string]: boolean } = {};\n        let pitch = camera.rotation.toEuler().x;\n        let yaw = camera.rotation.toEuler().y;\n        let targetPosition = camera.position;\n        let pointerLock = false;\n\n        const onMouseDown = () => {\n            canvas.requestPointerLock();\n        };\n\n        const onPointerLockChange = () => {\n            pointerLock = document.pointerLockElement === canvas;\n            if (pointerLock) {\n                canvas.addEventListener(\"mousemove\", onMouseMove);\n            } else {\n                canvas.removeEventListener(\"mousemove\", onMouseMove);\n            }\n        };\n\n        const onMouseMove = (e: MouseEvent) => {\n            const mouseX = e.movementX;\n            const mouseY = e.movementY;\n\n            yaw += mouseX * this.lookSpeed * 0.001;\n            pitch -= mouseY * this.lookSpeed * 0.001;\n            pitch = Math.max(-Math.PI / 2, Math.min(Math.PI / 2, pitch));\n        };\n\n        const onKeyDown = (e: KeyboardEvent) => {\n            keys[e.code] = true;\n            // Map arrow keys to WASD keys\n            if (e.code === \"ArrowUp\") keys[\"KeyW\"] = true;\n            if (e.code === \"ArrowDown\") keys[\"KeyS\"] = true;\n            if (e.code === \"ArrowLeft\") keys[\"KeyA\"] = true;\n            if (e.code === \"ArrowRight\") keys[\"KeyD\"] = true;\n        };\n\n        const onKeyUp = (e: KeyboardEvent) => {\n            keys[e.code] = false;\n            // Map arrow keys to WASD keys\n            if (e.code === \"ArrowUp\") keys[\"KeyW\"] = false;\n            if (e.code === \"ArrowDown\") keys[\"KeyS\"] = false;\n            if (e.code === \"ArrowLeft\") keys[\"KeyA\"] = false;\n            if (e.code === \"ArrowRight\") keys[\"KeyD\"] = false;\n            if (e.code === \"Escape\") document.exitPointerLock();\n        };\n\n        this.update = () => {\n            const R = Matrix3.RotationFromQuaternion(camera.rotation).buffer;\n            const forward = new Vector3(-R[2], -R[5], -R[8]);\n            const right = new Vector3(R[0], R[3], R[6]);\n            let move = new Vector3(0, 0, 0);\n            if (keys[\"KeyS\"]) {\n                move = move.add(forward);\n            }\n            if (keys[\"KeyW\"]) {\n                move = move.subtract(forward);\n            }\n            if (keys[\"KeyA\"]) {\n                move = move.subtract(right);\n            }\n            if (keys[\"KeyD\"]) {\n                move = move.add(right);\n            }\n            move = new Vector3(move.x, 0, move.z);\n            if (move.magnitude() > 0) {\n                move = move.normalize();\n            }\n\n            targetPosition = targetPosition.add(move.multiply(this.moveSpeed * 0.01));\n            camera.position = camera.position.add(targetPosition.subtract(camera.position).multiply(this.dampening));\n\n            camera.rotation = Quaternion.FromEuler(new Vector3(pitch, yaw, 0));\n        };\n\n        const preventDefault = (e: Event) => {\n            e.preventDefault();\n            e.stopPropagation();\n        };\n\n        this.dispose = () => {\n            canvas.removeEventListener(\"dragenter\", preventDefault);\n            canvas.removeEventListener(\"dragover\", preventDefault);\n            canvas.removeEventListener(\"dragleave\", preventDefault);\n            canvas.removeEventListener(\"contextmenu\", preventDefault);\n            canvas.removeEventListener(\"mousedown\", onMouseDown);\n\n            document.removeEventListener(\"pointerlockchange\", onPointerLockChange);\n\n            window.removeEventListener(\"keydown\", onKeyDown);\n            window.removeEventListener(\"keyup\", onKeyUp);\n        };\n\n        window.addEventListener(\"keydown\", onKeyDown);\n        window.addEventListener(\"keyup\", onKeyUp);\n\n        canvas.addEventListener(\"dragenter\", preventDefault);\n        canvas.addEventListener(\"dragover\", preventDefault);\n        canvas.addEventListener(\"dragleave\", preventDefault);\n        canvas.addEventListener(\"contextmenu\", preventDefault);\n        canvas.addEventListener(\"mousedown\", onMouseDown);\n\n        document.addEventListener(\"pointerlockchange\", onPointerLockChange);\n\n        this.update();\n    }\n}\n\nexport { FPSControls };\n", "import { Vector3 } from \"./Vector3\";\n\nclass Plane {\n    public readonly normal: Vector3;\n    public readonly point: Vector3;\n\n    constructor(normal: Vector3, point: Vector3) {\n        this.normal = normal;\n        this.point = point;\n    }\n\n    intersect(origin: Vector3, direction: Vector3): Vector3 | null {\n        const denominator = this.normal.dot(direction);\n\n        if (Math.abs(denominator) < 0.0001) {\n            return null;\n        }\n\n        const t = this.normal.dot(this.point.subtract(origin)) / denominator;\n\n        if (t < 0) {\n            return null;\n        }\n\n        return origin.add(direction.multiply(t));\n    }\n}\n\nexport { Plane };\n", "import { ShaderProgram } from \"../programs/ShaderProgram\";\n\nclass ShaderPass {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    initialize(program: ShaderProgram) {}\n    render() {}\n    dispose() {}\n}\n\nexport { ShaderPass };\n", "import { Splatv } from \"../../../splats/Splatv\";\nimport { SplatvData } from \"../../../splats/SplatvData\";\nimport { WebGLRenderer } from \"../../WebGLRenderer\";\nimport { ShaderPass } from \"../passes/ShaderPass\";\nimport { ShaderProgram } from \"./ShaderProgram\";\nimport { ObjectAddedEvent, ObjectChangedEvent, ObjectRemovedEvent } from \"../../../events/Events\";\nimport { Matrix4 } from \"../../../math/Matrix4\";\n\nconst vertexShaderSource = /* glsl */ `#version 300 es\nprecision highp float;\nprecision highp int;\n  \nuniform highp usampler2D u_texture;\nuniform mat4 projection, view;\nuniform vec2 focal;\nuniform vec2 viewport;\nuniform float time;\n  \nin vec2 position;\nin int index;\n  \nout vec4 vColor;\nout vec2 vPosition;\n  \nvoid main () {\n    gl_Position = vec4(0.0, 0.0, 2.0, 1.0);\n\n    uvec4 motion1 = texelFetch(u_texture, ivec2(((uint(index) & 0x3ffu) << 2) | 3u, uint(index) >> 10), 0);\n    vec2 trbf = unpackHalf2x16(motion1.w);\n    float dt = time - trbf.x;\n\n    float topacity = exp(-1.0 * pow(dt / trbf.y, 2.0));\n    if(topacity < 0.02) return;\n\n    uvec4 motion0 = texelFetch(u_texture, ivec2(((uint(index) & 0x3ffu) << 2) | 2u, uint(index) >> 10), 0);\n    uvec4 static0 = texelFetch(u_texture, ivec2(((uint(index) & 0x3ffu) << 2), uint(index) >> 10), 0);\n\n    vec2 m0 = unpackHalf2x16(motion0.x), m1 = unpackHalf2x16(motion0.y), m2 = unpackHalf2x16(motion0.z), \n         m3 = unpackHalf2x16(motion0.w), m4 = unpackHalf2x16(motion1.x); \n      \n    vec4 trot = vec4(unpackHalf2x16(motion1.y).xy, unpackHalf2x16(motion1.z).xy) * dt;\n    vec3 tpos = (vec3(m0.xy, m1.x) * dt + vec3(m1.y, m2.xy) * dt*dt + vec3(m3.xy, m4.x) * dt*dt*dt);\n      \n    vec4 cam = view * vec4(uintBitsToFloat(static0.xyz) + tpos, 1);\n    vec4 pos = projection * cam;\n  \n    float clip = 1.2 * pos.w;\n    if (pos.z < -clip || pos.x < -clip || pos.x > clip || pos.y < -clip || pos.y > clip) return;\n    uvec4 static1 = texelFetch(u_texture, ivec2(((uint(index) & 0x3ffu) << 2) | 1u, uint(index) >> 10), 0);\n\n    vec4 rot = vec4(unpackHalf2x16(static0.w).xy, unpackHalf2x16(static1.x).xy) + trot;\n    vec3 scale = vec3(unpackHalf2x16(static1.y).xy, unpackHalf2x16(static1.z).x);\n    rot /= sqrt(dot(rot, rot));\n  \n    mat3 S = mat3(scale.x, 0.0, 0.0, 0.0, scale.y, 0.0, 0.0, 0.0, scale.z);\n    mat3 R = mat3(\n        1.0 - 2.0 * (rot.z * rot.z + rot.w * rot.w), 2.0 * (rot.y * rot.z - rot.x * rot.w), 2.0 * (rot.y * rot.w + rot.x * rot.z),\n        2.0 * (rot.y * rot.z + rot.x * rot.w), 1.0 - 2.0 * (rot.y * rot.y + rot.w * rot.w), 2.0 * (rot.z * rot.w - rot.x * rot.y),\n        2.0 * (rot.y * rot.w - rot.x * rot.z), 2.0 * (rot.z * rot.w + rot.x * rot.y), 1.0 - 2.0 * (rot.y * rot.y + rot.z * rot.z));\n    mat3 M = S * R;\n    mat3 Vrk = 4.0 * transpose(M) * M;\n    mat3 J = mat3(\n        focal.x / cam.z, 0., -(focal.x * cam.x) / (cam.z * cam.z), \n        0., -focal.y / cam.z, (focal.y * cam.y) / (cam.z * cam.z), \n        0., 0., 0.\n    );\n  \n    mat3 T = transpose(mat3(view)) * J;\n    mat3 cov2d = transpose(T) * Vrk * T;\n  \n    float mid = (cov2d[0][0] + cov2d[1][1]) / 2.0;\n    float radius = length(vec2((cov2d[0][0] - cov2d[1][1]) / 2.0, cov2d[0][1]));\n    float lambda1 = mid + radius, lambda2 = mid - radius;\n  \n    if(lambda2 < 0.0) return;\n    vec2 diagonalVector = normalize(vec2(cov2d[0][1], lambda1 - cov2d[0][0]));\n    vec2 majorAxis = min(sqrt(2.0 * lambda1), 1024.0) * diagonalVector;\n    vec2 minorAxis = min(sqrt(2.0 * lambda2), 1024.0) * vec2(diagonalVector.y, -diagonalVector.x);\n      \n    uint rgba = static1.w;\n    vColor = \n        clamp(pos.z/pos.w+1.0, 0.0, 1.0) * \n        vec4(1.0, 1.0, 1.0, topacity) *\n        vec4(\n            (rgba) & 0xffu, \n            (rgba >> 8) & 0xffu, \n            (rgba >> 16) & 0xffu, \n            (rgba >> 24) & 0xffu) / 255.0;\n\n    vec2 vCenter = vec2(pos) / pos.w;\n    gl_Position = vec4(\n        vCenter \n        + position.x * majorAxis / viewport \n        + position.y * minorAxis / viewport, 0.0, 1.0);\n\n    vPosition = position;\n}\n`;\n\nconst fragmentShaderSource = /* glsl */ `#version 300 es\nprecision highp float;\n  \nin vec4 vColor;\nin vec2 vPosition;\n\nout vec4 fragColor;\n\nvoid main () {\n    float A = -dot(vPosition, vPosition);\n    if (A < -4.0) discard;\n    float B = exp(A) * vColor.a;\n    fragColor = vec4(B * vColor.rgb, B);\n}\n`;\n\nclass VideoRenderProgram extends ShaderProgram {\n    private _renderData: SplatvData | null = null;\n    private _depthIndex: Uint32Array = new Uint32Array();\n    private _splatTexture: WebGLTexture | null = null;\n\n    protected _initialize: () => void;\n    protected _resize: () => void;\n    protected _render: () => void;\n    protected _dispose: () => void;\n\n    constructor(renderer: WebGLRenderer, passes: ShaderPass[] = []) {\n        super(renderer, passes);\n\n        const canvas = renderer.canvas;\n        const gl = renderer.gl;\n\n        let worker: Worker;\n\n        let u_projection: WebGLUniformLocation;\n        let u_viewport: WebGLUniformLocation;\n        let u_focal: WebGLUniformLocation;\n        let u_view: WebGLUniformLocation;\n        let u_texture: WebGLUniformLocation;\n        let u_time: WebGLUniformLocation;\n\n        let positionAttribute: number;\n        let indexAttribute: number;\n\n        let vertexBuffer: WebGLBuffer;\n        let indexBuffer: WebGLBuffer;\n\n        this._resize = () => {\n            if (!this._camera) return;\n\n            this._camera.data.setSize(canvas.width, canvas.height);\n            this._camera.update();\n\n            u_projection = gl.getUniformLocation(this.program, \"projection\") as WebGLUniformLocation;\n            gl.uniformMatrix4fv(u_projection, false, this._camera.data.projectionMatrix.buffer);\n\n            u_viewport = gl.getUniformLocation(this.program, \"viewport\") as WebGLUniformLocation;\n            gl.uniform2fv(u_viewport, new Float32Array([canvas.width, canvas.height]));\n        };\n\n        const setupWorker = () => {\n            if (renderer.renderProgram.worker === null) {\n                console.error(\"Render program is not initialized. Cannot render without worker\");\n                return;\n            }\n            worker = renderer.renderProgram.worker;\n            worker.onmessage = (e) => {\n                if (e.data.depthIndex) {\n                    const { depthIndex } = e.data;\n                    this._depthIndex = depthIndex;\n                    gl.bindBuffer(gl.ARRAY_BUFFER, indexBuffer);\n                    gl.bufferData(gl.ARRAY_BUFFER, depthIndex, gl.STATIC_DRAW);\n                }\n            };\n        };\n\n        this._initialize = () => {\n            if (!this._scene || !this._camera) {\n                console.error(\"Cannot render without scene and camera\");\n                return;\n            }\n\n            this._resize();\n\n            this._scene.addEventListener(\"objectAdded\", handleObjectAdded);\n            this._scene.addEventListener(\"objectRemoved\", handleObjectRemoved);\n            for (const object of this._scene.objects) {\n                if (object instanceof Splatv) {\n                    if (this._renderData === null) {\n                        this._renderData = object.data;\n                        object.addEventListener(\"objectChanged\", handleObjectChanged);\n                    } else {\n                        console.warn(\"Multiple Splatv objects are not currently supported\");\n                    }\n                }\n            }\n\n            if (this._renderData === null) {\n                console.error(\"Cannot render without Splatv object\");\n                return;\n            }\n\n            u_focal = gl.getUniformLocation(this.program, \"focal\") as WebGLUniformLocation;\n            gl.uniform2fv(u_focal, new Float32Array([this._camera.data.fx, this._camera.data.fy]));\n\n            u_view = gl.getUniformLocation(this.program, \"view\") as WebGLUniformLocation;\n            gl.uniformMatrix4fv(u_view, false, this._camera.data.viewMatrix.buffer);\n\n            this._splatTexture = gl.createTexture() as WebGLTexture;\n            u_texture = gl.getUniformLocation(this.program, \"u_texture\") as WebGLUniformLocation;\n            gl.uniform1i(u_texture, 0);\n\n            u_time = gl.getUniformLocation(this.program, \"time\") as WebGLUniformLocation;\n            gl.uniform1f(u_time, Math.sin(Date.now() / 1000) / 2 + 1 / 2);\n\n            vertexBuffer = gl.createBuffer() as WebGLBuffer;\n            gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([-2, -2, 2, -2, 2, 2, -2, 2]), gl.STATIC_DRAW);\n\n            positionAttribute = gl.getAttribLocation(this.program, \"position\");\n            gl.enableVertexAttribArray(positionAttribute);\n            gl.vertexAttribPointer(positionAttribute, 2, gl.FLOAT, false, 0, 0);\n\n            indexBuffer = gl.createBuffer() as WebGLBuffer;\n            indexAttribute = gl.getAttribLocation(this.program, \"index\");\n            gl.enableVertexAttribArray(indexAttribute);\n            gl.bindBuffer(gl.ARRAY_BUFFER, indexBuffer);\n\n            setupWorker();\n\n            gl.activeTexture(gl.TEXTURE0);\n            gl.bindTexture(gl.TEXTURE_2D, this._splatTexture);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n            gl.texImage2D(\n                gl.TEXTURE_2D,\n                0,\n                gl.RGBA32UI,\n                this._renderData.width,\n                this._renderData.height,\n                0,\n                gl.RGBA_INTEGER,\n                gl.UNSIGNED_INT,\n                this._renderData.data,\n            );\n\n            const positions = this._renderData.positions;\n            const dummyTransforms = new Float32Array(new Matrix4().buffer);\n            const dummyTransformIndices = new Uint32Array(this._renderData.vertexCount);\n            dummyTransformIndices.fill(0);\n            worker.postMessage(\n                {\n                    sortData: {\n                        positions: positions,\n                        transforms: dummyTransforms,\n                        transformIndices: dummyTransformIndices,\n                        vertexCount: this._renderData.vertexCount,\n                    },\n                },\n                [positions.buffer, dummyTransforms.buffer, dummyTransformIndices.buffer],\n            );\n        };\n\n        const handleObjectAdded = (event: Event) => {\n            const e = event as ObjectAddedEvent;\n\n            if (e.object instanceof Splatv) {\n                if (this._renderData === null) {\n                    this._renderData = e.object.data;\n                    e.object.addEventListener(\"objectChanged\", handleObjectChanged);\n                } else {\n                    console.warn(\"Splatv not supported by default RenderProgram. Use VideoRenderProgram instead.\");\n                }\n            }\n\n            this.dispose();\n        };\n\n        const handleObjectRemoved = (event: Event) => {\n            const e = event as ObjectRemovedEvent;\n\n            if (e.object instanceof Splatv) {\n                if (this._renderData === e.object.data) {\n                    this._renderData = null;\n                    e.object.removeEventListener(\"objectChanged\", handleObjectChanged);\n                }\n            }\n\n            this.dispose();\n        };\n\n        const handleObjectChanged = (event: Event) => {\n            const e = event as ObjectChangedEvent;\n\n            if (e.object instanceof Splatv && this._renderData === e.object.data) {\n                this.dispose();\n            }\n        };\n\n        this._render = () => {\n            if (!this._scene || !this._camera) {\n                console.error(\"Cannot render without scene and camera\");\n                return;\n            }\n\n            if (!this._renderData) {\n                console.warn(\"Cannot render without Splatv object\");\n                return;\n            }\n\n            this._camera.update();\n            worker.postMessage({ viewProj: this._camera.data.viewProj.buffer });\n\n            gl.viewport(0, 0, canvas.width, canvas.height);\n            gl.clearColor(0, 0, 0, 0);\n            gl.clear(gl.COLOR_BUFFER_BIT);\n\n            gl.disable(gl.DEPTH_TEST);\n            gl.enable(gl.BLEND);\n            gl.blendFuncSeparate(gl.ONE_MINUS_DST_ALPHA, gl.ONE, gl.ONE_MINUS_DST_ALPHA, gl.ONE);\n            gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n\n            gl.uniformMatrix4fv(u_projection, false, this._camera.data.projectionMatrix.buffer);\n            gl.uniformMatrix4fv(u_view, false, this._camera.data.viewMatrix.buffer);\n            gl.uniform1f(u_time, Math.sin(Date.now() / 1000) / 2 + 1 / 2);\n\n            gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n            gl.vertexAttribPointer(positionAttribute, 2, gl.FLOAT, false, 0, 0);\n\n            gl.bindBuffer(gl.ARRAY_BUFFER, indexBuffer);\n            gl.bufferData(gl.ARRAY_BUFFER, this._depthIndex, gl.STATIC_DRAW);\n            gl.vertexAttribIPointer(indexAttribute, 1, gl.INT, 0, 0);\n            gl.vertexAttribDivisor(indexAttribute, 1);\n\n            gl.drawArraysInstanced(gl.TRIANGLE_FAN, 0, 4, this._renderData.vertexCount);\n        };\n\n        this._dispose = () => {\n            if (!this._scene || !this._camera) {\n                console.error(\"Cannot dispose without scene and camera\");\n                return;\n            }\n\n            this._scene.removeEventListener(\"objectAdded\", handleObjectAdded);\n            this._scene.removeEventListener(\"objectRemoved\", handleObjectRemoved);\n            for (const object of this._scene.objects) {\n                if (object instanceof Splatv) {\n                    if (this._renderData === object.data) {\n                        this._renderData = null;\n                        object.removeEventListener(\"objectChanged\", handleObjectChanged);\n                    }\n                }\n            }\n\n            worker?.terminate();\n\n            gl.deleteTexture(this._splatTexture);\n\n            gl.deleteBuffer(indexBuffer);\n            gl.deleteBuffer(vertexBuffer);\n        };\n    }\n\n    get renderData(): SplatvData | null {\n        return this._renderData;\n    }\n\n    protected _getVertexSource(): string {\n        return vertexShaderSource;\n    }\n\n    protected _getFragmentSource(): string {\n        return fragmentShaderSource;\n    }\n}\n\nexport { VideoRenderProgram };\n", "import { Box3 } from \"./Box3\";\n\nclass BVHNode {\n    public left: BVHNode | null = null;\n    public right: BVHNode | null = null;\n    public pointIndices: number[] = [];\n\n    constructor(\n        public bounds: Box3,\n        public boxes: Box3[],\n        pointIndices: number[],\n    ) {\n        if (pointIndices.length > 1) {\n            this.split(bounds, boxes, pointIndices);\n        } else if (pointIndices.length > 0) {\n            this.pointIndices = pointIndices;\n        }\n    }\n\n    private split(bounds: Box3, boxes: Box3[], pointIndices: number[]) {\n        const axis = bounds.size().maxComponent();\n        pointIndices.sort((a, b) => boxes[a].center().getComponent(axis) - boxes[b].center().getComponent(axis));\n\n        const mid = Math.floor(pointIndices.length / 2);\n        const leftIndices = pointIndices.slice(0, mid);\n        const rightIndices = pointIndices.slice(mid);\n\n        this.left = new BVHNode(bounds, boxes, leftIndices);\n        this.right = new BVHNode(bounds, boxes, rightIndices);\n    }\n\n    public queryRange(range: Box3): number[] {\n        if (!this.bounds.intersects(range)) {\n            return [];\n        } else if (this.left !== null && this.right !== null) {\n            return this.left.queryRange(range).concat(this.right.queryRange(range));\n        } else {\n            return this.pointIndices.filter((index) => range.intersects(this.boxes[index]));\n        }\n    }\n}\n\nclass BVH {\n    public root: BVHNode;\n\n    constructor(bounds: Box3, boxes: Box3[]) {\n        const pointIndices = boxes.map((_, index) => index);\n        this.root = new BVHNode(bounds, boxes, pointIndices);\n    }\n\n    public queryRange(range: Box3) {\n        return this.root.queryRange(range);\n    }\n}\n\nexport { BVH };\n", "import { Camera } from \"../../../cameras/Camera\";\nimport { Vector3 } from \"../../../math/Vector3\";\nimport { Splat } from \"../../../splats/Splat\";\nimport { RenderProgram } from \"../programs/RenderProgram\";\nimport { Box3 } from \"../../../math/Box3\";\nimport { BVH } from \"../../../math/BVH\";\nimport { RenderData } from \"./RenderData\";\n\nclass IntersectionTester {\n    testPoint: (x: number, y: number) => Splat | null;\n\n    constructor(renderProgram: RenderProgram, maxDistance: number = 100, resolution: number = 1.0) {\n        let vertexCount = 0;\n        let bvh: BVH | null = null;\n        let lookup: Splat[] = [];\n\n        const build = () => {\n            if (renderProgram.renderData === null) {\n                console.error(\"IntersectionTester cannot be called before renderProgram has been initialized\");\n                return;\n            }\n            lookup = [];\n            const renderData = renderProgram.renderData as RenderData;\n            const boxes = new Array<Box3>(renderData.offsets.size);\n            let i = 0;\n            const bounds = new Box3(\n                new Vector3(Infinity, Infinity, Infinity),\n                new Vector3(-Infinity, -Infinity, -Infinity),\n            );\n            for (const splat of renderData.offsets.keys()) {\n                const splatBounds = splat.bounds;\n                boxes[i++] = splatBounds;\n                bounds.expand(splatBounds.min);\n                bounds.expand(splatBounds.max);\n                lookup.push(splat);\n            }\n            bounds.permute();\n            bvh = new BVH(bounds, boxes);\n            vertexCount = renderData.vertexCount;\n        };\n\n        this.testPoint = (x: number, y: number) => {\n            if (renderProgram.renderData === null || renderProgram.camera === null) {\n                console.error(\"IntersectionTester cannot be called before renderProgram has been initialized\");\n                return null;\n            }\n\n            build();\n\n            if (bvh === null) {\n                console.error(\"Failed to build octree for IntersectionTester\");\n                return null;\n            }\n\n            const renderData = renderProgram.renderData as RenderData;\n            const camera = renderProgram.camera as Camera;\n\n            if (vertexCount !== renderData.vertexCount) {\n                console.warn(\"IntersectionTester has not been rebuilt since the last render\");\n            }\n\n            const ray = camera.screenPointToRay(x, y);\n            for (let x = 0; x < maxDistance; x += resolution) {\n                const point = camera.position.add(ray.multiply(x));\n                const minPoint = new Vector3(\n                    point.x - resolution / 2,\n                    point.y - resolution / 2,\n                    point.z - resolution / 2,\n                );\n                const maxPoint = new Vector3(\n                    point.x + resolution / 2,\n                    point.y + resolution / 2,\n                    point.z + resolution / 2,\n                );\n                const queryBox = new Box3(minPoint, maxPoint);\n                const points = bvh.queryRange(queryBox);\n                if (points.length > 0) {\n                    return lookup[points[0]];\n                }\n            }\n\n            return null;\n        };\n    }\n}\n\nexport { IntersectionTester };\n"],
  "mappings": "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A,IAAMA,GAAE,CAAA,IAAKA,GAAE,CAAA,IAAKA,GAAE,EAAA,IAAMA,GAAE,EAAA,IAAMA,GAAE,CAAA,IACjHA,GAAE,CAAA,IAAKA,GAAE,CAAA,IAAKA,GAAE,EAAA,IAAMA,GAAE,CAAA,IAAKA,GAAE,CAAA,IAAKA,GAAE,CAAA,IAAKA,GAAE,EAAA,IAAMA,GAAE,CAAA,IAAKA,GAAE,EAAA,IAAMA,GAAE,CAAA,IAAKA,GAAE,CAAA,IAAKA,GAAE,CAAA,IAAKA,GAAE,CAAA,IAAKA,GAAE,EAAA,IAAMA,GAAE,CAAA,IAAKA,GAAE,CAAA,IAC/GA,GAAE,EAAA,IAAMA,GAAE,CAAA,IAAKA,GAAE,EAAA,IAAMA,GAAE,CAAA,IAAKA,GAAE,CAAA,IAAKA,GAAE,EAAA,IAAMA,GAAE,EAAA,IAAMA,GAAE,CAAA,IAAKA,GAAE,CAAA,IAAKA,GAAE,CAAA,IAAKA,GAAE,EAAA,IAAMA,GAAE,CAAA,IAAKA,GAAE,CAAA,IAAKA,GAAE,CAAA,IAAKA,GAAE,EAAA,IAAMA,GAAE,CAAA,IACjHA,GAAE,EAAA,IAAMA,GAAE,CAAA,IAAKA,GAAE,CAAA,IAAKA,GAAE,EAAA,IAAMA,GAAE,CAAA,IAAKA,GAAE,EAAA,IAAMA,GAAE,CAAA,IAAKA,GAAE,EAAA,IAAMA,GAAE,EAAA,IAAMA,GAAE,CAAA,IAAKA,GAAE,CAAA,IAAKA,GAAE,EAAA,IAAMA,GAAE,CAAA,IAAKA,GAAE,EAAA,IAAMA,GAAE,CAAA,IAAKA,GAAE,EAAA,IAClHA,GAAE,CAAA,IAAKA,GAAE,CAAA,IAAKA,GAAE,EAAA,IAAMA,GAAE,EAAA,IAAMA,GAAE,CAAA,IAAKA,GAAE,CAAA,IAAKA,GAAE,EAAA,IAAMA,GAAE,EAAA,IAAMA,GAAE,CAAA,IAAKA,GAAE,CAAA,IAAKA,GAAE,CAAA,IAAKA,GAAE,EAAA,IAAMA,GAAE,CAAA,IAAKA,GAAE,CAAA,IAAKA,GAAE,CAAA,IAAKA,GAAE,EAAA,IAChHA,GAAE,CAAA,IAAKA,GAAE,CAAA,IAAKA,GAAE,CAAA,IAAKA,GAAE,EAAA,IAAMA,GAAE,CAAA,IAAKA,GAA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",
  "names": ["Vector3", "x", "y", "z", "this", "v", "buffer", "t", "Math", "min", "max", "axis", "Error", "minComponent", "maxComponent", "magnitude", "sqrt", "normalize", "length", "flat", "clone", "toString", "join", "value", "Quaternion", "w", "q", "l", "w1", "x1", "y1", "z1", "w2", "x2", "y2", "z2", "inverse", "vecQuat", "conjugate", "rotatedQuat", "multiply", "e", "halfX", "halfY", "halfZ", "cy", "cos", "sy", "sin", "cp", "sp", "cz", "sz", "toEuler", "sinr_cosp", "cosr_cosp", "atan2", "sinp", "abs", "sign", "PI", "asin", "siny_cosp", "cosy_cosp", "matrix", "m", "trace", "s", "angle", "halfAngle", "direction", "forward", "dot", "rotAngle", "acos", "rotAxis", "cross", "FromAxisAngle", "EventDispatcher", "constructor", "listeners", "Map", "addEventListener", "type", "listener", "has", "set", "Set", "get", "add", "removeEventListener", "delete", "hasEventListener", "dispatchEvent", "event", "Matrix4", "n11", "n12", "n13", "n14", "n21", "n22", "n23", "n24", "n31", "n32", "n33", "n34", "n41", "n42", "n43", "n44", "i", "a", "b", "determinant", "invert", "det", "invDet", "position", "rotation", "scale", "xx", "xy", "xz", "yy", "yz", "zz", "wx", "wy", "wz", "sx", "ObjectAddedEvent", "Event", "object", "super", "ObjectRemovedEvent", "ObjectChangedEvent", "Object3D", "positionChanged", "rotationChanged", "scaleChanged", "_position", "_rotation", "_scale", "_transform", "_changeEvent", "update", "applyPosition", "applyRotation", "applyScale", "raiseChangeEvent", "_updateMatrix", "Compose", "equals", "apply", "transform", "Matrix3", "cx", "SplatData", "vertexCount", "positions", "rotations", "scales", "colors", "changed", "detached", "_vertexCount", "_positions", "Float32Array", "_rotations", "_scales", "_colors", "Uint8Array", "_selection", "translate", "translation", "rotate", "R", "RotationFromQuaternion", "currentRotation", "newRot", "serialize", "data", "RowLength", "f_buffer", "u_buffer", "reattach", "selection", "console", "assert", "byteLength", "SplatvData", "width", "height", "_data", "_width", "_height", "Uint32Array", "floor", "Converter", "header", "properties", "push", "property", "headerBuffer", "TextEncoder", "encode", "plyRowLength", "plyLength", "output", "DataView", "ArrayBuffer", "offset", "scale_offset", "opacity_offset", "rot_offset", "pos0", "pos1", "pos2", "f_dc_0", "SH_C0", "f_dc_1", "f_dc_2", "alpha", "opacity", "log", "scale0", "scale1", "scale2", "rot0", "rot1", "rot2", "rot3", "setFloat32", "f_dc_offset", "Box3", "point", "box", "size", "subtract", "center", "divide", "permute", "Splat", "splat", "undefined", "selectedChanged", "colorTransformChanged", "_selected", "_colorTransforms", "_colorTransformsMap", "_bounds", "Infinity", "recalculateBounds", "expand", "name", "format", "document", "now", "Date", "getFullYear", "getMonth", "getDate", "blob", "plyData", "SplatToPLY", "Blob", "link", "createElement", "download", "href", "URL", "createObjectURL", "click", "selected", "colorTransforms", "colorTransformsMap", "bounds", "Splatv", "CameraData", "_fx", "_fy", "_near", "_far", "_projectionMatrix", "_viewMatrix", "_viewProj", "_updateProjectionMatrix", "fx", "fy", "far", "near", "projectionMatrix", "viewMatrix", "setSize", "viewProj", "Vector4", "Camera", "camera", "screenPointToRay", "clipSpaceCoords", "inverseProjectionMatrix", "cameraSpaceCoords", "inverseViewMatrix", "worldSpaceCoords", "Scene", "_objects", "addObject", "objects", "removeObject", "index", "indexOf", "splice", "findObject", "predicate", "findObjectOfType", "reset", "objectsToRemove", "slice", "buffers", "async", "initiateFetchRequest", "url", "useCache", "req", "fetch", "mode", "credentials", "cache", "status", "loadRequestDataIntoBuffer", "res", "onProgress", "headers", "reader", "body", "getReader", "contentLength", "parseInt", "bytesRead", "done", "read", "chunks", "receivedLength", "chunk", "Loader", "scene", "LoadFromArrayBuffer", "file", "FileReader", "onload", "target", "result", "onprogress", "loaded", "total", "readAsArrayBuffer", "Promise", "resolve", "onloadend", "arrayBuffer", "Deserialize", "PLYLoader", "_ParsePLYBuffer", "inputBuffer", "ubuf", "headerText", "TextDecoder", "decode", "header_end", "header_end_index", "exec", "rowOffset", "offsets", "double", "int", "uint", "float", "short", "ushort", "uchar", "prop", "split", "filter", "k", "startsWith", "_p", "dataView", "q_polycam", "FromEuler", "rgba", "Uint8ClampedArray", "rot", "r0", "r1", "r2", "r3", "forEach", "getFloat32", "getInt32", "exp", "temp", "SplatvLoader", "_ParseSplatvBuffer", "splatv", "handleChunk", "intView", "Int32Array", "splatChunks", "JSON", "parse", "warn", "cameras", "cameraData", "FromMatrix3", "texwidth", "texheight", "shift", "inputOffset", "sizeToRead", "subarray", "U", "F", "n", "Q", "d", "ShaderProgram", "renderer", "passes", "_scene", "_camera", "_started", "_initialized", "_renderer", "gl", "_program", "createProgram", "_passes", "vertexShader", "createShader", "VERTEX_SHADER", "shaderSource", "_getVertexSource", "compileShader", "getShaderParameter", "COMPILE_STATUS", "error", "getShaderInfoLog", "fragmentShader", "FRAGMENT_SHADER", "_getFragmentSource", "attachShader", "program", "linkProgram", "getProgramParameter", "LINK_STATUS", "getProgramInfoLog", "resize", "useProgram", "_resize", "initialize", "_initialize", "pass", "render", "dispose", "_render", "_dispose", "started", "loadWasm", "moduleArg", "readyPromiseResolve", "readyPromiseReject", "Module", "reject", "readBinary", "moduleOverrides", "Object", "assign", "scriptDirectory", "self", "location", "substr", "replace", "lastIndexOf", "xhr", "XMLHttpRequest", "open", "responseType", "send", "response", "bind", "wasmBinary", "wasmMemory", "err", "WebAssembly", "abort", "HEAP8", "HEAPU8", "HEAP16", "HEAPU16", "HEAP32", "HEAPU32", "HEAPF32", "HEAPF64", "ABORT", "updateMemoryViews", "Int8Array", "Int16Array", "Uint16Array", "Float64Array", "__ATPRERUN__", "__ATINIT__", "__ATPOSTRUN__", "runDependencies", "dependenciesFulfilled", "what", "RuntimeError", "wasmBinaryFile", "path", "dataURIPrefix", "isDataURI", "filename", "getBinarySync", "binary", "decoded", "atob", "bytes", "charCodeAt", "instantiateArrayBuffer", "binaryFile", "imports", "receiver", "then", "instantiate", "instance", "reason", "callRuntimeCallbacks", "callbacks", "embind_charCodes", "BindingError", "readLatin1String", "ptr", "ret", "c", "awaitingDependencies", "registeredTypes", "throwBindingError", "message", "registerType", "rawType", "registeredInstance", "options", "TypeError", "hasOwnProperty", "ignoreDuplicateRegistrations", "cb", "HandleAllocator", "allocated", "freelist", "emval_handles", "count_emval_handles", "count", "reserved", "Emval", "handle", "allocate", "refcount", "simpleReadValueFromPointer", "pointer", "floatReadValueFromPointer", "integerReadValueFromPointer", "signed", "readPointer", "UTF8Decoder", "UTF8ToString", "maxBytesToRead", "heapOrArray", "idx", "endIdx", "endPtr", "str", "u0", "u1", "u2", "String", "fromCharCode", "ch", "UTF16Decoder", "UTF16ToString", "maxIdx", "codeUnit", "stringToUTF16", "outPtr", "maxBytesToWrite", "startPtr", "numCharsToWrite", "lengthBytesUTF16", "UTF32ToString", "utf32", "stringToUTF32", "lengthBytesUTF32", "len", "growMemory", "pages", "grow", "codes", "Array", "embind_init_charCodes", "prototype", "id", "pop", "wasmImports", "f", "primitiveType", "minRange", "maxRange", "trueValue", "falseValue", "fromWireType", "wt", "toWireType", "destructors", "o", "argPackAdvance", "readValueFromPointer", "destructorFunction", "h", "rv", "free", "bitshift", "isUnsignedType", "includes", "dataTypeIndex", "TA", "decodeMemoryView", "stdStringIsUTF8", "payload", "decodeStartPtr", "currentBytePtr", "stringSegment", "_free", "valueIsOfTypeString", "base", "_malloc", "heap", "outIdx", "u", "startIdx", "charCode", "charSize", "decodeString", "encodeString", "getHeap", "lengthBytesUTF", "HEAP", "j", "isVoid", "g", "requestedSize", "oldSize", "maxHeapSize", "multiple", "cutDown", "overGrownHeapSize", "newSize", "wasmExports", "callback", "info", "receiveInstance", "module", "exports", "unshift", "removeRunDependency", "catch", "createWasm", "a0", "a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9", "a10", "calledRun", "run", "doRun", "postRun", "preRun", "setTimeout", "runCaller", "ready", "RenderData", "dataChanged", "transformsChanged", "colorTransformsChanged", "_updating", "_dirty", "splatIndex", "_splatIndices", "_offsets", "lookup", "ceil", "_transformsWidth", "_transformsHeight", "_transforms", "_transformIndicesWidth", "_transformIndicesHeight", "_transformIndices", "_colorTransformsWidth", "_colorTransformsHeight", "fill", "_colorTransformIndicesWidth", "_colorTransformIndicesHeight", "_colorTransformIndices", "colorTransformIndices", "_worker", "DataWorker", "updateTransform", "updateColorTransforms", "keys", "colorTransform", "colorTransformIndex", "wasmModule", "onmessage", "worldPositions", "worldRotations", "worldScales", "initWasm", "buildImmediate", "waitForWasm", "positionsPtr", "rotationsPtr", "scalesPtr", "colorsPtr", "selectionPtr", "dataPtr", "worldPositionsPtr", "worldRotationsPtr", "worldScalesPtr", "_pack", "outData", "build", "serializedSplat", "postMessage", "getSplat", "key", "getLocalIndex", "markDirty", "rebuild", "clear", "terminate", "transforms", "transformsWidth", "transformsHeight", "transformIndices", "transformIndicesWidth", "transformIndicesHeight", "colorTransformsWidth", "colorTransformsHeight", "colorTransformIndicesWidth", "colorTransformIndicesHeight", "needsRebuild", "updating", "Color32", "r", "flatNorm", "toHexString", "map", "padStart", "RenderProgram", "_outlineThickness", "_outlineColor", "_renderData", "_depthIndex", "_splatTexture", "canvas", "u_projection", "u_viewport", "u_focal", "u_view", "u_texture", "u_transforms", "u_transformIndices", "u_colorTransforms", "u_colorTransformIndices", "u_outlineThickness", "u_outlineColor", "positionAttribute", "indexAttribute", "transformsTexture", "transformIndicesTexture", "colorTransformsTexture", "colorTransformIndicesTexture", "vertexBuffer", "indexBuffer", "getUniformLocation", "uniformMatrix4fv", "uniform2fv", "createWorker", "SortWorker", "depthIndex", "bindBuffer", "ARRAY_BUFFER", "bufferData", "STATIC_DRAW", "handleObjectAdded", "handleObjectRemoved", "handleObjectChanged", "uniform1f", "outlineThickness", "uniform4fv", "outlineColor", "createTexture", "uniform1i", "createBuffer", "getAttribLocation", "enableVertexAttribArray", "vertexAttribPointer", "FLOAT", "renderData", "activeTexture", "TEXTURE0", "bindTexture", "TEXTURE_2D", "splatTexture", "texParameteri", "TEXTURE_WRAP_S", "CLAMP_TO_EDGE", "TEXTURE_WRAP_T", "TEXTURE_MIN_FILTER", "NEAREST", "TEXTURE_MAG_FILTER", "texImage2D", "RGBA32UI", "RGBA_INTEGER", "UNSIGNED_INT", "TEXTURE1", "RGBA32F", "RGBA", "TEXTURE2", "R32UI", "RED_INTEGER", "TEXTURE3", "TEXTURE4", "detachedPositions", "detachedTransforms", "detachedTransformIndices", "_a", "sortData", "_b", "viewport", "clearColor", "COLOR_BUFFER_BIT", "disable", "DEPTH_TEST", "enable", "BLEND", "blendFuncSeparate", "ONE_MINUS_DST_ALPHA", "ONE", "blendEquationSeparate", "FUNC_ADD", "vertexAttribIPointer", "INT", "vertexAttribDivisor", "drawArraysInstanced", "TRIANGLE_FAN", "deleteTexture", "deleteBuffer", "_setOutlineThickness", "_setOutlineColor", "worker", "FadeInPass", "speed", "renderProgram", "u_useDepthFade", "u_depthFade", "active", "WebGLRenderer", "optionalCanvas", "optionalRenderPasses", "_backgroundColor", "style", "display", "boxSizing", "margin", "padding", "appendChild", "background", "_canvas", "_gl", "getContext", "antialias", "renderPasses", "_renderProgram", "programs", "clientWidth", "clientHeight", "addProgram", "removeProgram", "backgroundColor", "OrbitControls", "beta", "radius", "enableKeyboardControls", "inputTarget", "minAngle", "maxAngle", "minZoom", "maxZoom", "orbitSpeed", "panSpeed", "zoomSpeed", "dampening", "setCameraTarget", "desiredTarget", "desiredAlpha", "desiredBeta", "desiredRadius", "dragging", "panning", "lastDist", "lastX", "lastY", "isUpdatingCamera", "eulerRotation", "newTarget", "dx", "dy", "dz", "computeZoomNorm", "onKeyDown", "code", "onKeyUp", "onMouseDown", "preventDefault", "button", "clientX", "clientY", "window", "onMouseUp", "onMouseMove", "zoomNorm", "panX", "panY", "right", "up", "onWheel", "deltaY", "onTouchStart", "touches", "distX", "distY", "onTouchEnd", "onTouchMove", "dist", "touchX", "touchY", "lerp", "rx", "ry", "moveSpeed", "rotateSpeed", "stopPropagation", "FPSControls", "lookSpeed", "pitch", "yaw", "targetPosition", "pointerLock", "requestPointerLock", "onPointerLockChange", "pointerLockElement", "mouseX", "movementX", "mouseY", "movementY", "exitPointerLock", "move", "Plane", "normal", "origin", "denominator", "ShaderPass", "VideoRenderProgram", "u_time", "setupWorker", "dummyTransforms", "dummyTransformIndices", "BVHNode", "boxes", "pointIndices", "left", "sort", "getComponent", "mid", "leftIndices", "rightIndices", "range", "intersects", "queryRange", "concat", "BVH", "_", "root", "IntersectionTester", "maxDistance", "resolution", "bvh", "testPoint", "splatBounds", "ray", "minPoint", "maxPoint", "queryBox", "points"]
}
